<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>获取 Chrome 各版本的下载地址</title>
    <url>/2024/01/23/summary/Chrome%20%E5%90%84%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>历史版本：<a href="https://www.lanzout.com/b0khja5g">https://www.lanzout.com/b0khja5g</a></p>
<blockquote>
<p>Win7 最后支持版本 <code>Google Chrome v109.0.5414.120</code></p>
</blockquote>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>HHKB 使用相关</title>
    <url>/2023/08/22/summary/HHKB%20%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<h1 id="蓝牙匹配"><a href="#蓝牙匹配" class="headerlink" title="蓝牙匹配"></a>蓝牙匹配</h1><p><code>FN</code> + <code>Q</code> 开启匹配模式 —— 此时开始闪烁蓝灯<br><code>FN</code> + <code>Control</code> + <code>1</code>~&#96;4&#96; 选择匹配的数字 —— 此时开始快速闪烁蓝灯</p>
<h1 id="切换不同配置"><a href="#切换不同配置" class="headerlink" title="切换不同配置"></a>切换不同配置</h1><p><code>FN</code> + <code>Control</code> + <code>1</code>~&#96;4&#96; 切换不同的</p>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>hhkb</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapbox 相关知识点</title>
    <url>/2023/03/22/summary/Mapbox%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="1-表达式设置属性默认值"><a href="#1-表达式设置属性默认值" class="headerlink" title="1. 表达式设置属性默认值"></a>1. 表达式设置属性默认值</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">paint<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;text-color&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;coalesce&quot;</span><span class="punctuation">,</span> <span class="punctuation">[</span><span class="string">&quot;get&quot;</span><span class="punctuation">,</span> <span class="string">&quot;text-color&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="string">&quot;#348238&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果存在 <code>text-color</code> 的值则使用 <code>text-color</code>，否则取 <code>#348238</code></p>
</blockquote>
<h1 id="2-easyTo-平滑移动页面"><a href="#2-easyTo-平滑移动页面" class="headerlink" title="2. easyTo 平滑移动页面"></a>2. easyTo 平滑移动页面</h1><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mapSDK.<span class="property">map</span>.<span class="title function_">easeTo</span>(&#123;</span><br><span class="line">  <span class="attr">padding</span>: &#123;</span><br><span class="line">    <span class="attr">right</span>: <span class="number">1000</span>, <span class="comment">// 右边留 1000px 距离</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">1000</span>, <span class="comment">// 持续时间</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h1 id="3-flyTo-监听结束状态"><a href="#3-flyTo-监听结束状态" class="headerlink" title="3. flyTo 监听结束状态"></a>3. flyTo 监听结束状态</h1><h2 id="方式-1-通过-easing-回调"><a href="#方式-1-通过-easing-回调" class="headerlink" title="方式 1: 通过 easing 回调"></a>方式 1: 通过 easing 回调</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mapSDK.<span class="property">map</span>.<span class="title function_">flyTo</span>(&#123;</span><br><span class="line">  <span class="attr">center</span>: xxx,</span><br><span class="line">  <span class="attr">easing</span>: <span class="function"><span class="params">t</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (t === <span class="number">1</span>) <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;到达终点, 动画结束&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="方式-2-通过自定义事件数据"><a href="#方式-2-通过自定义事件数据" class="headerlink" title="方式 2: 通过自定义事件数据"></a>方式 2: 通过自定义事件数据</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line">mapSDK.<span class="property">map</span>.<span class="title function_">on</span>(<span class="string">&#x27;moveend&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">moveend</span> === <span class="string">&#x27;flyend&#x27;</span>) &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;moveend&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mapSDK.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params"><span class="attr">e</span>: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">	mapSDK.<span class="property">map</span>.<span class="title function_">flyTo</span>(&#123;</span><br><span class="line">	  <span class="attr">center</span>: e.<span class="property">coordinates</span>,</span><br><span class="line">	&#125;, &#123; <span class="attr">moveend</span>: <span class="string">&#x27;flyend&#x27;</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>mapbox</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian 配置</title>
    <url>/2024/05/06/summary/Obsidian%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><table>
<thead>
<tr>
<th>插件名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>Advanced Tables</td>
<td></td>
</tr>
<tr>
<td>Better Command Palette</td>
<td></td>
</tr>
<tr>
<td>Better Word Count</td>
<td></td>
</tr>
<tr>
<td>Commander</td>
<td></td>
</tr>
<tr>
<td>File Explorer++</td>
<td></td>
</tr>
<tr>
<td>File Tree Alternative</td>
<td></td>
</tr>
<tr>
<td>Highlightr</td>
<td></td>
</tr>
<tr>
<td>Iconize</td>
<td></td>
</tr>
<tr>
<td>Image auto upload Plugin</td>
<td></td>
</tr>
<tr>
<td>Mind Map</td>
<td></td>
</tr>
<tr>
<td>git</td>
<td></td>
</tr>
<tr>
<td>Pandoc</td>
<td></td>
</tr>
<tr>
<td>PDF++</td>
<td></td>
</tr>
<tr>
<td>Recent Files</td>
<td></td>
</tr>
<tr>
<td>Tag Wrangler</td>
<td></td>
</tr>
<tr>
<td>Theme Picker</td>
<td></td>
</tr>
<tr>
<td>Various Complements</td>
<td></td>
</tr>
<tr>
<td>Vimrc Support</td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>obsidian</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Vpn 推荐</title>
    <url>/2024/04/18/summary/Vpn%20%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="EFCloud"><a href="#EFCloud" class="headerlink" title="EFCloud"></a>EFCloud</h1><p><a href="https://www.efcloud.cc/">https://www.efcloud.cc</a></p>
<p><img src="http://cdn.easyhappy.top/obsidian/20230110104224.png"></p>
<h1 id="最萌云"><a href="#最萌云" class="headerlink" title="最萌云"></a>最萌云</h1><p><a href="https://ure.best/">https://ure.best</a></p>
<p><img src="http://cdn.easyhappy.top/obsidian/20230110145531.png"></p>
<h1 id="HKSSNetwork"><a href="#HKSSNetwork" class="headerlink" title="HKSSNetwork"></a>HKSSNetwork</h1><p><a href="https://cn1.hkss-net.xyz/">https://cn1.hkss-net.xyz</a></p>
<p><img src="http://cdn.easyhappy.top/obsidian/20230110104812.png"></p>
<h1 id="西部世界-WestWorldss"><a href="#西部世界-WestWorldss" class="headerlink" title="西部世界 WestWorldss"></a>西部世界 WestWorldss</h1><p><a href="https://sjssr.fun/">https://sjssr.fun/</a></p>
<p><a href="https://wwsj9688.xyz/">https://wwsj9688.xyz</a></p>
<p><img src="http://cdn.easyhappy.top/obsidian/20230110103323.png"></p>
<blockquote>
<p>VIP优惠卷 50元<br>新用户优惠卷 20元</p>
</blockquote>
<h1 id="expressvpn"><a href="#expressvpn" class="headerlink" title="expressvpn"></a>expressvpn</h1><p><a href="https://www.expressvpn.com/">https://www.expressvpn.com</a></p>
<p><img src="http://cdn.easyhappy.top/obsidian/20230110103510.png"></p>
<blockquote>
<p>巨贵</p>
</blockquote>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>css 知识点</title>
    <url>/2022/03/22/summary/css%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="CssModule"><a href="#CssModule" class="headerlink" title="CssModule"></a>CssModule</h1><p>在 modules 中某个 class 不需要随机数</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">global</span>(.blue) &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="where-伪类"><a href="#where-伪类" class="headerlink" title=":where 伪类"></a>:where 伪类</h1><p>降低优先级为 0</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:where</span>(<span class="selector-class">.name</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="水平和垂直滚动条交汇处样式调整"><a href="#水平和垂直滚动条交汇处样式调整" class="headerlink" title="水平和垂直滚动条交汇处样式调整"></a>水平和垂直滚动条交汇处样式调整</h1><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">::--webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter 包</title>
    <url>/2025/01/03/summary/flutter%20%E5%8C%85/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flutter_swiper</td>
<td>轮播图</td>
</tr>
<tr>
<td>dio</td>
<td>网络请求</td>
</tr>
<tr>
<td>shared_preferences</td>
<td>数据持久化</td>
</tr>
<tr>
<td>timeage</td>
<td>时间格式化</td>
</tr>
<tr>
<td>adhara_socket_ie</td>
<td>socket 库</td>
</tr>
<tr>
<td>flutter_redux</td>
<td>flutter 的 redux 库</td>
</tr>
<tr>
<td>image_picker</td>
<td>图片选择库</td>
</tr>
<tr>
<td>camera</td>
<td>摄像头库</td>
</tr>
<tr>
<td>cached_netword_image</td>
<td>加载中&#x2F;失败的占位符</td>
</tr>
<tr>
<td>flutter_advanced_networkimage</td>
<td>加载中&#x2F;失败的占位符</td>
</tr>
<tr>
<td>fluro</td>
<td>路由库</td>
</tr>
<tr>
<td>json_serializable</td>
<td>json module 自动生成构造方法</td>
</tr>
<tr>
<td>city-picker</td>
<td>城市选择器</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 包推荐</title>
    <url>/2024/03/22/summary/npm%20%E5%8C%85%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h2 id="Node默认包"><a href="#Node默认包" class="headerlink" title="Node默认包"></a>Node默认包</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>util</td>
<td>有 promisify 等工具</td>
</tr>
<tr>
<td>fs</td>
<td>文件读写库，可以.promises 获取 promise 版本</td>
</tr>
<tr>
<td>child_process</td>
<td>创建子进程</td>
</tr>
<tr>
<td>readline</td>
<td>检测命令行回车事件</td>
</tr>
<tr>
<td>events</td>
<td>订阅发布库</td>
</tr>
<tr>
<td>prettier</td>
<td>代码格式化工具</td>
</tr>
<tr>
<td>prettier-plugin-tailwindcss</td>
<td>Tailwindcss 的 prettier 插件</td>
</tr>
</tbody></table>
<h2 id="功能类"><a href="#功能类" class="headerlink" title="功能类"></a>功能类</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@locator&#x2F;runtime</td>
<td>从浏览器快速定位到编辑器</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>concurrently</td>
<td>windows 同时执行两个命令</td>
</tr>
<tr>
<td>create-next-app</td>
<td>构建next脚手架</td>
</tr>
<tr>
<td>yo</td>
<td>自定义脚手架平台，可自定义模版和下载指定模版</td>
</tr>
<tr>
<td>anywhere</td>
<td>万金油服务器启动</td>
</tr>
<tr>
<td>ts-node</td>
<td>执行 ts 程序</td>
</tr>
<tr>
<td>node-dev</td>
<td>监听 node 程序</td>
</tr>
<tr>
<td>ts-node-dev</td>
<td>监听 ts 程序，更新自动重启</td>
</tr>
<tr>
<td>nodemon</td>
<td>js 文件变动重新运行</td>
</tr>
<tr>
<td>supervisor</td>
<td>监听 node 程序</td>
</tr>
<tr>
<td>tsc</td>
<td>编译 ts 为 js 文件</td>
</tr>
<tr>
<td>cloc</td>
<td>统计代码行数</td>
</tr>
<tr>
<td>parcel</td>
<td>轻量打包工具，启动本地服务</td>
</tr>
<tr>
<td>http-server</td>
<td>本地服务</td>
</tr>
<tr>
<td>server</td>
<td>本地服务</td>
</tr>
<tr>
<td>git-open</td>
<td>快速打开 git 仓库</td>
</tr>
<tr>
<td>json-server</td>
<td>基于 rest 规则生成服务器</td>
</tr>
<tr>
<td>cross-env</td>
<td>跨平台设置环境变量</td>
</tr>
<tr>
<td>gh-pages</td>
<td>自动部署github page</td>
</tr>
<tr>
<td>mitt</td>
<td>Vue3推荐使用的eventbus</td>
</tr>
<tr>
<td>eventemitter3</td>
<td>比较老牌的eventbus</td>
</tr>
<tr>
<td>@novu&#x2F;node</td>
<td>node 端的消息(邮件&#x2F;facebook…)通知库</td>
</tr>
<tr>
<td>release-it</td>
<td>发版工具</td>
</tr>
<tr>
<td>react-scan</td>
<td>react 性能扫描工具</td>
</tr>
</tbody></table>
<h2 id="全端通用工具"><a href="#全端通用工具" class="headerlink" title="全端通用工具"></a>全端通用工具</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@faker-js&#x2F;faker</td>
<td>比较新的 mock 数据库</td>
</tr>
<tr>
<td>mathjs</td>
<td>计算库，包含大数值和小数计算问题解决方案</td>
</tr>
<tr>
<td>crypto-js</td>
<td>加密库（md5、对称加密等）</td>
</tr>
<tr>
<td>qs</td>
<td>处理 url 路径 search 参数为对象</td>
</tr>
<tr>
<td>flyio</td>
<td>http 请求库</td>
</tr>
<tr>
<td>moment</td>
<td>格式化时间</td>
</tr>
<tr>
<td>dayjs</td>
<td>格式化时间</td>
</tr>
<tr>
<td>date-fns</td>
<td>比 dayjs 更新的时间工具</td>
</tr>
<tr>
<td>date-fns-tz</td>
<td>兼容性较强的, 指定时区格式化</td>
</tr>
<tr>
<td>async</td>
<td>异步库</td>
</tr>
<tr>
<td>civet</td>
<td>结合 typescript 和 coffescript 的新框架</td>
</tr>
<tr>
<td>lodash-es</td>
<td>工具集 lodash 的 es 版本</td>
</tr>
<tr>
<td>radash</td>
<td>lodash 的替代品</td>
</tr>
<tr>
<td>zod</td>
<td>数据验证的工具</td>
</tr>
<tr>
<td>zod-i18n-map</td>
<td>zod 的国际化版本</td>
</tr>
<tr>
<td>yup</td>
<td>数据验证工具</td>
</tr>
<tr>
<td>valibot</td>
<td>比 zod 更新的数据验证工具</td>
</tr>
<tr>
<td>fast-xml-parse</td>
<td>全端通用的 xml parse 库</td>
</tr>
<tr>
<td>p-limit</td>
<td>并发控制库</td>
</tr>
<tr>
<td>core-js</td>
<td>各版本 js 实现, 垫片</td>
</tr>
<tr>
<td>globby</td>
<td>更好的 glob 匹配</td>
</tr>
<tr>
<td>web-worker</td>
<td>统一浏览器和nodejs的worker写法</td>
</tr>
<tr>
<td>jspdf</td>
<td>pdf 生成库</td>
</tr>
<tr>
<td>docx</td>
<td>doc 文档生成</td>
</tr>
<tr>
<td>dompurify</td>
<td>清理 html 字符串, 防止 XSS 攻击</td>
</tr>
</tbody></table>
<h2 id="浏览器工具"><a href="#浏览器工具" class="headerlink" title="浏览器工具"></a>浏览器工具</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>nanoid</td>
<td>生成随机id</td>
<td></td>
</tr>
<tr>
<td>@fingerprintjs&#x2F;fingerprintjs</td>
<td>获取浏览器唯一指纹</td>
<td></td>
</tr>
<tr>
<td>mixpanel-browser</td>
<td>埋点数据分析库客户端</td>
<td></td>
</tr>
<tr>
<td>@neodrag&#x2F;vanilla</td>
<td>js轻量拖拽库</td>
<td></td>
</tr>
<tr>
<td>@tanstack&#x2F;react-router</td>
<td>路由库 js&#x2F;ts&#x2F;react&#x2F;vue&#x2F;solid&#x2F;svelte 等</td>
<td></td>
</tr>
<tr>
<td>highlight.js</td>
<td>高亮代码块</td>
<td></td>
</tr>
<tr>
<td>marked</td>
<td>markdown 编辑器</td>
<td></td>
</tr>
<tr>
<td>subjx</td>
<td>拖动、缩放、旋转</td>
<td></td>
</tr>
<tr>
<td>copy-to-clipboard</td>
<td>前端复制剪切板</td>
<td></td>
</tr>
<tr>
<td>html2canvas</td>
<td>通过 html 生成 canvas</td>
<td></td>
</tr>
<tr>
<td>canvas2Image</td>
<td>把 canvas 转图片</td>
<td></td>
</tr>
<tr>
<td>fullpage.js</td>
<td>全屏滚动库</td>
<td></td>
</tr>
<tr>
<td>animejs</td>
<td>轻小型动画库</td>
<td></td>
</tr>
<tr>
<td>sentry</td>
<td>前端异常监控系统</td>
<td></td>
</tr>
<tr>
<td>aegis</td>
<td>前端异常监控系统，tdesign在使用</td>
<td></td>
</tr>
<tr>
<td>nprogress</td>
<td>网页顶部进度条样式</td>
<td></td>
</tr>
<tr>
<td>html-to-text</td>
<td>将标签内容转为text内容，去掉所有标签元素</td>
<td></td>
</tr>
<tr>
<td>gsap</td>
<td>牛逼的动画效果库</td>
<td></td>
</tr>
<tr>
<td>@blocksuite&#x2F;editor</td>
<td>好看的编辑器</td>
<td></td>
</tr>
<tr>
<td>driver.js</td>
<td>步骤提示库, 引导用户操作</td>
<td></td>
</tr>
<tr>
<td>@n1rjal&#x2F;pm_ts</td>
<td>根据 postman 的 json 文件生成 typescript 的类型文件</td>
<td></td>
</tr>
<tr>
<td>@builder.io&#x2F;partytown</td>
<td>通过 WebWorker 加载第三方脚本</td>
<td></td>
</tr>
<tr>
<td>@emailjs&#x2F;browser</td>
<td>无需后端即可完成邮件发送</td>
<td></td>
</tr>
<tr>
<td>pixi.js</td>
<td>canvas 与 webgl 结合的框架</td>
<td></td>
</tr>
<tr>
<td>@trpc&#x2F;client</td>
<td>trpc 统一前后端的 typescript 类型</td>
<td></td>
</tr>
<tr>
<td>quill</td>
<td>富文本工具(国外)</td>
<td></td>
</tr>
<tr>
<td>@wangeditor&#x2F;editor</td>
<td>富文本工具(国内)</td>
<td></td>
</tr>
<tr>
<td>particles.js</td>
<td>粒子效果装饰库</td>
<td></td>
</tr>
<tr>
<td>@editorjs&#x2F;editorjs</td>
<td>类似 notion 的编辑器</td>
<td></td>
</tr>
<tr>
<td>pdfjs-dist</td>
<td>react较好的pdf预览组件</td>
<td></td>
</tr>
<tr>
<td>pdf-viewer</td>
<td>浏览 pdf 的库</td>
<td></td>
</tr>
<tr>
<td>@trpc&#x2F;client</td>
<td>trpc 客户端</td>
<td></td>
</tr>
<tr>
<td>underscore</td>
<td>填充一些浏览器中的一些通用函数, 在旧版本中</td>
<td></td>
</tr>
<tr>
<td>@builder.io&#x2F;partytown</td>
<td>将资源密集的操作转到 web worker 中</td>
<td></td>
</tr>
<tr>
<td>watermark-js-plus</td>
<td>暗水印添加</td>
<td></td>
</tr>
<tr>
<td>cropperjs</td>
<td>图片裁剪</td>
<td></td>
</tr>
<tr>
<td>hotkeys-js</td>
<td>快捷键库</td>
<td></td>
</tr>
<tr>
<td>html2canvas</td>
<td>dom 转 canvas 库, 可用于截图</td>
<td></td>
</tr>
<tr>
<td>qrcode</td>
<td>二维码生成</td>
<td></td>
</tr>
<tr>
<td>node-qrcode</td>
<td>支持多端的二维码生成</td>
<td></td>
</tr>
<tr>
<td>file-saver</td>
<td>保存文件</td>
<td></td>
</tr>
<tr>
<td>tailwind-merge</td>
<td>合并重复的 tailwind 类名</td>
<td></td>
</tr>
<tr>
<td>three</td>
<td>基于 webgl 的 3d 库</td>
<td></td>
</tr>
<tr>
<td>stats.js</td>
<td>threejs 的性能检测面板</td>
<td></td>
</tr>
<tr>
<td>dat.gui</td>
<td>threejs 的 gui 修改参数插件</td>
<td></td>
</tr>
<tr>
<td>three-orbitcontrols</td>
<td>threejs 相机移动控件</td>
<td></td>
</tr>
<tr>
<td>@tweenjs&#x2F;tween.js</td>
<td>补间动画, 类似 css 的关键帧动画</td>
<td></td>
</tr>
<tr>
<td>babylonjs</td>
<td>用于游戏开发的 webgl 3d 库</td>
<td></td>
</tr>
<tr>
<td>chart.js</td>
<td>国外评分最高的图表库</td>
<td></td>
</tr>
<tr>
<td>effector</td>
<td>比较新颖的状态库, 局部和全局. 支持 react &#x2F; vue &#x2F; solid</td>
<td></td>
</tr>
<tr>
<td>xstate</td>
<td>基于状态机的 状态管理库</td>
<td></td>
</tr>
<tr>
<td>@apollo&#x2F;client</td>
<td>apollo 客户端, graphql</td>
<td></td>
</tr>
<tr>
<td>radar-sdk-js</td>
<td>较为实惠的 google 地图替代方案</td>
<td></td>
</tr>
<tr>
<td>leader-line-new</td>
<td>动效引导线</td>
<td></td>
</tr>
<tr>
<td>jheat.js</td>
<td>类似 github 的热力图</td>
<td></td>
</tr>
<tr>
<td>JsBarcode</td>
<td>条形码生成</td>
<td></td>
</tr>
<tr>
<td>lingo.dev</td>
<td>基于 LLM 自动翻译网站</td>
<td></td>
</tr>
</tbody></table>
<h2 id="Node端工具"><a href="#Node端工具" class="headerlink" title="Node端工具"></a>Node端工具</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>dotenv</td>
<td>读取 .env 文件</td>
</tr>
<tr>
<td>mstts-js</td>
<td>文字转语音</td>
</tr>
<tr>
<td>node-schedule</td>
<td>定时器工具</td>
</tr>
<tr>
<td>async-validator</td>
<td>校验库</td>
</tr>
<tr>
<td>md5</td>
<td>md5 加密</td>
</tr>
<tr>
<td>spark-md5</td>
<td>提供更多的 md5 方式</td>
</tr>
<tr>
<td>glob</td>
<td>通过通配符匹配路径</td>
</tr>
<tr>
<td>yargs-parser</td>
<td>获取 cmd 参数</td>
</tr>
<tr>
<td>chalk</td>
<td>cmd 信息样式设置</td>
</tr>
<tr>
<td>cli-progress</td>
<td>node 进度条</td>
</tr>
<tr>
<td>inquirer</td>
<td>命令行选项</td>
</tr>
<tr>
<td>commander</td>
<td>定制命令行界面</td>
</tr>
<tr>
<td>clear</td>
<td>清空控制台</td>
</tr>
<tr>
<td>figlet</td>
<td>打印字符文字</td>
</tr>
<tr>
<td>download-git-repo</td>
<td>下载 git 仓库</td>
</tr>
<tr>
<td>ora</td>
<td>命令行加载动画</td>
</tr>
<tr>
<td>iconv-lite</td>
<td>解决编码问题</td>
</tr>
<tr>
<td>cheerio</td>
<td>可以理解为 node 下的 jQuery</td>
</tr>
<tr>
<td>request</td>
<td>用于在 Node 端发送请求</td>
</tr>
<tr>
<td>nodemailer</td>
<td>发送邮件</td>
</tr>
<tr>
<td>fs-extra</td>
<td>文件操作（移动文件等）</td>
</tr>
<tr>
<td>uuid</td>
<td>uuid 库</td>
</tr>
<tr>
<td>ogr2ogr</td>
<td>文件格式转换，例如 dxf</td>
</tr>
<tr>
<td>dxf</td>
<td>dxf 解析工具，可以转 svg</td>
</tr>
<tr>
<td>gh-pages</td>
<td>github page部署库</td>
</tr>
<tr>
<td>decompress</td>
<td>解压压缩包</td>
</tr>
<tr>
<td>compress-images</td>
<td>图片压缩</td>
</tr>
<tr>
<td>imagemin</td>
<td>图片压缩</td>
</tr>
<tr>
<td>picocolors</td>
<td>输入颜色字符</td>
</tr>
<tr>
<td>log4js</td>
<td>生成日志文件</td>
</tr>
<tr>
<td>@trpc&#x2F;server</td>
<td>trpc 统一前后端的 typescript 类型</td>
</tr>
<tr>
<td>sharp</td>
<td>图像处理库</td>
</tr>
<tr>
<td>morgan</td>
<td>http 日志记录库</td>
</tr>
<tr>
<td>zlib</td>
<td>gzip 压缩解压缩库</td>
</tr>
<tr>
<td>oxlint</td>
<td>替代 eslint 的库</td>
</tr>
<tr>
<td>@antfu&#x2F;eslint-config</td>
<td>antfu 推荐的 eslint config</td>
</tr>
<tr>
<td>@trpc&#x2F;server</td>
<td>trpc 服务端</td>
</tr>
<tr>
<td>consul</td>
<td>微服务注册关联管理库</td>
</tr>
<tr>
<td>npmlog</td>
<td>在 cli 中的 log 工具</td>
</tr>
<tr>
<td>semver</td>
<td>比较版本号大小</td>
</tr>
<tr>
<td>colors</td>
<td>颜色库</td>
</tr>
<tr>
<td>root-check</td>
<td>降级 sudo 权限, 避免权限造成的影响</td>
</tr>
<tr>
<td>user-home</td>
<td>获取用户主目录路径</td>
</tr>
<tr>
<td>path-exists</td>
<td>判断文件 path 是否存在</td>
</tr>
<tr>
<td>minimist</td>
<td>命令行参数解析</td>
</tr>
<tr>
<td>url-join</td>
<td>url 的自动拼接</td>
</tr>
<tr>
<td>npminstall</td>
<td>cnpm 中通过代码 install 的库</td>
</tr>
<tr>
<td>rimraf</td>
<td>rm 多系统删除库</td>
</tr>
<tr>
<td>simple-git</td>
<td>代码进行 git 管理</td>
</tr>
<tr>
<td>bcrypt</td>
<td>加密库</td>
</tr>
<tr>
<td>figlet</td>
<td>FIG 字符, 终端绘制字符画</td>
</tr>
<tr>
<td>lru-cache</td>
<td>lru 缓存算法的实现库</td>
</tr>
<tr>
<td>workerpool</td>
<td>worker 封装库</td>
</tr>
<tr>
<td>node-html-parser</td>
<td>html 的解析库</td>
</tr>
<tr>
<td>docusaurus</td>
<td>文档自动生成工具</td>
</tr>
<tr>
<td>hpp</td>
<td>参数脏数据清理</td>
</tr>
<tr>
<td>http-status</td>
<td>http 状态的枚举定义库</td>
</tr>
<tr>
<td>ioredis</td>
<td>node-redis 的改良版</td>
</tr>
<tr>
<td>@apollo&#x2F;server</td>
<td>graphql 的实现标准, 支持多个 web 框架</td>
</tr>
<tr>
<td>fast-folder-size</td>
<td>快速获取文件夹的大小</td>
</tr>
<tr>
<td>passport</td>
<td>身份验证库</td>
</tr>
<tr>
<td>svg2pdf.js</td>
<td>svg 转 pdf 文件</td>
</tr>
<tr>
<td>pdf2html</td>
<td>pdf 文件转 html</td>
</tr>
<tr>
<td>ink</td>
<td>用 react 编写 cli 界面</td>
</tr>
<tr>
<td>envalid</td>
<td>验证环境变量的校验库</td>
</tr>
<tr>
<td>@upyo&#x2F;core</td>
<td>适配 bun node deno 的邮件库</td>
</tr>
<tr>
<td>discord.js</td>
<td>discord 的 api 库</td>
</tr>
</tbody></table>
<h3 id="代码规范相关"><a href="#代码规范相关" class="headerlink" title="代码规范相关"></a>代码规范相关</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>husky</td>
<td>哈士奇，用于 githook</td>
</tr>
<tr>
<td>commitizen</td>
<td>用于 commit log 生成</td>
</tr>
<tr>
<td>cz-customizable</td>
<td>自定义 cz 命令行的展示文本</td>
</tr>
<tr>
<td>validate-commit-msg</td>
<td>用于校验 commit log</td>
</tr>
<tr>
<td>commitlint</td>
<td>用于校验 commit 的 lint</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="服务端相关"><a href="#服务端相关" class="headerlink" title="服务端相关"></a>服务端相关</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>egg-router-group</td>
<td>egg 的路由分组</td>
</tr>
<tr>
<td>egg-mongoose</td>
<td>egg 连接 MongoDB</td>
</tr>
<tr>
<td>egg-valiadate</td>
<td>egg 校验前端传递参数</td>
</tr>
<tr>
<td>co-wechat</td>
<td>微信体系</td>
</tr>
<tr>
<td>co-wechat-api</td>
<td>微信体系 api</td>
</tr>
<tr>
<td>jsonwebtoken</td>
<td>token 库</td>
</tr>
<tr>
<td>mysql</td>
<td>mysql 库</td>
</tr>
<tr>
<td>mysql2</td>
<td>mysql 增强版库，里面有 promise 版本 mysql2&#x2F;promise</td>
</tr>
<tr>
<td>sequelize</td>
<td>orm 操作数据</td>
</tr>
<tr>
<td>drizzle-orm</td>
<td>新的 orm 数据库检索工具</td>
</tr>
<tr>
<td>mongodb</td>
<td>mongo 数据库操作</td>
</tr>
<tr>
<td>mongoose</td>
<td>基于 mongodb 封装简化操作</td>
</tr>
<tr>
<td>svg-captcha</td>
<td>验证码</td>
</tr>
<tr>
<td>gm</td>
<td>使用 <a href="http://www.graphicsmagick.org/">GraphicsMagick</a> or <a href="http://www.imagemagick.org/">ImageMagick</a> 生成缩略图</td>
</tr>
<tr>
<td>body-parser</td>
<td>解析body的内容</td>
</tr>
<tr>
<td>koa2-connect-history-api-fallback</td>
<td>koa中适配spa应用的history模式</td>
</tr>
<tr>
<td>express</td>
<td>后端框架</td>
</tr>
<tr>
<td>express-validator<br></td>
<td>express 请求入参校验</td>
</tr>
<tr>
<td>ipstack</td>
<td>各种工具 api 集成平台</td>
</tr>
</tbody></table>
<h4 id="Nest-js"><a href="#Nest-js" class="headerlink" title="Nest.js"></a>Nest.js</h4><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>necord</td>
<td>配合 discord.js 的库</td>
</tr>
</tbody></table>
<h4 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h4><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>koa-router</td>
<td>koa 路由库</td>
</tr>
<tr>
<td>@koa&#x2F;bodyparser</td>
<td>koa body 处理</td>
</tr>
<tr>
<td>@koa&#x2F;cors</td>
<td>koa cors 库</td>
</tr>
<tr>
<td>@types&#x2F;koa__cors</td>
<td>koa cors 库类型</td>
</tr>
</tbody></table>
<h3 id="babel相关"><a href="#babel相关" class="headerlink" title="babel相关"></a>babel相关</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@babel&#x2F;core</td>
<td>babel 核心</td>
</tr>
<tr>
<td>@babel&#x2F;preset-env</td>
<td>解析 es</td>
</tr>
<tr>
<td>@babel&#x2F;preset-react</td>
<td>解析 react</td>
</tr>
<tr>
<td>@babel&#x2F;preset-typescript</td>
<td>解析 typescript</td>
</tr>
</tbody></table>
<h3 id="Webpack相关"><a href="#Webpack相关" class="headerlink" title="Webpack相关"></a>Webpack相关</h3><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>webpack-cli</td>
<td>webpack 的 cli 工具</td>
</tr>
<tr>
<td>webpack-dev-server</td>
<td>热更新</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>stylus-loader</td>
<td>stylus 加载器</td>
</tr>
<tr>
<td>ts-loader</td>
<td>ts 加载器</td>
</tr>
<tr>
<td>awesome-typescript-loader</td>
<td>ts-loader 的强化版</td>
</tr>
<tr>
<td>babel-loader</td>
<td>babel 加载器</td>
</tr>
<tr>
<td>vue-loader</td>
<td>vue 加载器</td>
</tr>
<tr>
<td>loader-utils</td>
<td>在 loader 中获取 options 的库</td>
</tr>
</tbody></table>
<h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>mini-css-extract-plugin</td>
<td>抽离 css 的文件</td>
</tr>
<tr>
<td>html-webpack-plugin</td>
<td>html 模板插件</td>
</tr>
<tr>
<td>webpack-bundle-analyzer</td>
<td>打包分析工具</td>
</tr>
</tbody></table>
<h2 id="React-类"><a href="#React-类" class="headerlink" title="React 类"></a>React 类</h2><h3 id="不再推荐"><a href="#不再推荐" class="headerlink" title="不再推荐"></a>不再推荐</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>classnames</td>
<td>类名写法优化(被 clsx 平替)</td>
</tr>
</tbody></table>
<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>react-hook-form</td>
<td>评分较高的 form 表单封装库</td>
</tr>
<tr>
<td>clsx</td>
<td>类名写法优化</td>
</tr>
<tr>
<td>braft-editor</td>
<td>富文本编辑器</td>
</tr>
<tr>
<td>rc-form</td>
<td>（类组件）react 表单处理，提供一些列 api（检验，默认值，数据读写）等</td>
</tr>
<tr>
<td>react-spring</td>
<td>交互动画库</td>
</tr>
<tr>
<td>react-error-boundary</td>
<td>错误边界库</td>
</tr>
<tr>
<td>recoil</td>
<td>react 状态管理库</td>
</tr>
<tr>
<td>react-redux</td>
<td>react 封装的 redux 库</td>
</tr>
<tr>
<td>@emotion&#x2F;styled @emotion&#x2F;react</td>
<td>css-in方案</td>
</tr>
<tr>
<td>react-helmet</td>
<td>网站head相关的设置</td>
</tr>
<tr>
<td>@welldone-software&#x2F;why-did-you-render</td>
<td>查看是谁渲染</td>
</tr>
<tr>
<td>immer</td>
<td>数据不可变，直接改值</td>
</tr>
<tr>
<td>redux-toolkit</td>
<td>使用immer与react-redux结合，最佳实践</td>
</tr>
<tr>
<td>swr</td>
<td>与上面类似的兄弟库</td>
</tr>
<tr>
<td>react-beautiful-dnd</td>
<td>拖拽库</td>
</tr>
<tr>
<td>@dnd-kit&#x2F;core</td>
<td>拖拽库</td>
</tr>
<tr>
<td>sonner</td>
<td>比较普适的消息提示弹窗</td>
</tr>
<tr>
<td>react-dragable</td>
<td>拖拽库</td>
</tr>
<tr>
<td>gridstack</td>
<td>栅格化拖拽库</td>
</tr>
<tr>
<td>react-grid-layout</td>
<td>栅格化拖拽库</td>
</tr>
<tr>
<td>rc-resize-observer</td>
<td>大小监听组件</td>
</tr>
<tr>
<td>react-email</td>
<td>邮件组件模板</td>
</tr>
<tr>
<td>swr</td>
<td>接口请求库</td>
</tr>
<tr>
<td>react-transition-group</td>
<td>动画库</td>
</tr>
<tr>
<td>react-animations</td>
<td>动画库</td>
</tr>
<tr>
<td>react reveal</td>
<td>动画库</td>
</tr>
<tr>
<td>tweenone</td>
<td>动画库</td>
</tr>
<tr>
<td>immutabale.js</td>
<td>数据不可变库, 反直觉</td>
</tr>
<tr>
<td>react-slick</td>
<td>滑块轮播图组件, antd 内部使用的这个</td>
</tr>
<tr>
<td>react-icons</td>
<td>react 用的 icon 图标集</td>
</tr>
<tr>
<td>framer-motion</td>
<td>丝滑的动画库</td>
</tr>
<tr>
<td>motion</td>
<td>动画库</td>
</tr>
<tr>
<td>wouter</td>
<td>一个轻量的route库</td>
</tr>
<tr>
<td>avvvatars-react</td>
<td>精美的头像占位符</td>
</tr>
<tr>
<td>react-i18next</td>
<td>i18 库</td>
</tr>
<tr>
<td>recharts</td>
<td>基于 d3 的 chart 图表库</td>
</tr>
<tr>
<td>react-typewriter</td>
<td>react 模拟打字动画的库</td>
</tr>
<tr>
<td>react-joyride</td>
<td>react 引导下一步流程库</td>
</tr>
<tr>
<td>@react-pdf&#x2F;renderer</td>
<td>react pdf 渲染库</td>
</tr>
<tr>
<td>swiper</td>
<td>react 的轮播库</td>
</tr>
<tr>
<td>@tanstack&#x2F;react-query</td>
<td>react 异步状态管理库</td>
</tr>
<tr>
<td>@react-spring&#x2F;web</td>
<td>react 的动画库</td>
</tr>
<tr>
<td>react-top-loading-bar</td>
<td>顶部加载条</td>
</tr>
<tr>
<td>react-image-cropper</td>
<td>图片裁剪库</td>
</tr>
<tr>
<td>react-hot-toast</td>
<td>消息提示组件</td>
</tr>
<tr>
<td>react.qrcode</td>
<td>二维码生成</td>
</tr>
<tr>
<td>tldraw</td>
<td>画板库</td>
</tr>
<tr>
<td>@blocknote&#x2F;core</td>
<td>类似 notion 的富文本库</td>
</tr>
<tr>
<td>react-error-boundary</td>
<td>错误捕获</td>
</tr>
<tr>
<td>react-confetti</td>
<td>庆祝的烟花纸屑动画</td>
</tr>
<tr>
<td>react-lazy-load-image-component</td>
<td>图片懒加载库</td>
</tr>
<tr>
<td>react-window-infinite-loader</td>
<td>加载更多库</td>
</tr>
<tr>
<td>react-window</td>
<td>虚拟滚动库</td>
</tr>
<tr>
<td>lucide-react</td>
<td>lucide 图表库的 react 实现</td>
</tr>
<tr>
<td>formik</td>
<td>小巧的表单处理库</td>
</tr>
</tbody></table>
<h2 id="ReactNative"><a href="#ReactNative" class="headerlink" title="ReactNative"></a>ReactNative</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>react-navigation</td>
<td>导航条</td>
</tr>
<tr>
<td>react-native-looped-carousel</td>
<td>轮播图</td>
</tr>
<tr>
<td>react-native-refresh-list-view</td>
<td>上拉加载和下拉刷新</td>
</tr>
</tbody></table>
<h2 id="Next-js-类"><a href="#Next-js-类" class="headerlink" title="Next.js 类"></a>Next.js 类</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>next-intl</td>
<td>国际化库</td>
</tr>
<tr>
<td>server-only</td>
<td>防止服务端组件, 在客户端渲染</td>
</tr>
<tr>
<td>next-auth</td>
<td>集成常用的授权应用</td>
</tr>
<tr>
<td>next-sitemap</td>
<td>SEO 优化, 方便 google 检索你的网站</td>
</tr>
<tr>
<td>next-seo</td>
<td>SEO 优化, 生成一些常见的 metadata</td>
</tr>
<tr>
<td>next-pwa</td>
<td>快速创建离线应用</td>
</tr>
</tbody></table>
<h3 id="Next-js-最佳实践框架"><a href="#Next-js-最佳实践框架" class="headerlink" title="Next.js 最佳实践框架"></a>Next.js 最佳实践框架</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>t3-app@latest</td>
<td>ts 一个推崇类型安全的 next 实践框架</td>
</tr>
</tbody></table>
<h2 id="UI-库"><a href="#UI-库" class="headerlink" title="UI 库"></a>UI 库</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@mui&#x2F;material</td>
<td>mui 谷歌风格的 material 组件库</td>
</tr>
<tr>
<td>@mui&#x2F;joy</td>
<td>mui 自己设计的组件库</td>
</tr>
<tr>
<td>Mantine</td>
<td>Mantine UI 库</td>
</tr>
<tr>
<td>shadcn&#x2F;ui</td>
<td>使用 tailwindcss 编写, 本地组件</td>
</tr>
</tbody></table>
<h2 id="Vue-类"><a href="#Vue-类" class="headerlink" title="Vue 类"></a>Vue 类</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>vue</td>
<td>vue 核心</td>
</tr>
<tr>
<td>@vue&#x2F;compiler-sfc</td>
<td>单文件编译器</td>
</tr>
</tbody></table>
<h3 id="工具-2"><a href="#工具-2" class="headerlink" title="工具"></a>工具</h3><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>vuedraggable</td>
<td>vue的拖拽库</td>
</tr>
<tr>
<td>vue-clipboard3</td>
<td>剪切板</td>
</tr>
<tr>
<td>vuex-persist</td>
<td>vuex持久化数据</td>
</tr>
<tr>
<td>vue-reuse-template</td>
<td>组件内重用部分模板 - 安法师 (非组件)</td>
</tr>
<tr>
<td>unplugin-vue-macros</td>
<td>组件内重用部分模板</td>
</tr>
<tr>
<td>@tanstack&#x2F;vue-query</td>
<td>对标 react-query 的异步状态管理库</td>
</tr>
</tbody></table>
<h2 id="环境类"><a href="#环境类" class="headerlink" title="环境类"></a>环境类</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>typescript</td>
<td>ts 环境</td>
</tr>
<tr>
<td>zx</td>
<td>用js编写bash脚本</td>
</tr>
</tbody></table>
<h2 id="构建优化"><a href="#构建优化" class="headerlink" title="构建优化"></a>构建优化</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>@million&#x2F;compiler</td>
<td>自动优化构建的代码, vite 支持</td>
</tr>
</tbody></table>
<h1 id="Mock-服务"><a href="#Mock-服务" class="headerlink" title="Mock 服务"></a>Mock 服务</h1><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>msw</td>
<td>比较新颖的 mock 服务</td>
</tr>
</tbody></table>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="基础库"><a href="#基础库" class="headerlink" title="基础库"></a>基础库</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>flush-promises</td>
<td>将所有 promise 状态都改为完成</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="E2E"><a href="#E2E" class="headerlink" title="E2E"></a>E2E</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nightwatch</td>
<td>基于 webdriver.js 的测试框架</td>
</tr>
<tr>
<td>cypress</td>
<td>高度内聚的集成测试框架</td>
</tr>
<tr>
<td>testcafe</td>
<td>傻瓜智能的测试框架</td>
</tr>
</tbody></table>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>supertest</td>
<td>测试 http 的库</td>
</tr>
</tbody></table>
<h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>weapp-tailwindcss</td>
<td>小程序支持 tailwindcss</td>
</tr>
</tbody></table>
<h1 id="全栈框架"><a href="#全栈框架" class="headerlink" title="全栈框架"></a>全栈框架</h1><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>TanStack Start</td>
<td>tanstack 的全栈框架, 目前是 beta 版本</td>
</tr>
<tr>
<td>Nextjs</td>
<td>react技术栈</td>
</tr>
<tr>
<td>Nuxtjs</td>
<td>vue技术栈</td>
</tr>
<tr>
<td>Astro</td>
<td>领先的分岛框架</td>
</tr>
</tbody></table>
<h1 id="文档构建"><a href="#文档构建" class="headerlink" title="文档构建"></a>文档构建</h1><table>
<thead>
<tr>
<th>包名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>docusaurus</td>
<td>国外比较流行的 md 文档网站构建</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>免费数据库</title>
    <url>/2025/01/12/summary/%E5%85%8D%E8%B4%B9%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://remotemysql.com/">remotemysql</a></p>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>内网映射</title>
    <url>/2024/09/06/summary/%E5%86%85%E7%BD%91%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<h2 id="Ngrok"><a href="#Ngrok" class="headerlink" title="Ngrok"></a>Ngrok</h2><p><a href="https://ngrok.com/">https://ngrok.com/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./ngrok authtoken token密钥</span><br><span class="line">./ngrok http 端口</span><br></pre></td></tr></table></figure>

<h2 id="Sunny-Ngrok"><a href="#Sunny-Ngrok" class="headerlink" title="Sunny-Ngrok"></a>Sunny-Ngrok</h2><p><a href="https://www.ngrok.cc/">https://www.ngrok.cc/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sunny clientid 隧道<span class="built_in">id</span></span><br></pre></td></tr></table></figure>

<h2 id="Ngrok私服"><a href="#Ngrok私服" class="headerlink" title="Ngrok私服"></a>Ngrok私服</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install build-essential golang mercurial git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/tutumcloud/ngrok.git ngrok</span><br></pre></td></tr></table></figure>

<ol>
<li>服务端编译</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ngrok</span><br><span class="line">NGROK_DOMAIN=<span class="string">&quot;ngrok.avan.com&quot;</span></span><br><span class="line">openssl genrsa -out base.key 2048</span><br><span class="line">openssl req -new -x509 -nodes -key base.key -days 10000 -subj <span class="string">&quot;/CN=<span class="variable">$NGROK_DOMAIN</span>&quot;</span> -out base.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj <span class="string">&quot;/CN=<span class="variable">$NGROK_DOMAIN</span>&quot;</span> -out server.csr</span><br><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -CA base.pem -CAkey base.key -CAcreateserial -days 10000 -out server.cr</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>启动服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /root/ngrok</span></span><br><span class="line">bin/ngrokd -tlsKey=server.key -tlsCrt=server.cr -domain=<span class="string">&quot;ngrok.avan.com&quot;</span> -httpAddr=<span class="string">&quot;:8000&quot;</span> -httpsAddr=<span class="string">&quot;:8443&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>客户端编译</li>
</ol>
<p>Windows</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOOS=windows GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure>

<p>Mac</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GOOS=darwin GOARCH=amd64 make release-client</span><br></pre></td></tr></table></figure>

<p>执⾏对应的命令会在bin⽬录下⽣成相对应的windows、mac⽬录，ngrok.exe就存放在对应⽬录下。将对应的ngrok.exe下载到本地。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start.sh</span></span><br><span class="line">./ngrok -config=ngrok.cfg -<span class="built_in">log</span>=ngrok.log -subdomain=weixin 3000</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ngrok.cfg</span></span><br><span class="line">server_addr: <span class="string">&quot;ngrok.avan.com:4443&quot;</span></span><br><span class="line">trust_host_root_certs: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>nginx反向代理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/sites-enabled/ngrok</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name *.ngrok.avan.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8000;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_host</span>:8000;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_connect_timeout 1;</span><br><span class="line">    proxy_send_timeout 120;</span><br><span class="line">    proxy_read_timeout 120;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>启动服务</li>
</ol>
<p>配置ngrok服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/etc/systemd/system/ngrok.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=ngrok</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/root/ngrok/bin/ngrokd -tlsKey=server.key -tlsCrt=server.cr -</span><br><span class="line">domain=<span class="string">&quot;ngrok.josephxia.com&quot;</span> -httpAddr=<span class="string">&quot;:8000&quot;</span> -httpsAddr=<span class="string">&quot;:8443&quot;</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// ⼜⼀次载⼊ systemd，扫描新的或有变动的单元</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">// 启动ngrok</span><br><span class="line">systemctl start ngrok</span><br></pre></td></tr></table></figure>

<h2 id="Sidoc"><a href="#Sidoc" class="headerlink" title="Sidoc"></a>Sidoc</h2><p><a href="https://www.sidoc.cn/frp.html">https://www.sidoc.cn/frp.html</a></p>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>内网映射</tag>
      </tags>
  </entry>
  <entry>
    <title>在内网环境安装 PaddleSpeech 语音合成服务</title>
    <url>/2024/07/28/summary/%E5%9C%A8%E5%86%85%E7%BD%91%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%20PaddleSpeech%20%E8%AF%AD%E9%9F%B3%E5%90%88%E6%88%90%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="简单方式安装（失败）"><a href="#简单方式安装（失败）" class="headerlink" title="简单方式安装（失败）"></a>简单方式安装（失败）</h2><p>sudo apt install build-essential</p>
<p>sudo apt install python3-pip</p>
<p>pip install pytest-runner -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a></p>
<p>pip install paddlespeech -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a> </p>
<h2 id="docker安装（不支持M1）"><a href="#docker安装（不支持M1）" class="headerlink" title="docker安装（不支持M1）"></a>docker安装（不支持M1）</h2><p>docker run –name dev -v $PWD:&#x2F;mnt -p 8888:8888 -it paddlecloud&#x2F;paddlespeech:develop-cpu-fb4d25  &#x2F;bin&#x2F;bash</p>
<h2 id="root权限的Ubuntu安装（失败）"><a href="#root权限的Ubuntu安装（失败）" class="headerlink" title="root权限的Ubuntu安装（失败）"></a>root权限的Ubuntu安装（失败）</h2><p>查看你的系统架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure>

<blockquote>
<p>aarch64</p>
</blockquote>
<p>安装 Conda</p>
<p><strong>aarch64</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-aarch64.sh -P tools/</span><br><span class="line"></span><br><span class="line">bash ./tools/Miniconda3-latest-Linux-aarch64.sh -b</span><br><span class="line"></span><br><span class="line"><span class="variable">$HOME</span>/miniconda3/bin/conda init</span><br><span class="line"></span><br><span class="line">bash</span><br><span class="line"></span><br><span class="line">conda create -y -p tools/venv python=3.7</span><br><span class="line"></span><br><span class="line">conda activate tools/venv</span><br><span class="line"></span><br><span class="line">conda install -y -c conda-forge sox libsndfile swig bzip2 libflac bc</span><br><span class="line"></span><br><span class="line">pip install pytest-runner -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br><span class="line"></span><br><span class="line">pip install -e .[develop] -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>

<p><strong>x86_64</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -P tools/</span><br></pre></td></tr></table></figure>

<h2 id="Mac-M1安装"><a href="#Mac-M1安装" class="headerlink" title="Mac M1安装"></a>Mac M1安装</h2><p><a href="https://docs.conda.io/en/latest/miniconda.html">下载 conda 的 sh 文件</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash 你下载的sh文件</span><br><span class="line"></span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line">conda install -y -c conda-forge sox libsndfile bzip2</span><br><span class="line"></span><br><span class="line">brew install gcc</span><br><span class="line"></span><br><span class="line">pip install pytest-runner -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br><span class="line"></span><br><span class="line">pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br><span class="line"></span><br><span class="line">pip install paddlespeech -i https://pypi.tuna.tsinghua.edu.cn/simple </span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过 conda 创建虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 創建一個可以安裝intel包的名為ppocr_rosetta的虛擬環境</span></span><br><span class="line">CONDA_SUBDIR=osx-64 conda create -n ppocr_rosetta python=3.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活該環境</span></span><br><span class="line">conda activate ppocr_rosetta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 驗證該環境支持平台</span></span><br><span class="line">python -c <span class="string">&quot;import platform;print(platform.machine())&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 確保該環境為創建的包為intel架構所用</span></span><br><span class="line">conda <span class="built_in">env</span> config vars <span class="built_in">set</span> CONDA_SUBDIR=osx-64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出該環境</span></span><br><span class="line">conda deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新激活該環境</span></span><br><span class="line">conda activate ppocr_rosetta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看環境變量，確定是osx-64,支持intel包</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CONDA_SUBDIR: <span class="variable">$CONDA_SUBDIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝paddlepaddle包</span></span><br><span class="line">python -m pip install paddlepaddle -i https://mirror.baidu.com/pypi/simple</span><br></pre></td></tr></table></figure>

<p>进入 python 验证环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import paddle</span><br><span class="line">&gt;&gt;&gt; paddle.utils.run_check()</span><br><span class="line">Running verify PaddlePaddle program ... </span><br><span class="line">PaddlePaddle works well on 1 CPU.</span><br><span class="line">W0904 23:21:10.721201 9092608 fuse_all_reduce_op_pass.cc:76] Find all_reduce operators: 2. To make the speed faster, some all_reduce ops are fused during training, after fusion, the number of all_reduce ops is 2.</span><br><span class="line">PaddlePaddle works well on 2 CPUs.</span><br><span class="line">PaddlePaddle is installed successfully! Let<span class="string">&#x27;s start deep learning with PaddlePaddle now.</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果 import 报错，运行下面命令降级<br>pip install protobuf&#x3D;&#x3D;3.20.1</p>
</blockquote>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>paddle-speech</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目仓库推荐</title>
    <url>/2024/01/28/summary/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%BB%93%E5%BA%93%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="Plane"><a href="#Plane" class="headerlink" title="Plane"></a>Plane</h1><p><a href="https://github.com/makeplane/plane">https://github.com/makeplane/plane</a></p>
<p>开源的项目管理站点, 管理项目进度工作安排等.</p>
<h1 id="Formbricks"><a href="#Formbricks" class="headerlink" title="Formbricks"></a>Formbricks</h1><p><a href="https://github.com/formbricks/formbricks?tab=readme-ov-file">https://github.com/formbricks/formbricks?tab=readme-ov-file</a></p>
<p>信息收集组件, 通过右下角弹出一个步进式表单, 收集信息.</p>
<h1 id="Twenty"><a href="#Twenty" class="headerlink" title="Twenty"></a>Twenty</h1><p><a href="https://github.com/twentyhq/twenty">https://github.com/twentyhq/twenty</a></p>
<p>客户关系管理系统</p>
<h1 id="Tailwind-Nextjs-Starter-Blog"><a href="#Tailwind-Nextjs-Starter-Blog" class="headerlink" title="Tailwind Nextjs Starter Blog"></a>Tailwind Nextjs Starter Blog</h1><p><a href="https://github.com/timlrx/tailwind-nextjs-starter-blog">https://github.com/timlrx/tailwind-nextjs-starter-blog</a></p>
<p>nextjs 的快速博客模板</p>
<h1 id="Next-Forge"><a href="#Next-Forge" class="headerlink" title="Next Forge"></a>Next Forge</h1><p><a href="https://github.com/haydenbleasel/next-forge">https://github.com/haydenbleasel/next-forge</a></p>
<p>应用级的 Nextjs 模板</p>
<h1 id="Next-Shadcn-Dashboard-Starter"><a href="#Next-Shadcn-Dashboard-Starter" class="headerlink" title="Next Shadcn Dashboard Starter"></a>Next Shadcn Dashboard Starter</h1><p><a href="https://github.com/Kiranism/next-shadcn-dashboard-starter">https://github.com/Kiranism/next-shadcn-dashboard-starter</a></p>
<p>next 的后台管理模板</p>
<h1 id="Platforms"><a href="#Platforms" class="headerlink" title="Platforms"></a>Platforms</h1><p><a href="https://github.com/vercel/platforms">https://github.com/vercel/platforms</a></p>
<p>nextjs 的多租户网站, 支持子域名创建, 及文章发布</p>
<h1 id="Chadnext"><a href="#Chadnext" class="headerlink" title="Chadnext"></a>Chadnext</h1><p><a href="https://github.com/moinulmoin/chadnext">https://github.com/moinulmoin/chadnext</a></p>
<p>nextjs 的快速模板</p>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>播放 rtsp 视频</title>
    <url>/2024/05/12/summary/%E6%92%AD%E6%94%BE%20rtsp%20%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<h1 id="1-处理-创建-rtsp-流"><a href="#1-处理-创建-rtsp-流" class="headerlink" title="1. 处理&#x2F;创建 rtsp 流"></a>1. 处理&#x2F;创建 rtsp 流</h1><h2 id="rtsp-推-拉流中转服务"><a href="#rtsp-推-拉流中转服务" class="headerlink" title="rtsp 推&#x2F;拉流中转服务"></a>rtsp 推&#x2F;拉流中转服务</h2><h3 id="EasyDarwin-windows-版"><a href="#EasyDarwin-windows-版" class="headerlink" title="EasyDarwin - windows 版"></a>EasyDarwin - windows 版</h3><p><a href="https://github.com/EasyDarwin/EasyDarwin/releases">下载 EasyDarwin</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd EasyDarwin</span><br><span class="line">./easydarwin</span><br></pre></td></tr></table></figure>

<p>后台管理页面, 可以查看相关推流情况. <a href="http://localhost:10008/">http://localhost:10008</a> 默认用户&#x2F;密码(admin&#x2F;admin)</p>
<h3 id="mediamtx"><a href="#mediamtx" class="headerlink" title="mediamtx"></a>mediamtx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -it -e MTX_PROTOCOLS=tcp -p 9554:8554 -p 1935:1935 -p 8888:8888 -p 8889:8889 -p 8890:8890/udp bluenviron/mediamtx</span><br></pre></td></tr></table></figure>

<p>往 9554 端口推即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rtsp://localhost:9554/&#123;streamName&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过-ffmpeg-进行本地推流至-rtsp-推流服务"><a href="#通过-ffmpeg-进行本地推流至-rtsp-推流服务" class="headerlink" title="通过 ffmpeg 进行本地推流至 rtsp 推流服务"></a>通过 ffmpeg 进行本地推流至 rtsp 推流服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i 推送的视频 -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://&#123;easydarwin服务的ip&#125;/&#123;通道名&#125;</span><br></pre></td></tr></table></figure>

<p>例如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ffmpeg -re -i /Users/4van/Downloads/test.mp4 -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://localhost/test1</span><br></pre></td></tr></table></figure>
<h2 id="测试播放"><a href="#测试播放" class="headerlink" title="测试播放"></a>测试播放</h2><p><a href="https://www.videolan.org/vlc/">下载 VLC</a><br>打开 Network<br>访问: rtsp:&#x2F;&#x2F;10.211.55.4&#x2F;test1</p>
<h1 id="2-rtsp-处理服务"><a href="#2-rtsp-处理服务" class="headerlink" title="2. rtsp 处理服务"></a>2. rtsp 处理服务</h1><h2 id="rtsptoweb-播放太卡"><a href="#rtsptoweb-播放太卡" class="headerlink" title="rtsptoweb - 播放太卡"></a>rtsptoweb - 播放太卡</h2><ul>
<li>支持 rtsp 转 hls&#x2F;hlsll&#x2F;mse&#x2F;webrtc 等格式</li>
<li>提供相应 api 创建&#x2F;删除流</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --<span class="built_in">rm</span> -p 8083:8083 -p 5541:5541 ghcr.io/deepch/rtsptoweb:v2.4.3</span><br></pre></td></tr></table></figure>

<p>后台页面 <a href="http://localhost:8083/">http://localhost:8083</a></p>
<h2 id="rtsp-stream-仅支持-hls"><a href="#rtsp-stream-仅支持-hls" class="headerlink" title="rtsp-stream - 仅支持 hls"></a>rtsp-stream - 仅支持 hls</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 -p 8080:8080 roverr/rtsp-stream:2-management</span><br></pre></td></tr></table></figure>

<p>查看所有流 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --location --request GET &#x27;http://localhost:8080/list&#x27;</span><br></pre></td></tr></table></figure>

<p>添加流</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --location --request POST &#x27;http://localhost:8080/start&#x27; --header &#x27;Content-Type: application/json&#x27; --data-raw &#x27;&#123; &quot;uri&quot;: &quot;rtsp://10.211.55.4/test1&quot; &#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>删除流</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --location --request POST &#x27;http://localhost:8080/stop&#x27; --header &#x27;Content-Type: application/json&#x27; --data-raw &#x27;&#123; &quot;id&quot;: &quot;4f081bf2-ed1d-4881-8ff9-32f6e5532bc9&quot;, &quot;remove&quot;: true &#125;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="rtsp2web-仅支持-flv"><a href="#rtsp2web-仅支持-flv" class="headerlink" title="rtsp2web - 仅支持 flv"></a>rtsp2web - 仅支持 flv</h2><p>原仓库 (有水印): <a href="https://github.com/Neveryu/rtsp2web">https://github.com/Neveryu/rtsp2web</a><br>二次封装: <a href="https://github.com/Layouwen/code-example/tree/main/demos/rtsp-to-h264-flv-service">https://github.com/Layouwen/code-example/tree/main/demos/rtsp-to-h264-flv-service</a></p>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t rtsp-to-h264-flv-service:1.0.0 .</span><br><span class="line">docker run --rm -p 9999:4384 -e AUDIO=true rtsp-to-h264-flv-service:1.0.0</span><br></pre></td></tr></table></figure>

<p>前端直接传 rtsp 地址进行播放</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Jsmpeg</span>: <span class="variable constant_">FC</span>&lt;&#123; <span class="attr">baseUrl</span>: <span class="built_in">string</span>; <span class="attr">rtsp</span>: <span class="built_in">string</span> &#125;&gt; = <span class="function">(<span class="params">&#123; baseUrl, rtsp &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> videoPlayerRef = useRef&lt;<span class="built_in">any</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onPlay</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">VideoPlayer</span> = (<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">JSMpeg</span></span><br><span class="line"></span><br><span class="line">    videoPlayerRef.<span class="property">current</span> = <span class="keyword">new</span> <span class="title class_">VideoPlayer</span>.<span class="title class_">Player</span>(</span><br><span class="line">      <span class="string">`ws://localhost:9999/rtsp?url=`</span> +</span><br><span class="line">      <span class="title function_">btoa</span>(rtsp) + <span class="string">&#x27;&amp;brightness=0.2&amp;saturation=1.8&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">canvas</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;video-player&#x27;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onPlay&#125;</span>&gt;</span>播放<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;video-player&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="zlmediakit"><a href="#zlmediakit" class="headerlink" title="zlmediakit"></a>zlmediakit</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --rm -p 2935:1935 -p 8080:80 -p 8443:443 -p 8554:554 -p 10000:10000 -p 10000:10000/udp -p 8000:8000/udp -p 9000:9000/udp zlmediakit/zlmediakit:master</span><br></pre></td></tr></table></figure>

<p>示例 url:</p>
<ul>
<li><a href="http://127.0.0.1:8080/live/test1.live.flv?vhost=192.168.10.11">http://127.0.0.1:8080/live/test1.live.flv?vhost=192.168.10.11</a></li>
<li>ws:&#x2F;&#x2F;127.0.0.1:8080&#x2F;live&#x2F;test1.live.flv?vhost&#x3D;192.168.10.11</li>
<li><a href="https://tdev1.locnavi.com/live/test1.live.flv?vhost=192.168.10.11">https://tdev1.locnavi.com/live/test1.live.flv?vhost=192.168.10.11</a></li>
</ul>
<h1 id="3-相关资料"><a href="#3-相关资料" class="headerlink" title="3. 相关资料"></a>3. 相关资料</h1><p>rtsp h.264 to h.265</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &#123;rtsp转换前地址&#125; -c:v libx265 -c:a copy -f rtsp &#123;rtsp转换后地址&#125;</span><br></pre></td></tr></table></figure>

<p>mp4 to rtsp h264</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &#123;视频文件&#125; -c:v libx264 -c:a copy -f rtsp &#123;rtsp转换后地址&#125;</span><br></pre></td></tr></table></figure>

<p>mp4 to rtsp h265</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i &#123;视频文件&#125; -c:v libx265 -c:a copy -f rtsp &#123;rtsp转换后地址&#125;</span><br></pre></td></tr></table></figure>

<p>hls 测试地址</p>
<p><a href="https://bitdash-a.akamaihd.net/content/sintel/hls/playlist.m3u8">https:&#x2F;bitdash-a.akamaihd.net&#x2F;content&#x2F;sintel&#x2F;hls&#x2F;playlist.m3u8</a></p>
<h1 id="4-其他库"><a href="#4-其他库" class="headerlink" title="4. 其他库"></a>4. 其他库</h1><h2 id="播放器"><a href="#播放器" class="headerlink" title="播放器"></a>播放器</h2><ul>
<li>h265<ul>
<li><a href="https://github.com/numberwolf/h265web.js">https://github.com/numberwolf/h265web.js</a></li>
<li><a href="https://github.com/langhuihui/jessibuca">https://github.com/langhuihui/jessibuca</a></li>
</ul>
</li>
<li>hls 播放库<ul>
<li><a href="https://github.com/foxford/react-hls">https://github.com/foxford/react-hls</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>rtsp</tag>
      </tags>
  </entry>
  <entry>
    <title>服务托管平台推荐</title>
    <url>/2024/02/08/summary/%E6%9C%8D%E5%8A%A1%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<ul>
<li><a href="https://www.netlify.com/">Netlify</a></li>
<li><a href="https://vercel.com/">Vercel</a></li>
<li><a href="https://pages.github.com/">github pages</a></li>
<li><a href="https://cloud.google.com/compute">Google Compute Engine</a></li>
<li><a href="https://cloud.google.com/functions">Google Cloud Functions</a></li>
<li><a href="https://workers.cloudflare.com/">Cloudflare Workers</a></li>
<li><a href="https://aws.amazon.com/lambda/">AWS Lambda</a></li>
<li><a href="https://planetscale.com/">PlanetScale</a></li>
<li><a href="https://supabase.com/">Supabase</a></li>
<li><a href="https://www.sanity.io/">Sanity.io</a></li>
<li><a href="https://appwrite.io/">Appwrite</a></li>
<li><a href="https://cyclic.sh/">Cyclic.sh</a></li>
<li><a href="https://deta.sh/">Deta.sh</a></li>
<li><a href="https://fly.io/">Fly.io</a></li>
<li><a href="https://glitch.com/">Glitch</a></li>
<li><a href="https://render.com/">Render.com</a></li>
<li><a href="https://stormkit.io/">Stormkit.io</a></li>
<li><a href="https://railway.app/">Railway.app</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>部署</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/2025/02/26/summary/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h1 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h1><h2 id="Browser-Extension"><a href="#Browser-Extension" class="headerlink" title="Browser Extension"></a>Browser Extension</h2><h3 id="1password"><a href="#1password" class="headerlink" title="1password"></a>1password</h3><h3 id="AdGuard-AdBlocker"><a href="#AdGuard-AdBlocker" class="headerlink" title="AdGuard AdBlocker"></a>AdGuard AdBlocker</h3><h3 id="AI-Subtitles-Immersive-Translate-Trancy"><a href="#AI-Subtitles-Immersive-Translate-Trancy" class="headerlink" title="AI Subtitles &amp; Immersive Translate - Trancy"></a>AI Subtitles &amp; Immersive Translate - Trancy</h3><p>下载地址: <a href="https://www.trancy.org/zh-cn">https://www.trancy.org/zh-cn</a></p>
<p>功能:</p>
<ul>
<li>沉浸式翻译</li>
<li>YouTube &#x2F; Netflix 双语字幕</li>
<li>单词跟踪学习</li>
</ul>
<p><img src="http://obsidian.easyhappy.top/avan/202308091120980.png"></p>
<h3 id="Ajax-Modifier"><a href="#Ajax-Modifier" class="headerlink" title="Ajax Modifier"></a>Ajax Modifier</h3><h3 id="Dark-Reader"><a href="#Dark-Reader" class="headerlink" title="Dark Reader"></a>Dark Reader</h3><p>下载地址: <a href="https://darkreader.org/https://darkreader.org/">https://darkreader.org/https://darkreader.org/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091112178.png"></p>
<h3 id="Eightify-AI-YouTube-Summarizer"><a href="#Eightify-AI-YouTube-Summarizer" class="headerlink" title="Eightify: AI YouTube Summarizer"></a>Eightify: AI YouTube Summarizer</h3><p>下载地址: <a href="https://eightify.app/">https://eightify.app/</a></p>
<p>介绍: 总结 youtube 的视频内容</p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091133360.png"></p>
<h3 id="Fonts-Ninja"><a href="#Fonts-Ninja" class="headerlink" title="Fonts Ninja"></a>Fonts Ninja</h3><h3 id="GoFullPage-Full-Page-Screen-Capture"><a href="#GoFullPage-Full-Page-Screen-Capture" class="headerlink" title="GoFullPage - Full Page Screen Capture"></a>GoFullPage - Full Page Screen Capture</h3><h3 id="Grammarly-AI-Writing-and-Grammar-Checker-App"><a href="#Grammarly-AI-Writing-and-Grammar-Checker-App" class="headerlink" title="Grammarly: AI Writing and Grammar Checker App"></a>Grammarly: AI Writing and Grammar Checker App</h3><h3 id="Image-Downloader"><a href="#Image-Downloader" class="headerlink" title="Image Downloader"></a>Image Downloader</h3><p><img src="http://obsidian.easyhappy.top/avan/202409251000844.png" alt="image.png"></p>
<h3 id="Immersive-Translate-Translate-Web-PDF"><a href="#Immersive-Translate-Translate-Web-PDF" class="headerlink" title="Immersive Translate - Translate Web &amp; PDF"></a>Immersive Translate - Translate Web &amp; PDF</h3><p>下载地址: <a href="https://immersivetranslate.com/">https://immersivetranslate.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091107349.png"></p>
<h3 id="JSON-Viewer"><a href="#JSON-Viewer" class="headerlink" title="JSON Viewer"></a>JSON Viewer</h3><h3 id="Live-Stream-Dwonloader"><a href="#Live-Stream-Dwonloader" class="headerlink" title="Live Stream Dwonloader"></a>Live Stream Dwonloader</h3><p>下载地址: <a href="https://webextension.org/listing/hls-downloader.html">https://webextension.org/listing/hls-downloader.html</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091110711.png"></p>
<h3 id="Merlin-Ask-AI-to-Research-Write-Review"><a href="#Merlin-Ask-AI-to-Research-Write-Review" class="headerlink" title="Merlin - Ask AI to Research, Write &amp; Review"></a>Merlin - Ask AI to Research, Write &amp; Review</h3><p>下载地址: <a href="https://merlin.foyer.work/zh-CN/">https://merlin.foyer.work/zh-CN/</a></p>
<p>介绍:<br>网页插件版本的快捷 chatgpt 聊天</p>
<p>功能:</p>
<ul>
<li>支持自定义 apikey</li>
<li>总结网页</li>
<li>总结 YouTube</li>
<li>总结 gmail 邮件</li>
<li>协助 linked 和 twitter 快捷回复</li>
</ul>
<p><img src="http://obsidian.easyhappy.top/avan/202308091048322.png"></p>
<h3 id="Perplexity-AI-Companion"><a href="#Perplexity-AI-Companion" class="headerlink" title="Perplexity - AI Companion"></a>Perplexity - AI Companion</h3><h3 id="Proxy-SwitchyOmega"><a href="#Proxy-SwitchyOmega" class="headerlink" title="Proxy SwitchyOmega"></a>Proxy SwitchyOmega</h3><h3 id="React-Developer-Tools"><a href="#React-Developer-Tools" class="headerlink" title="React Developer Tools"></a>React Developer Tools</h3><h3 id="Relingo-Master-Words-Bilingual-Subtitles-Immersive-Translate-Free"><a href="#Relingo-Master-Words-Bilingual-Subtitles-Immersive-Translate-Free" class="headerlink" title="Relingo - Master Words | Bilingual Subtitles | Immersive Translate | Free"></a>Relingo - Master Words | Bilingual Subtitles | Immersive Translate | Free</h3><p>下载地址: <a href="https://relingo.net/en/index">https://relingo.net/en/index</a></p>
<p>功能:</p>
<ul>
<li>生词标注</li>
<li>快捷翻译</li>
<li>视频字慕</li>
</ul>
<p><img src="http://obsidian.easyhappy.top/avan/202308091030727.png"></p>
<h3 id="SteamDB"><a href="#SteamDB" class="headerlink" title="SteamDB"></a>SteamDB</h3><h3 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h3><h3 id="Tweet-Hunter-X-Sidebar-for-Twitter"><a href="#Tweet-Hunter-X-Sidebar-for-Twitter" class="headerlink" title="Tweet Hunter X: Sidebar for Twitter"></a>Tweet Hunter X: Sidebar for Twitter</h3><h3 id="X-Twitter-Video-Downloader"><a href="#X-Twitter-Video-Downloader" class="headerlink" title="X (Twitter) Video Downloader"></a>X (Twitter) Video Downloader</h3><h3 id="Vimium-C-All-by-Keyboard"><a href="#Vimium-C-All-by-Keyboard" class="headerlink" title="Vimium C - All by Keyboard"></a>Vimium C - All by Keyboard</h3><h3 id="Vue-js-devtools"><a href="#Vue-js-devtools" class="headerlink" title="Vue.js devtools"></a>Vue.js devtools</h3><h3 id="Wappalyzer-Technology-profiler"><a href="#Wappalyzer-Technology-profiler" class="headerlink" title="Wappalyzer - Technology profiler"></a>Wappalyzer - Technology profiler</h3><p>下载地址: <a href="https://www.wappalyzer.com/">https://www.wappalyzer.com</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091032339.png"></p>
<h3 id="XSwitch"><a href="#XSwitch" class="headerlink" title="XSwitch"></a>XSwitch</h3><h3 id="WuCai-Web-Highlighter"><a href="#WuCai-Web-Highlighter" class="headerlink" title="WuCai Web Highlighter"></a>WuCai Web Highlighter</h3><p>下载地址: <a href="https://www.dotalk.cn/">https://www.dotalk.cn/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202406211112948.png" alt="image.png"></p>
<h3 id="豆包-AI-助手"><a href="#豆包-AI-助手" class="headerlink" title="豆包 AI 助手"></a>豆包 AI 助手</h3><p>下载地址: <a href="https://www.doubao.com/browser-extension/landing">https://www.doubao.com/browser-extension/landing</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202407290859367.png" alt="image.png"></p>
<h3 id="Gimli-Tailwind"><a href="#Gimli-Tailwind" class="headerlink" title="Gimli Tailwind"></a>Gimli Tailwind</h3><h3 id="Hackertab"><a href="#Hackertab" class="headerlink" title="Hackertab"></a>Hackertab</h3><h3 id="Responsive-Viewer"><a href="#Responsive-Viewer" class="headerlink" title="Responsive Viewer"></a>Responsive Viewer</h3><h3 id="RSS-Feed-Reader"><a href="#RSS-Feed-Reader" class="headerlink" title="RSS Feed Reader"></a>RSS Feed Reader</h3><h3 id="Side-Space"><a href="#Side-Space" class="headerlink" title="Side Space"></a>Side Space</h3><h3 id="Video-Speed-Controller"><a href="#Video-Speed-Controller" class="headerlink" title="Video Speed Controller"></a>Video Speed Controller</h3><h3 id="WhatFont"><a href="#WhatFont" class="headerlink" title="WhatFont"></a>WhatFont</h3><h3 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h3><h4 id="MetaMask"><a href="#MetaMask" class="headerlink" title="MetaMask"></a>MetaMask</h4><h4 id="OKX-Wallet"><a href="#OKX-Wallet" class="headerlink" title="OKX Wallet"></a>OKX Wallet</h4><h3 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h3><h4 id="Separate-Window"><a href="#Separate-Window" class="headerlink" title="Separate Window"></a>Separate Window</h4><h4 id="Komodo-Screen-Recorder-SOP"><a href="#Komodo-Screen-Recorder-SOP" class="headerlink" title="Komodo Screen Recorder &amp; SOP"></a>Komodo Screen Recorder &amp; SOP</h4><p>自动录制相关操作</p>
<h4 id="Glitter-AI"><a href="#Glitter-AI" class="headerlink" title="Glitter AI"></a>Glitter AI</h4><p>自动录制相关操作</p>
<h4 id="Scribe-AI-Documentation-SOPs-Screenshots"><a href="#Scribe-AI-Documentation-SOPs-Screenshots" class="headerlink" title="Scribe: AI Documentation, SOPs &amp; Screenshots"></a>Scribe: AI Documentation, SOPs &amp; Screenshots</h4><p>自动录制相关操作</p>
<h4 id="Little-Rat"><a href="#Little-Rat" class="headerlink" title="Little Rat"></a>Little Rat</h4><p>监控浏览器其他插件的的请求调用并阻止调用</p>
<h4 id="Lingocloud-Web-Translation-Extension"><a href="#Lingocloud-Web-Translation-Extension" class="headerlink" title="Lingocloud - Web Translation Extension"></a>Lingocloud - Web Translation Extension</h4><h4 id="Bitwarden-Password-Manager"><a href="#Bitwarden-Password-Manager" class="headerlink" title="Bitwarden Password Manager"></a>Bitwarden Password Manager</h4><h4 id="FinalScout-ChatGPT-Driven-LikedIn-Emails"><a href="#FinalScout-ChatGPT-Driven-LikedIn-Emails" class="headerlink" title="FinalScout - ChatGPT-Driven LikedIn Emails"></a>FinalScout - ChatGPT-Driven LikedIn Emails</h4><p>下载地址: <a href="https://finalscout.com/">https://finalscout.com</a></p>
<p>介绍: 提取 linked 的有效邮箱, 通过 openai 编写邮件, 快捷发送 gmail</p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091141951.png"></p>
<h2 id="brew-和-scoop-直装"><a href="#brew-和-scoop-直装" class="headerlink" title="brew 和 scoop 直装"></a>brew 和 scoop 直装</h2><h3 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h3><p>下载地址: <a href="https://www.postman.com/">https://www.postman.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202306051508795.png"></p>
<h3 id="MQTTX"><a href="#MQTTX" class="headerlink" title="MQTTX"></a>MQTTX</h3><p>下载地址: <a href="https://mqttx.app/downloads">https://mqttx.app/downloads</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202306051504996.png"></p>
<h3 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h3><p>下载地址：<a href="https://www.snipaste.com/">https://www.snipaste.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1642990376361-df1fa78f-d34d-4535-8c50-963694f4b534.png?x-oss-process=image/resize,w_750,limit_0" alt="image"></p>
<h3 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h3><p>下载地址：<a href="https://www.sourcetreeapp.com/">https://www.sourcetreeapp.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1643089613150-bc6325a4-ff2c-4d1f-9510-ec0df0c8b8da.png?x-oss-process=image/resize,w_1349,limit_0" alt="image"></p>
<h3 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h3><p>下载地址：<a href="https://desktop.telegram.org/">https://desktop.telegram.org/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506301450139.png" alt="image.png"></p>
<h3 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h3><p>下载地址：<a href="https://im.qq.com/download">https://im.qq.com/download</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654748932151-ee9cd41f-dbf6-4568-937a-3008fbd2e486.png?x-oss-process=image/resize,w_1192,limit_0" alt="image"></p>
<h3 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h3><p>下载地址：<a href="https://weixin.qq.com/">https://weixin.qq.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654748996248-76aead28-3c19-4674-9716-2a7167a5c7ba.png" alt="image"></p>
<h3 id="Discord"><a href="#Discord" class="headerlink" title="Discord"></a>Discord</h3><p>下载地址：<a href="https://discord.com/">https://discord.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654749016789-c15a673c-fa4b-4a2a-a1f5-3339f8b602f7.png?x-oss-process=image/resize,w_1409,limit_0" alt="image"></p>
<h3 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h3><p>下载地址：<a href="https://obsidian.md/download">https://obsidian.md/download</a></p>
<p><img src="https://pica.zhimg.com/80/v2-397b2b47a75716e2ecd36a4299ec799e_1440w.png" alt="https:&#x2F;&#x2F;pica.zhimg.com&#x2F;80&#x2F;v2-397b2b47a75716e2ecd36a4299ec799e_1440w.png"></p>
<h3 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h3><p>下载地址：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656530058808-7940ded3-3486-42a3-b360-e592c72b695c.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Jetbrains全家桶"><a href="#Jetbrains全家桶" class="headerlink" title="Jetbrains全家桶"></a>Jetbrains全家桶</h3><p>下载地址：<a href="https://www.jetbrains.com.cn/en-us/toolbox-app/">https://www.jetbrains.com.cn/en-us/toolbox-app/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656530243681-5e68d1fe-c7a0-4191-8f2d-5623e1589329.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a>Apifox</h3><p>下载地址：<a href="https://www.apifox.cn/">https://www.apifox.cn/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656557564846-a971e29c-275e-4b82-9c21-9a7f8b3e89bd.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="SoapUI"><a href="#SoapUI" class="headerlink" title="SoapUI"></a>SoapUI</h3><p>下载地址：<a href="https://www.soapui.org/">https://www.soapui.org</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202302231448534.png"></p>
<h3 id="Firefox"><a href="#Firefox" class="headerlink" title="Firefox"></a>Firefox</h3><p><img src="http://obsidian.easyhappy.top/avan/20230603142844.png"></p>
<h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1601457600899-94a845ab-6799-4f18-92d0-c0a32cd3e6e7.png" alt="image"></p>
<h3 id="Picgo"><a href="#Picgo" class="headerlink" title="Picgo"></a>Picgo</h3><p>下载地址: <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/20230228214410.png"></p>
<h2 id="brew-直装"><a href="#brew-直装" class="headerlink" title="brew 直装"></a>brew 直装</h2><h3 id="Edge"><a href="#Edge" class="headerlink" title="Edge"></a>Edge</h3><p>下载地址：<a href="https://www.microsoft.com/en-us/edge">https://www.microsoft.com/en-us/edge</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1601457951454-0eeaada3-6bd9-4fa7-8189-c44302368631.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>下载地址：<a href="https://www.docker.com/">https://www.docker.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656530796303-64377299-f15d-4b0a-b1d5-5f8af02b08ce.png" alt="image"></p>
<h3 id="Podman"><a href="#Podman" class="headerlink" title="Podman"></a>Podman</h3><p>docker 的免费替代版</p>
<p>下载地址: <a href="https://podman.io/">https://podman.io/</a></p>
<p><img src="https://s2.loli.net/2025/07/24/VvwNK1AO3rQqJZG.png" alt="image.png"></p>
<h3 id="1Password"><a href="#1Password" class="headerlink" title="1Password"></a>1Password</h3><p>下载地址：<a href="https://1password.com/">https://1password.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1601458719846-91776dbe-1452-4c72-bcfb-f39f3ac3fea2.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="ToDesk"><a href="#ToDesk" class="headerlink" title="ToDesk"></a>ToDesk</h3><p>下载地址：<a href="https://www.todesk.com/">https://www.todesk.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654748810245-3799b34b-2d04-49d0-a32a-183ba06397f5.png?x-oss-process=image/resize,w_1385,limit_0" alt="image"></p>
<h3 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h3><p>下载地址：<a href="https://sunlogin.oray.com/">https://sunlogin.oray.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654748757675-4d078eda-ed59-4909-9b0c-81113998540c.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="企业微信"><a href="#企业微信" class="headerlink" title="企业微信"></a>企业微信</h3><p>下载地址：<a href="https://work.weixin.qq.com/#indexDownload">https://work.weixin.qq.com/#indexDownload</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656573945855-955cac30-f6b0-4382-a195-3d185031c64c.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="飞书"><a href="#飞书" class="headerlink" title="飞书"></a>飞书</h3><p>下载地址：<a href="https://www.feishu.cn/download">https://www.feishu.cn/download</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654748962679-9993c288-a3a5-4ef6-b24d-990429352af8.png" alt="image"></p>
<h3 id="坚果云"><a href="#坚果云" class="headerlink" title="坚果云"></a>坚果云</h3><p>下载地址：<a href="https://www.jianguoyun.com/s/downloads">https://www.jianguoyun.com/s/downloads</a></p>
<p><img src="https://pica.zhimg.com/80/v2-468332fed5fc1c3a79ee2ceee5428f6a_1440w.png" alt="image"></p>
<h3 id="百度网盘"><a href="#百度网盘" class="headerlink" title="百度网盘"></a>百度网盘</h3><p>下载地址：<a href="https://pan.baidu.com/download#pan">https://pan.baidu.com/download#pan</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656555212089-ccad789c-854b-4dbd-986b-8f34db888486.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="腾讯会议"><a href="#腾讯会议" class="headerlink" title="腾讯会议"></a>腾讯会议</h3><p>下载地址: <a href="https://meeting.tencent.com/download/">https://meeting.tencent.com/download/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081137740.png" alt="CleanShot 2024-08-08 at 11.37.12.png"></p>
<h3 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h3><p>下载地址：<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602307651556-69edac30-c6b3-4922-95dd-58e855d19bd1.png" alt="image"></p>
<h3 id="滴答清单"><a href="#滴答清单" class="headerlink" title="滴答清单"></a>滴答清单</h3><p>下载地址：<a href="https://dida365.com/">https://dida365.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1627008084808-b11f5e04-d141-452a-b941-df0d6865c99d.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h3><p>下载地址：<a href="https://music.163.com/">https://music.163.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1627539745899-443d29ca-be9c-48e4-b872-83c31b0a371f.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="MongoDB-Compass"><a href="#MongoDB-Compass" class="headerlink" title="MongoDB Compass"></a>MongoDB Compass</h3><p>下载地址: <a href="https://www.mongodb.com/products/tools/compass">https://www.mongodb.com/products/tools/compass</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081018540.png" alt="CleanShot 2024-08-08 at 10.18.42.png"></p>
<h3 id="JOSM"><a href="#JOSM" class="headerlink" title="JOSM"></a>JOSM</h3><p>下载地址: <a href="https://josm.openstreetmap.de/wiki/Download">https://josm.openstreetmap.de/wiki/Download</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081012104.png" alt="CleanShot 2024-08-08 at 10.12.47.png"></p>
<h3 id="HBuilderX"><a href="#HBuilderX" class="headerlink" title="HBuilderX"></a>HBuilderX</h3><p>下载地址: <a href="https://www.dcloud.io/hbuilderx.html">https://www.dcloud.io/hbuilderx.html</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081009974.png" alt="CleanShot 2024-08-08 at 10.09.39.png"></p>
<h3 id="JetBrains-Mono"><a href="#JetBrains-Mono" class="headerlink" title="JetBrains Mono"></a>JetBrains Mono</h3><p>下载地址：<a href="https://www.jetbrains.com/lp/mono/">https://www.jetbrains.com/lp/mono/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625153216897-b724e773-d113-4a16-839a-f79dd0ba6cd8.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h3><p>下载地址: <a href="https://www.sublimetext.com/">https://www.sublimetext.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202407300932611.png" alt="image.png"></p>
<h3 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h3><p><a href="https://www.dingtalk.com/">https://www.dingtalk.com</a></p>
<p><img src="http://obsidian.easyhappy.top/obsidian/202407122125473.png"></p>
<h3 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h3><p>下载地址: <a href="https://www.notion.so/product">官网</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202407301034111.png" alt="image.png"></p>
<h3 id="阿里云盘"><a href="#阿里云盘" class="headerlink" title="阿里云盘"></a>阿里云盘</h3><p>下载地址：<a href="https://www.aliyundrive.com/download">https://www.aliyundrive.com/download</a></p>
<p><img src="https://pic2.zhimg.com/80/v2-84652b0871e75e6c5f5e049f69ddfd01_720w.png" alt="image"></p>
<h3 id="迅雷"><a href="#迅雷" class="headerlink" title="迅雷"></a>迅雷</h3><p>下载地址：<a href="https://www.xunlei.com/">https://www.xunlei.com</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656525594451-d2f7ccb2-f1ae-4d4a-a0ee-8d70a7499dbc.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h2 id="scoop-直装"><a href="#scoop-直装" class="headerlink" title="scoop 直装"></a>scoop 直装</h2><h3 id="Grammarly"><a href="#Grammarly" class="headerlink" title="Grammarly"></a>Grammarly</h3><p><a href="https://www.grammarly.com/">https://www.grammarly.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/20230924102114.png" alt="image.png"></p>
<h2 id="未分类"><a href="#未分类" class="headerlink" title="未分类"></a>未分类</h2><h3 id="ollama"><a href="#ollama" class="headerlink" title="ollama"></a>ollama</h3><p>官网: <a href="https://ollama.com/">https://ollama.com/</a></p>
<p><img src="https://s2.loli.net/2025/07/23/FWJxyIP1GHqp6Rw.png" alt="image.png"></p>
<h3 id="OpenHands"><a href="#OpenHands" class="headerlink" title="OpenHands"></a>OpenHands</h3><p>基于 LLM 模型进行一系列自动化操作</p>
<p>官网: <a href="https://www.all-hands.dev/">https://www.all-hands.dev/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506240058243.png" alt="image.png"></p>
<h3 id="nocodb"><a href="#nocodb" class="headerlink" title="nocodb"></a>nocodb</h3><p>数据库可视化管理</p>
<p>官网: <a href="https://nocodb.com/">https://nocodb.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506240038426.png" alt="image.png"></p>
<h3 id="zed"><a href="#zed" class="headerlink" title="zed"></a>zed</h3><p>代码编辑器</p>
<p>下载地址: <a href="https://zed.dev/">https://zed.dev/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506240021777.png"></p>
<h3 id="coolify"><a href="#coolify" class="headerlink" title="coolify"></a>coolify</h3><p>开源替代 vercel 之类的托管服务</p>
<p>官网: <a href="https://coolify.io/">https://coolify.io/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506240010029.png" alt="image.png"></p>
<h3 id="hoppscotch"><a href="#hoppscotch" class="headerlink" title="hoppscotch"></a>hoppscotch</h3><p>替代 postman 的开源免费软件</p>
<p>下载地址: <a href="https://hoppscotch.com/download?platform=macOS">https://hoppscotch.com/download?platform=macOS</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506240004709.png" alt="image.png"></p>
<h3 id="tabby"><a href="#tabby" class="headerlink" title="tabby"></a>tabby</h3><p>本地化的 ai 工具, 类似 github copilot</p>
<p>下载地址: [<a href="https://www.tabbyml.com/)[https://www.tabbyml.com/]">https://www.tabbyml.com/)[https://www.tabbyml.com/]</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506231308893.png" alt="image.png"></p>
<h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>替代 Cursor 的开源版本</p>
<p>下载地址: <a href="https://voideditor.com/">https://voideditor.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506152325410.png" alt="image.png"></p>
<h3 id="cherry-studio"><a href="#cherry-studio" class="headerlink" title="cherry-studio"></a>cherry-studio</h3><p>下载地址: <a href="https://github.com/CherryHQ/cherry-studio/releases">https://github.com/CherryHQ/cherry-studio/releases</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202502132011445.png"></p>
<h3 id="GitKraken-Desktop"><a href="#GitKraken-Desktop" class="headerlink" title="GitKraken Desktop"></a>GitKraken Desktop</h3><p>下载地址: <a href="https://www.gitkraken.com/">https://www.gitkraken.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202501190032275.png"></p>
<h3 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h3><p>下载地址: <a href="https://www.cursor.com/">https://www.cursor.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408301724390.png" alt="CleanShot 2024-08-30 at 17.22.57.png"></p>
<h3 id="Responsively-App"><a href="#Responsively-App" class="headerlink" title="Responsively App"></a>Responsively App</h3><p>同时展示不同分辨率下的网页效果</p>
<p>下载地址: <a href="https://responsively.app/">https://responsively.app/</a></p>
<p><img src="http://obsidian.easyhappy.top/obsidian/202412152156492.png"></p>
<h3 id="AICoin"><a href="#AICoin" class="headerlink" title="AICoin"></a>AICoin</h3><p>下载地址: <a href="https://www.aicoin.com/en">https://www.aicoin.com/en</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202411291723624.png" alt="image.png"></p>
<h3 id="UGit"><a href="#UGit" class="headerlink" title="UGit"></a>UGit</h3><p>下载地址: <a href="https://ugit.qq.com/en/">https://ugit.qq.com/en/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202409110848077.png" alt="image.png"></p>
<h3 id="WPS-Office"><a href="#WPS-Office" class="headerlink" title="WPS Office"></a>WPS Office</h3><p>下载地址：<a href="https://platform.wps.cn/">https://platform.wps.cn/</a></p>
<p><img src="https://pic2.zhimg.com/80/v2-f23652776e0890f7b4a1bee8aad78e97_1440w.png" alt="image"></p>
<h3 id="Bitwarden"><a href="#Bitwarden" class="headerlink" title="Bitwarden"></a>Bitwarden</h3><p>下载地址: <a href="https://bitwarden.com/download/">https://bitwarden.com/download/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408261207388.png" alt="CleanShot 2024-08-26 at 12.07.01@2x.png"></p>
<h3 id="Sidoc-内网穿透"><a href="#Sidoc-内网穿透" class="headerlink" title="Sidoc 内网穿透"></a>Sidoc 内网穿透</h3><p>下载地址: <a href="https://frp.sidoc.cn/">https://frp.sidoc.cn/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081020583.png" alt="CleanShot 2024-08-08 at 10.20.53.png"></p>
<h3 id="阿里旺旺"><a href="#阿里旺旺" class="headerlink" title="阿里旺旺"></a>阿里旺旺</h3><p>下载地址: <a href="https://wangwang.taobao.com/">https://wangwang.taobao.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081016648.png" alt="CleanShot 2024-08-08 at 10.16.06.png"></p>
<h3 id="krpano-Tools"><a href="#krpano-Tools" class="headerlink" title="krpano Tools"></a>krpano Tools</h3><p>下载地址：<a href="https://krpano.com/download">https://krpano.com/download</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1655101168197-179f401a-749f-4632-89c9-6e366078a053.png" alt="image"></p>
<h3 id="豆包"><a href="#豆包" class="headerlink" title="豆包"></a>豆包</h3><p>下载地址: <a href="https://www.doubao.com/download/desktop">https://www.doubao.com/download/desktop</a></p>
<p><img src="http://obsidian.easyhappy.top/obsidian/202407280036588.png"></p>
<h3 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h3><p>下载地址：<a href="https://pinyin.sogou.com/">https://pinyin.sogou.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602240061596-cca34b94-1140-4efc-83e0-18a3443a5f80.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="360压缩"><a href="#360压缩" class="headerlink" title="360压缩"></a>360压缩</h3><p>下载地址：<a href="https://yasuo.360.cn/">https://yasuo.360.cn/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602240136788-65a03a87-1da2-4348-9457-daf1904f0982.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1601464243188-8b9c33ee-39ff-440b-a327-f0a66bbab4b6.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h3 id="mihomo-party-org"><a href="#mihomo-party-org" class="headerlink" title="mihomo-party-org"></a>mihomo-party-org</h3><p>下载地址: <a href="https://github.com/mihomo-party-org/mihomo-party/releases">https://github.com/mihomo-party-org/mihomo-party/releases</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202501090001865.png"></p>
<h3 id="Cos-Browser"><a href="#Cos-Browser" class="headerlink" title="Cos Browser"></a>Cos Browser</h3><p>下载地址: <a href="https://cosbrowser.cloud.tencent.com/">https://cosbrowser.cloud.tencent.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/obsidian/20240627085610.png" alt="image.png"></p>
<h3 id="Kodo-Browser"><a href="#Kodo-Browser" class="headerlink" title="Kodo Browser"></a>Kodo Browser</h3><p>下载地址：<a href="https://developer.qiniu.com/kodo/5972/kodo-browser">https://developer.qiniu.com/kodo/5972/kodo-browser</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506301453288.png" alt="image.png"></p>
<h2 id="特殊软件"><a href="#特殊软件" class="headerlink" title="特殊软件"></a>特殊软件</h2><h3 id="Navicat-Premium-16"><a href="#Navicat-Premium-16" class="headerlink" title="Navicat Premium 16"></a>Navicat Premium 16</h3><p>下载地址：<a href="https://macwk.com/soft/navicat-premium">https://macwk.com/soft/navicat-premium</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506301455766.png" alt="image (1).png"></p>
<h3 id="Xmind"><a href="#Xmind" class="headerlink" title="Xmind"></a>Xmind</h3><p>下载地址：百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506301455554.png" alt="image (2).png"></p>
<blockquote>
<p>如果提示损坏<br>sudo xattr -d com.apple.quarantine &#x2F;Applications&#x2F;XMind.app</p>
</blockquote>
<h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h2><p>下载地址: <a href="https://www.telerik.com/fiddler/fiddler-classic">https://www.telerik.com/fiddler/fiddler-classic</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202411130957898.png" alt="image.png"></p>
<h2 id="TrafficMonitor"><a href="#TrafficMonitor" class="headerlink" title="TrafficMonitor"></a>TrafficMonitor</h2><p>下载地址: <a href="https://github.com/zhongyang219/TrafficMonitor">https://github.com/zhongyang219/TrafficMonitor</a></p>
<p><img src="http://obsidian.easyhappy.top/obsidian/202402152350819.png"></p>
<h2 id="pianoteq-pro"><a href="#pianoteq-pro" class="headerlink" title="pianoteq pro"></a>pianoteq pro</h2><p>罗兰钢琴内录</p>
<h2 id="EasyConnect"><a href="#EasyConnect" class="headerlink" title="EasyConnect"></a>EasyConnect</h2><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/20230710203638.png"></p>
<h2 id="carnac"><a href="#carnac" class="headerlink" title="carnac"></a>carnac</h2><p>下载地址: <a href="https://github.com/Code52/carnac">https://github.com/Code52/carnac</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202305291633409.png"></p>
<h2 id="MobaXterm"><a href="#MobaXterm" class="headerlink" title="MobaXterm"></a>MobaXterm</h2><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506301456866.png" alt="image.png"></p>
<h2 id="VMware"><a href="#VMware" class="headerlink" title="VMware"></a>VMware</h2><p>官网：<a href="https://www.vmware.com/">https://www.vmware.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625320501840-99855fe8-63fe-4967-92c9-b895eedbdea6.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h2 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h2><p>下载地址：<a href="https://www.huorong.cn/">https://www.huorong.cn/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625234872739-81e99952-49b8-4d40-8509-fe23f213d261.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h2 id="PotPlayer64"><a href="#PotPlayer64" class="headerlink" title="PotPlayer64"></a>PotPlayer64</h2><p>下载地址：<a href="https://www.potplayer.org/gengxin/413.html">https://www.potplayer.org/gengxin/413.html</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602299937740-51e2bf30-c1f0-4fc7-a8f7-68dbddde1941.png?x-oss-process=image/resize,w_1098,limit_0" alt="image"></p>
<h2 id="Autohotkey"><a href="#Autohotkey" class="headerlink" title="Autohotkey"></a>Autohotkey</h2><p>下载地址：<a href="https://www.autohotkey.com/">https://www.autohotkey.com/</a></p>
<p><img src="https://pic3.zhimg.com/80/v2-a269411f3ada9a9af36562ecef4a5166_1440w.png" alt="image"></p>
<h2 id="Utools"><a href="#Utools" class="headerlink" title="Utools"></a>Utools</h2><p>下载地址：<a href="https://u.tools/">https://u.tools/</a></p>
<p><img src="https://pic4.zhimg.com/80/v2-84216aa6876e0498f84a6e6dd58bd5d1_720w.png" alt="image"></p>
<h2 id="Window-Switcher"><a href="#Window-Switcher" class="headerlink" title="Window Switcher"></a>Window Switcher</h2><p>下载地址: <a href="https://github.com/sigoden/window-switcher">https://github.com/sigoden/window-switcher</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408221559429.png" alt="CleanShot 2024-08-22 at 15.59.30@2x.png"></p>
<h2 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h2><p>下载地址：<a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625846121591-2eb94504-4379-437b-832a-ce99d29bac59.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602306680097-1a66b0a6-8b95-40a2-af79-01a3c728bdc0.png" alt="image"></p>
<h2 id="Ubuntu-20-04-LTS"><a href="#Ubuntu-20-04-LTS" class="headerlink" title="Ubuntu 20.04 LTS"></a>Ubuntu 20.04 LTS</h2><p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602306708209-072c7658-eb6f-4bf8-8cc3-4bc03b84bd7e.png" alt="image"></p>
<h2 id="唧唧"><a href="#唧唧" class="headerlink" title="唧唧"></a>唧唧</h2><p>下载地址：<a href="http://client.jijidown.com/">http://client.jijidown.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1651115188983-5c85ac33-f718-4a39-8f7c-2564e3aaabc6.png?x-oss-process=image/resize,w_1099,limit_0" alt="image"></p>
<h2 id="Geek"><a href="#Geek" class="headerlink" title="Geek"></a>Geek</h2><p>下载地址：<a href="https://geekuninstaller.com/download">https://geekuninstaller.com/download</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625235882032-f551d9ae-fe0e-4420-9290-129b2936e291.png" alt="image"></p>
<h2 id="SpaceSniffer"><a href="#SpaceSniffer" class="headerlink" title="SpaceSniffer"></a>SpaceSniffer</h2><p>下载地址：<a href="http://www.uderzo.it/main_products/space_sniffer/">http://www.uderzo.it/main_products&#x2F;space_sniffer&#x2F;</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1620828740868-32d4b05b-cd69-4b5f-89f8-5f405e7dd875.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h2 id="PowerToys"><a href="#PowerToys" class="headerlink" title="PowerToys"></a>PowerToys</h2><p>下载地址：<a href="https://github.com/microsoft/PowerToys">https://github.com/microsoft/PowerToys</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1620828912946-8c4bef24-9094-451f-a1f5-f05789e668ad.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h2 id="Eveything"><a href="#Eveything" class="headerlink" title="Eveything"></a>Eveything</h2><p>下载地址：<a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1601458361142-f6b7be54-0df3-4fef-b6d6-b73961fc4d96.png?x-oss-process=image/resize,w_1087,limit_0" alt="image"></p>
<h3 id="Draw-io"><a href="#Draw-io" class="headerlink" title="Draw.io"></a>Draw.io</h3><p>下载地址: <a href="https://www.drawio.com/">https://www.drawio.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081040718.png" alt="CleanShot 2024-08-08 at 10.40.28.png"></p>
<h2 id="KeyTweak"><a href="#KeyTweak" class="headerlink" title="KeyTweak"></a>KeyTweak</h2><p>下载地址：<a href="https://keytweak.softonic.cn/">https://keytweak.en.softonic.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1610586976996-effc94b7-a838-40e3-8749-0b68d9e2e52a.png" alt="image"></p>
<h3 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h3><p>下载地址：<a href="https://www.internetdownloadmanager.com/">https://www.internetdownloadmanager.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1602299812821-a32a681b-668f-4e3a-b9a4-4270a6effdc6.png?x-oss-process=image/resize,w_1125,limit_0" alt="image"></p>
<h1 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h1><h2 id="付费"><a href="#付费" class="headerlink" title="付费"></a>付费</h2><h3 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h3><p>下载地址: <a href="https://chatgpt.com/">https://chatgpt.com</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081034750.png" alt="CleanShot 2024-08-08 at 10.34.28.png"></p>
<h3 id="klack"><a href="#klack" class="headerlink" title="klack"></a>klack</h3><p><img src="http://obsidian.easyhappy.top/avan/202310311725921.png" alt="image.png"></p>
<h2 id="brew-直装-1"><a href="#brew-直装-1" class="headerlink" title="brew 直装"></a>brew 直装</h2><h3 id="Royal-tsx"><a href="#Royal-tsx" class="headerlink" title="Royal tsx"></a>Royal tsx</h3><p><img src="http://obsidian.easyhappy.top/avan/202303141002651.png"></p>
<h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>下载地址：brew install tmux</p>
<h3 id="Warp"><a href="#Warp" class="headerlink" title="Warp"></a>Warp</h3><p>下载地址：<a href="https://www.warp.dev/">https://www.warp.dev/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654746757127-463667da-99da-42ae-b034-124310ca9e1e.png?x-oss-process=image/resize,w_1404,limit_0" alt="image"></p>
<h3 id="Proxyman"><a href="#Proxyman" class="headerlink" title="Proxyman"></a>Proxyman</h3><p>下载地址：<a href="https://proxyman.io/">https://proxyman.io/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1642990649515-1852230f-791b-4ab0-89bf-7766dbe5a621.png" alt="image"></p>
<h3 id="MacDown"><a href="#MacDown" class="headerlink" title="MacDown"></a>MacDown</h3><p>下载地址：<a href="https://macdown.uranusjr.com/">https://macdown.uranusjr.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1642992120712-c8613b24-6ae6-4dd0-b702-6ae1ab2c076d.png?x-oss-process=image/resize,w_1308,limit_0" alt="image"></p>
<h3 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h3><p>下载地址：<a href="https://iterm2.com/">https://iterm2.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1621468923987-59a6d288-5b21-43a9-a300-eeada2cd26e2.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Amazon-Q"><a href="#Amazon-Q" class="headerlink" title="Amazon Q"></a>Amazon Q</h3><p>原 Fig</p>
<p>下载地址: <a href="https://docs.aws.amazon.com/codewhisperer/latest/userguide/command-line-getting-started-installing.html">https://docs.aws.amazon.com/codewhisperer/latest/userguide/command-line-getting-started-installing.html</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654746726366-9ada18ee-23dd-4f04-9201-9d50359d96d4.png?x-oss-process=image/resize,w_1465,limit_0" alt="image"></p>
<h3 id="IINA"><a href="#IINA" class="headerlink" title="IINA"></a>IINA</h3><p>下载地址：<a href="https://iina.io/">https://iina.io/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1625449507063-51757d49-2a91-438a-bfc8-e50f4b96f611.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="柠檬"><a href="#柠檬" class="headerlink" title="柠檬"></a>柠檬</h3><p>下载地址：<a href="https://lemon.qq.com/">https://lemon.qq.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656532851228-f19eb86f-3c49-423a-a7f9-5f07ef395538.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="bob"><a href="#bob" class="headerlink" title="bob"></a>bob</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1627008186827-a773ae4c-b263-49aa-a263-77d740b39718.png" alt="image"></p>
<h2 id="特殊软件-1"><a href="#特殊软件-1" class="headerlink" title="特殊软件"></a>特殊软件</h2><h3 id="Qbserve"><a href="#Qbserve" class="headerlink" title="Qbserve"></a>Qbserve</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412181116632.png" alt="image.png"></p>
<h3 id="Lungo"><a href="#Lungo" class="headerlink" title="Lungo"></a>Lungo</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412181005923.png" alt="image.png"></p>
<h3 id="QuitAll"><a href="#QuitAll" class="headerlink" title="QuitAll"></a>QuitAll</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412181004189.png" alt="image.png"></p>
<h3 id="Mission-Control-Plus"><a href="#Mission-Control-Plus" class="headerlink" title="Mission Control Plus"></a>Mission Control Plus</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412181003905.png" alt="image.png"></p>
<h3 id="HazeOver"><a href="#HazeOver" class="headerlink" title="HazeOver"></a>HazeOver</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412161540798.png" alt="image.png"></p>
<h3 id="Keysmith"><a href="#Keysmith" class="headerlink" title="Keysmith"></a>Keysmith</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202412091032376.png" alt="image.png"></p>
<h3 id="iRightMouse-Pro"><a href="#iRightMouse-Pro" class="headerlink" title="iRightMouse Pro"></a>iRightMouse Pro</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202409110847230.png" alt="image.png"></p>
<h3 id="Homerow"><a href="#Homerow" class="headerlink" title="Homerow"></a>Homerow</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202408261205539.png" alt="image.png"></p>
<h3 id="Screen-Studio"><a href="#Screen-Studio" class="headerlink" title="Screen Studio"></a>Screen Studio</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202408080950338.png" alt="CleanShot 2024-08-08 at 09.50.05.png"></p>
<h3 id="iStat-Menus"><a href="#iStat-Menus" class="headerlink" title="iStat Menus"></a>iStat Menus</h3><p><img src="http://obsidian.easyhappy.top/obsidian/CleanShot%202024-08-07%20at%2000.46.08@2x.png" alt="CleanShot 2024-08-07 at 00.46.08@2x.png"></p>
<h3 id="AlDente"><a href="#AlDente" class="headerlink" title="AlDente"></a>AlDente</h3><p>下载地址: <a href="https://apphousekitchen.com/">https://apphousekitchen.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202407251024726.png" alt="image.png"></p>
<h3 id="TextSniper"><a href="#TextSniper" class="headerlink" title="TextSniper"></a>TextSniper</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202407251134774.png" alt="image.png"></p>
<h3 id="CleanShotX"><a href="#CleanShotX" class="headerlink" title="CleanShotX"></a>CleanShotX</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202407251134114.png" alt="image.png"></p>
<h3 id="4K-Video-Downloader"><a href="#4K-Video-Downloader" class="headerlink" title="4K Video Downloader"></a>4K Video Downloader</h3><p>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/20230809214802.png"></p>
<h3 id="Manico"><a href="#Manico" class="headerlink" title="Manico"></a>Manico</h3><p>[[Manico]]</p>
<p><img src="https://pica.zhimg.com/80/v2-74383257974e007edb28e958faeda970_1440w.png" alt="image"></p>
<h3 id="Karabiner-Elements"><a href="#Karabiner-Elements" class="headerlink" title="Karabiner-Elements"></a>Karabiner-Elements</h3><p>[[Karabiner-Elements]]</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654003101279-1014a49c-190c-49b8-a81a-ca66d0e0f811.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Dowine-4"><a href="#Dowine-4" class="headerlink" title="Dowine 4"></a>Dowine 4</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1645891265147-a943f460-26e9-416a-b4a3-acbdb3e172d7.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a>Alfred</h3><p>下载链接：<a href="https://www.alfredapp.com/">https://www.alfredapp.com/</a><br>资料：<br>[[44 - Alfred 操作]]</p>
<p><img src="https://cdn.nlark.com/yuque/0/2020/png/815906/1603344975371-3ca9d227-2ef2-443a-b6f5-e17de72e2c5a.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Dash"><a href="#Dash" class="headerlink" title="Dash"></a>Dash</h3><p>下载地址：<a href="https://macwk.com/soft/dash">https://macwk.com/soft/dash</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1643082623942-a8b8af1c-a9cb-4f96-9761-0dad6db88f80.png" alt="image"></p>
<h3 id="CheatSheet"><a href="#CheatSheet" class="headerlink" title="CheatSheet"></a>CheatSheet</h3><p>下载地址：<a href="https://macwk.com/soft/cheatsheet">https://macwk.com/soft/cheatsheet</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1643082514806-32e56886-b950-4d87-9252-f698e3ec9f16.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Bartender"><a href="#Bartender" class="headerlink" title="Bartender"></a>Bartender</h3><p>下载地址：<a href="https://www.macbartender.com/">https://www.macbartender.com/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654756992267-707c1e7b-4ff8-4d26-a3ed-e5d79e4b45cc.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h3><p>下载地址：<a href="https://www.parallels.cn/">https://www.parallels.cn/</a><br>无限试用工具：<a href="https://macwk.com/soft/pd-runner">https://macwk.com/soft/pd-runner</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1643180998090-5ba08e1b-41a8-4680-b5a6-b624d954857c.png?x-oss-process=image/resize,w_1452,limit_0" alt="image"></p>
<h3 id="Folx-Pro"><a href="#Folx-Pro" class="headerlink" title="Folx Pro"></a>Folx Pro</h3><p>下载地址：<a href="https://macwk.com/soft/folx">https://macwk.com/soft/folx</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1656557538264-74e076a9-63f0-4768-8314-58e54f05b54b.png" alt="image"></p>
<h3 id="Magnet"><a href="#Magnet" class="headerlink" title="Magnet"></a>Magnet</h3><p>下载地址：<a href="https://www.macwk.com/soft/magnet">https://www.macwk.com/soft/magnet</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1621555911383-a12d316d-58c0-4d15-8ac9-8c985338f997.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h2 id="App-Store"><a href="#App-Store" class="headerlink" title="App Store"></a>App Store</h2><h3 id="Endel"><a href="#Endel" class="headerlink" title="Endel"></a>Endel</h3><p><img src="http://obsidian.easyhappy.top/avan/202405101009231.png" alt="image.png"></p>
<h3 id="Just-Focus"><a href="#Just-Focus" class="headerlink" title="Just Focus"></a>Just Focus</h3><p><img src="http://obsidian.easyhappy.top/avan/202309121040979.png"></p>
<h2 id="未分类-1"><a href="#未分类-1" class="headerlink" title="未分类"></a>未分类</h2><h3 id="Keka"><a href="#Keka" class="headerlink" title="Keka"></a>Keka</h3><p>下载地址: <a href="https://www.keka.io/en/">https://www.keka.io/en/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202411291006725.png" alt="image.png"></p>
<h3 id="Macs-Fan-Control"><a href="#Macs-Fan-Control" class="headerlink" title="Macs Fan Control"></a>Macs Fan Control</h3><p>下载地址: <a href="https://crystalidea.com/macs-fan-control">https://crystalidea.com/macs-fan-control</a><br>下载地址: 百度网盘</p>
<p><img src="http://obsidian.easyhappy.top/avan/202408081038998.png" alt="CleanShot 2024-08-08 at 10.38.27.png"></p>
<h3 id="Perplexity"><a href="#Perplexity" class="headerlink" title="Perplexity"></a>Perplexity</h3><p>下载地址: <a href="https://www.perplexity.ai/">https://www.perplexity.ai/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202401021605706.png" alt="image.png"></p>
<h3 id="Artifact"><a href="#Artifact" class="headerlink" title="Artifact"></a>Artifact</h3><p>下载地址: <a href="https://artifact.news/">https://artifact.news/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202401021604360.png" alt="image.png"></p>
<h3 id="Multi"><a href="#Multi" class="headerlink" title="Multi"></a>Multi</h3><p>下载地址: <a href="https://multi.app/">https://multi.app/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308161043993.png"></p>
<h3 id="Script-Kit"><a href="#Script-Kit" class="headerlink" title="Script Kit"></a>Script Kit</h3><p>下载地址: <a href="https://www.scriptkit.com/">https://www.scriptkit.com/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308161044057.png"></p>
<h3 id="Xcodes"><a href="#Xcodes" class="headerlink" title="Xcodes"></a>Xcodes</h3><p>下载地址: <a href="https://www.xcodes.app/">https://www.xcodes.app/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202308151435352.png"></p>
<h3 id="Arc"><a href="#Arc" class="headerlink" title="Arc"></a>Arc</h3><p>下载地址: <a href="https://arc.net/">https://arc.net/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/20230813083601.png"></p>
<h3 id="Hand-Mirror"><a href="#Hand-Mirror" class="headerlink" title="Hand Mirror"></a>Hand Mirror</h3><p>下载地址: <a href="https://handmirror.app/">https://handmirror.app/</a></p>
<p>介绍: 可以随时随地看摄像头</p>
<p><img src="http://obsidian.easyhappy.top/avan/202308091504522.png"></p>
<h3 id="CatchMouse"><a href="#CatchMouse" class="headerlink" title="CatchMouse"></a>CatchMouse</h3><p>下载地址: <a href="https://macdownload.informer.com/catchmouse/">https://macdownload.informer.com/catchmouse/</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202305291641661.png"></p>
<h3 id="keycastr"><a href="#keycastr" class="headerlink" title="keycastr"></a>keycastr</h3><p>下载地址: <a href="https://github.com/keycastr/keycastr">https://github.com/keycastr/keycastr</a></p>
<p><img src="http://obsidian.easyhappy.top/avan/202305291623699.png"></p>
<h3 id="Loopback"><a href="#Loopback" class="headerlink" title="Loopback"></a>Loopback</h3><p>下载地址：<a href="https://rogueamoeba.com/loopback/">https://rogueamoeba.com/loopback/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1657596852523-5b77188a-a840-453a-8a12-e629da3094c2.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
<h3 id="File-Juicer"><a href="#File-Juicer" class="headerlink" title="File Juicer"></a>File Juicer</h3><p>下载地址：<a href="https://macwk.com/soft/file-juicer">https://macwk.com/soft/file-juicer</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1642996810614-abcca434-5570-45de-85b1-8b304400045a.png?x-oss-process=image/resize,w_842,limit_0" alt="image"></p>
<h3 id="Better-Touch-Tool"><a href="#Better-Touch-Tool" class="headerlink" title="Better Touch Tool"></a>Better Touch Tool</h3><p>下载地址：<a href="https://folivora.ai/">https://folivora.ai/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654747351732-ed4bf4c2-300e-4c48-b8b2-0dbdc7d97fc1.png" alt="image"></p>
<h3 id="Gatekeeper-Toggler"><a href="#Gatekeeper-Toggler" class="headerlink" title="Gatekeeper Toggler"></a>Gatekeeper Toggler</h3><p>下载地址：<a href="https://macdownload.informer.com/gatekeeper-toggler/3.0/">https://macdownload.informer.com/gatekeeper-toggler/3.0/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/815906/1654750175004-eefe3886-6d01-470f-ba9a-77efb625acd6.png?x-oss-process=image/resize,w_1487,limit_0" alt="image"></p>
<h3 id="HomeBrew"><a href="#HomeBrew" class="headerlink" title="HomeBrew"></a>HomeBrew</h3><p>下载地址：<a href="https://brew.sh/index_zh-cn">https://brew.sh/index_zh-cn</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/815906/1621467695923-3c3926ce-1b83-447a-9b7d-693b4b36cc72.png?x-oss-process=image/resize,w_1500,limit_0" alt="image"></p>
]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>软件推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Chorme插件Surfingkeys简单使用</title>
    <url>/2020/09/04/article/Chorme%E6%8F%92%E4%BB%B6Surfingkeys%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、特点"><a href="#一、特点" class="headerlink" title="一、特点"></a>一、特点</h2><p>对Vim的使用者极其友好。如果你会Vim那么学习使用这个浏览器插件将很快上手。如果不会也没关系，我这里总结一些常用的快捷键供大家学习。</p>
<p><a href="https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc">插件地址</a></p>
<h2 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h2><h3 id="链接操作"><a href="#链接操作" class="headerlink" title="链接操作"></a>链接操作</h3><p>f —— 搜索当前页面的所有链接地址，并提示相应的快捷键。如果快捷键重叠可以使用 <code>Shift</code> 切换层级。<br>C —— 在新页面打开一个链接<br>gf —— 与C功能一致，在新页面打开一个链接<br>af —— 在新页面打开一个链接，并跳转至此页面<br>cf —— 在新页面打开多个链接</p>
<h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>E&#x2F;R —— 向左&#x2F;右切换标签栏<br>x —— 关闭当前标签页<br>X —— 恢复关闭的标签页<br>W —— 在新窗口打开当前标签页<br>yt —— 复制当前页面，并切换至新页面</p>
<h3 id="标签栏操作"><a href="#标签栏操作" class="headerlink" title="标签栏操作"></a>标签栏操作</h3><p>&lt;&lt;&#x2F;&gt;&gt; —— 向左&#x2F;右移动当前页面的标签栏位置<br>g0 —— 切换到标签栏中的第一个页面<br>g$ —— 切换到标签栏的最后一个页面<br>gxt —— 关闭当前页面左侧的一个页面<br>gxT —— 关闭当前页面的右侧一个页面<br>gx0 —— 关闭当前页面的左侧所有页面<br>gx$ —— 关闭当前页面的右侧所有页面</p>
<h3 id="滚动操作"><a href="#滚动操作" class="headerlink" title="滚动操作"></a>滚动操作</h3><p>e&#x2F;d —— 想上&#x2F;x滚动页面<br>gg —— 滚动到页面顶部<br>G —— 滚动到页面底部<br>0 —— 滚动到页面左侧<br>$ —— 滚动到页面右侧<br>j&#x2F;k —— 上&#x2F;下移动页面<br>h&#x2F;l —— 左&#x2F;右移动页面<br>cs —— 切换滚动目标<br>cS —— 重置滚动目标</p>
<h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><p>yS —— 当前滚动页面截图<br>yG —— 当前页面截图</p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>sg —— 谷歌搜索<br>sw —— 必应搜索<br>sb —— 百度搜索<br>sy —— youtube搜索</p>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>Ctrl-i —— 使用Vim的编辑器编辑内容</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>chrome</tag>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>surfingkeys</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX以及轮询</title>
    <url>/2021/01/30/article/AJAX%E4%BB%A5%E5%8F%8A%E8%BD%AE%E8%AF%A2/</url>
    <content><![CDATA[<h2 id="1-传统表单提交与AJAX比较"><a href="#1-传统表单提交与AJAX比较" class="headerlink" title="1. 传统表单提交与AJAX比较"></a>1. 传统表单提交与AJAX比较</h2><h3 id="1-1-Form表单"><a href="#1-1-Form表单" class="headerlink" title="1.1 Form表单"></a>1.1 Form表单</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/form.html&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;password&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>它支持持GET和POST类型</li>
<li>提交数据后页面会刷新，用户体验差</li>
</ul>
<h3 id="1-2-AJAX"><a href="#1-2-AJAX" class="headerlink" title="1.2 AJAX"></a>1.2 AJAX</h3><ul>
<li>概念<br><strong>AJAX</strong> &#x3D; <strong>Asynchronous JavaScript and XML</strong> （异步的JavaScript 和 XML）</li>
<li>使用内置的 <code>XMLHttpRequest</code> 和 <code>fetch</code> 对象，实现和服务器的交互</li>
<li>交互数据时不需要刷新数据，用户体验好</li>
</ul>
<h4 id="1-2-1-XMLHttpRequest"><a href="#1-2-1-XMLHttpRequest" class="headerlink" title="1.2.1 XMLHttpRequest"></a>1.2.1 XMLHttpRequest</h4><h5 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h5><ul>
<li>创建对象</li>
<li>配置参数</li>
<li>绑定事件</li>
<li>发送请求</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<p>方法1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://xxx.xxx.com/api/blog/list&#x27;</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;网络异常&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<p>方法2</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://xxx.xxx.com/api/blog/list&#x27;</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据错误&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;网络异常&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<h5 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://xxx.xxx.com/api/user/login&#x27;</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">timeout</span> = <span class="number">3000</span> <span class="comment">// 设置请求超时时间</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseTest</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据错误&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">ontimeout</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求超时&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;网络异常&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;username=layouwen&amp;password=123456&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>简单的封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = (<span class="params">url, params, onsuccess, onerror</span>) =&gt; &#123;</span><br><span class="line">  url = url + <span class="string">&#x27;?&#x27;</span> + <span class="title class_">Object</span>.<span class="title function_">entries</span>(params).<span class="title function_">map</span>(<span class="function"><span class="params">arr</span>=&gt;</span>arr[<span class="number">0</span>] + <span class="string">&#x27;=&#x27;</span> + arr[<span class="number">1</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">  xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">      <span class="title function_">onsuccess</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">onerror</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="property">onerror</span> = onerror</span><br><span class="line">  xhr.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&#x27;http://www.xxx.com/api/user/login&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">passowrd</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求成功&#x27;</span>, data)</span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;网络异常&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-Post请求编码方式"><a href="#1-2-2-Post请求编码方式" class="headerlink" title="1.2.2 Post请求编码方式"></a>1.2.2 Post请求编码方式</h4><p>两个常用的</p>
<p>application&#x2F;x-www-form-urlencoded</p>
<ul>
<li>参数变为 <code>key1=value1&amp;key2=value2</code> 的形式</li>
</ul>
<p>multipart&#x2F;form-data</p>
<ul>
<li>一般用于上传文件使用</li>
</ul>
<h5 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart&#x2F;form-data"></a>multipart&#x2F;form-data</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">formData.<span class="title function_">append</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">formData.<span class="title function_">appedn</span>(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://www.xxx.com/api/user/login&#x27;</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span> || xhr.<span class="property">status</span> === <span class="number">304</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接口异常&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>(formData)</span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-fetch"><a href="#1-2-3-fetch" class="headerlink" title="1.2.3 fetch"></a>1.2.3 fetch</h4><h5 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://www.xxx.com/api/blog/list&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>()).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = data.<span class="property">results</span>[<span class="number">0</span>].<span class="property">weather_data</span>[<span class="number">0</span>].<span class="property">weather</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://www.xxx.com/api/user/login&#x27;</span></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">map</span>(<span class="function"><span class="params">arr</span>=&gt;</span>arr[<span class="number">0</span>] + <span class="string">&#x27;=&#x27;</span> + arr[<span class="number">1</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">  <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>res.<span class="title function_">json</span>()).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error&#x27;</span>, error)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success&#x27;</span>, response)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>更多用法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch">https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API&#x2F;Using_Fetch</a></p>
</blockquote>
<h2 id="2-双工通信"><a href="#2-双工通信" class="headerlink" title="2. 双工通信"></a>2. 双工通信</h2><h3 id="2-1-轮询"><a href="#2-1-轮询" class="headerlink" title="2.1 轮询"></a>2.1 轮询</h3><p>每隔一段时间发一次请求</p>
<ul>
<li>发请求，立即响应，返回空</li>
<li>发请求，立即响应，返回新数据</li>
<li>发请求，立即响应，返回数据为空</li>
<li>发请求，立即响应，返回数据为空<br>……</li>
</ul>
<blockquote>
<p>gitee案例 <code>chat-xhr-poll</code></p>
</blockquote>
<h3 id="2-2-长轮询（Comet）"><a href="#2-2-长轮询（Comet）" class="headerlink" title="2.2 长轮询（Comet）"></a>2.2 长轮询（Comet）</h3><p>客户端</p>
<ul>
<li>发请求，等待响应</li>
<li>当响应时，再次发送请求</li>
</ul>
<p>服务端</p>
<ul>
<li>请求到来，如果没新数据，则不发</li>
<li>当有新数据，需要通知客户端，再响应</li>
</ul>
<blockquote>
<p>gitee案例 <code>chat-comet</code></p>
</blockquote>
<h3 id="2-3-WebSocket"><a href="#2-3-WebSocket" class="headerlink" title="2.3 WebSocket"></a>2.3 WebSocket</h3><blockquote>
<p>gitee案例 <code>chat-websocket</code></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>ajax</tag>
        <tag>轮询</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM事件模型</title>
    <url>/2020/06/04/article/DOM%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、事件捕获与事件冒泡"><a href="#一、事件捕获与事件冒泡" class="headerlink" title="一、事件捕获与事件冒泡"></a>一、事件捕获与事件冒泡</h2><p>事件的捕获和冒泡，分别由微软和网景提出。他们分别决定了事件发生顺序的问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果在上面的代码中，outer盒子与inner按钮，分别绑定了一个点击事件。那么他们的执行顺序应该是怎么样呢？</p>
<h3 id="1、事件捕获"><a href="#1、事件捕获" class="headerlink" title="1、事件捕获"></a>1、事件捕获</h3><p>事件捕获的顺序是由外到内，从最外面的元素开始检测。如果监听到有事件，则开始执行。</p>
<p>执行顺序为 outer &#x3D;&#x3D;&gt; inner</p>
<h3 id="2、事件冒泡"><a href="#2、事件冒泡" class="headerlink" title="2、事件冒泡"></a>2、事件冒泡</h3><p>事件冒泡顺序与事件捕获相反，它是从最里面的元素开始往外检测，检测到有事件的话就开始执行事件。</p>
<p>执行顺序为 inner &#x3D;&#x3D;&gt; outer</p>
<h3 id="3、W3C规范"><a href="#3、W3C规范" class="headerlink" title="3、W3C规范"></a>3、W3C规范</h3><p>在网景和微软的冲突后。W3C开始介入，并将两者合并在一起。</p>
<p>规范为： 先捕获在冒泡</p>
<h3 id="4、addEventistener-的第三个参数"><a href="#4、addEventistener-的第三个参数" class="headerlink" title="4、addEventistener 的第三个参数"></a>4、addEventistener 的第三个参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(event, <span class="keyword">function</span>, useCapture)</span><br></pre></td></tr></table></figure>

<p>在监听函数中，第一个为事件，第二个为执行的函数，第三个为是否冒泡</p>
<h3 id="5、target和currentTarget的区别"><a href="#5、target和currentTarget的区别" class="headerlink" title="5、target和currentTarget的区别"></a>5、target和currentTarget的区别</h3><p>e.target 指向的是被触发的元素</p>
<p>e.currentTarget 指向的是被监听的元素</p>
<blockquote>
<p>this 就是 currentTarget</p>
</blockquote>
<h3 id="6、取消冒泡"><a href="#6、取消冒泡" class="headerlink" title="6、取消冒泡"></a>6、取消冒泡</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>()</span><br></pre></td></tr></table></figure>

<h2 id="二、自定义事件"><a href="#二、自定义事件" class="headerlink" title="二、自定义事件"></a>二、自定义事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建自定义事件</span></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;hi&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">info</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;lyw&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">        <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="comment">// 是否冒泡</span></span><br><span class="line">        <span class="attr">cancelable</span>: <span class="literal">false</span> <span class="comment">// 是否可以取消冒泡</span></span><br><span class="line">    &#125;)</span><br><span class="line">    element.<span class="title function_">dispatchEvent</span>(event)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用自定义事件</span></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;lyw&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">name</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew安装及配置</title>
    <url>/2020/07/11/article/Homebrew%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>选择下载源，这里推荐选择 中科大，输入 1</p>
<p>接着更新brew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>brew cask install 软件名1 软件名2 软件名3</code> 安装软件<br><code>brew cask search [关键词]</code> 列出所有可以安装的软件<br><code>brew cask uninstall 软件名</code> 卸载软件<br><code>brew install 环境1 环境2 环境3</code> 安装环境<br><code>brew search [关键词]</code> 列出所有可以安装的环境<br><code>brew uninstall 环境名</code> 卸载环境<br><code>brew cask info 软件名</code> 查看相关软件的信息<br><code>brew info 环境名</code> 查看相关环境的信息<br><code>brew cask cleanup</code> 删除Homebrew下载的包<br><code>brew cask list</code> 列出Homebrew安装的包<br><code>brew cask update</code> 更新Homebrew Cask</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>安装Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<p>安装curl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install curl</span><br></pre></td></tr></table></figure>

<p>安装openssl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure>

<p>安装node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>

<p>安装yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure>

<p>安装chrome软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install chrome</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>homebrew</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的ideaVim插件配置</title>
    <url>/2020/08/30/article/IDEA%E7%9A%84ideaVim%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="进入-创建ideaVim的配置文件"><a href="#进入-创建ideaVim的配置文件" class="headerlink" title="进入&#x2F;创建ideaVim的配置文件"></a>进入&#x2F;创建ideaVim的配置文件</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/_ideavimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<h3 id="MocOS-Linux"><a href="#MocOS-Linux" class="headerlink" title="MocOS&#x2F;Linux"></a>MocOS&#x2F;Linux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ideavimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<h2 id="让ideaVim系统剪贴板与系统同步"><a href="#让ideaVim系统剪贴板与系统同步" class="headerlink" title="让ideaVim系统剪贴板与系统同步"></a>让ideaVim系统剪贴板与系统同步</h2><p>在ideavimrc文件中添加一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> clipboard=unnamedplus,unnamed</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数setTimeout的小细节</title>
    <url>/2020/03/19/article/JS%E5%87%BD%E6%95%B0setTimeout%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>首先看一个代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上的代码看起来只是简单的for循环输出i的值。但是当你运行上面代码，你会发现，竟然输出了6个6。</p>
<p>那么我们开始分析这个过程。<br>setTimeout是个计时函数，后面的0代表着0毫秒后执行。<br>我们简单的可以理解为，它是等一下才执行。那么这个等一下是多久呢。<br>我们先运行一下正常的for循环consloe一下数值i</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过测试，你会发现他正常的输出了0~5的数值。那么6怎么来的呢？<br>经过思考可以猜到。for最后一次循环，他判断5&lt;6符合条件，他就执行了后面的i++。所以for循环的值最后变成了6。<br>那么我们知道了6是for循环结束后才出现的。我们可以得出结论</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面的setTimeout他会等for循环运行完后才运行自身的代码。</p>
<p>为了解决这种尴尬的问题，我们可以使用下面两种方法来实现每次循环都正常执行setTimeout。</p>
<p>方法1:</p>
<p>在for循环内添加一个变量，来接收每次for循环的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> j = i</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法2:<br>在for里面声明变量i</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的出现</title>
    <url>/2020/05/12/article/JavaScript%E7%9A%84%E5%87%BA%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一、JavaScript的简述"><a href="#一、JavaScript的简述" class="headerlink" title="一、JavaScript的简述"></a>一、JavaScript的简述</h2><h3 id="1-JavaScript的发明者"><a href="#1-JavaScript的发明者" class="headerlink" title="1. JavaScript的发明者"></a>1. JavaScript的发明者</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/17209601958d9933~tplv-t2oaga2asx-image.image"></p>
<p>布兰登·艾克（英语：Brendan Eich，1961年7月4日－），美国程序技术专家与企业家，JavaScript主要创造者与架构师，曾任Mozilla公司的首席技术官，并曾短暂担任首席执行官。</p>
<h3 id="2-什么是JavaScript"><a href="#2-什么是JavaScript" class="headerlink" title="2. 什么是JavaScript"></a>2. 什么是JavaScript</h3><p>JavaScript（缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I&#x2F;O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。</p>
<h2 id="二、JavaScript的发展"><a href="#二、JavaScript的发展" class="headerlink" title="二、JavaScript的发展"></a>二、JavaScript的发展</h2><h3 id="1-JavaScript的出现"><a href="#1-JavaScript的出现" class="headerlink" title="1. JavaScript的出现"></a>1. JavaScript的出现</h3><ul>
<li><p>1993年 伊利诺伊大学厄巴纳-尚佩恩分校的国家超级电脑应用中心（NCSA）发表了最早流行的图形接口网页浏览器 NCSA Mosaic</p>
</li>
<li><p>1995年 Mosaic Communications公司在加州芒廷维尤成立，并开始招大量NCSA Mosaic的开发者开发Mosaic Netscape</p>
</li>
<li><p>1994年 发布第一版Mosaic Netscape 0.9网页浏览器，并在4个月占据四分之三的浏览器市场，为避免版权问题，改名为Netscape Navigator浏览器</p>
</li>
<li><p>1995年，网景招募布兰登·艾克，将Scheme嵌入到浏览器中，在5月花了10天设计出原型最初命名Mocha。在9月将Netscape Navigator 2.0的Beta版改名为LiveScript。最终在12月为了蹭“Java”热度，将名字改为了JavaScript</p>
</li>
</ul>
<h3 id="2-JScript的出现"><a href="#2-JScript的出现" class="headerlink" title="2. JScript的出现"></a>2. JScript的出现</h3><p>JavaScript在出现后再浏览器大受好评，微软紧接着在退出JScript。由于JScript是JavaScript的shii这两个版本的存在意味着没有正式的语言标准</p>
<h3 id="3-JavaScript标准化"><a href="#3-JavaScript标准化" class="headerlink" title="3. JavaScript标准化"></a>3. JavaScript标准化</h3><ul>
<li><p>1996年11月 网景向ECMA提交语言标准</p>
</li>
<li><p>1997年6月 ECMA以JavaScript语言为基础指定ECMAScript标准规范</p>
</li>
</ul>
<h2 id="三、JavaScript设计不够完善"><a href="#三、JavaScript设计不够完善" class="headerlink" title="三、JavaScript设计不够完善"></a>三、JavaScript设计不够完善</h2><ol>
<li>设计过于仓促<br>JavaScript是在作者急于给公司交差的情况下用了10天的设计出来。</li>
<li>没有先例<br>JavaScript结合了函数式编程和面向对象编程的特点，直至今日仍是使用Prototype继承的主要语言。使它没有别的设计可以参考。</li>
<li>过早的标准化<br>由于JavaScript发展过快，根本没时间调整设计</li>
</ol>
<blockquote>
<p>具体请看原文<br><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html</a></p>
</blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%E5%8E%86%E5%8F%B2">JavaScript维基百科</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">JavaScript的诞生</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">JavaScript 的10个设计缺陷</a></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript预解析</title>
    <url>/2020/05/15/article/JavaScript%E9%A2%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>JavaScript引擎运行时，分两步</p>
<ol>
<li>预解析<br>JavaScript会将 var 和 function 优先解析<ul>
<li>变量提升<br>只提升变量，不提升赋值</li>
<li>函数提升<br>只提升声明，不调用函数</li>
</ul>
</li>
<li>代码执行<br>预解析结束后，按代码从上往下执行</li>
</ol>
<blockquote>
<p>函数内部变量如果没有声明，直接赋值。则为全局变量</p>
</blockquote>
<h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> = num</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">18</span></span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    b = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">报错</span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行结果为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a </span><br><span class="line">    a = <span class="number">9</span></span><br><span class="line">    b = <span class="number">9</span></span><br><span class="line">    c = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java使用Junit4.jar进行单元测试</title>
    <url>/2021/11/07/article/Java%E4%BD%BF%E7%94%A8Junit4.jar%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="一、下载依赖包"><a href="#一、下载依赖包" class="headerlink" title="一、下载依赖包"></a>一、下载依赖包</h2><p>分别下载 <a href="https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar">junit.jar</a> 以及 <a href="https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar">hamcrest-core.jar</a></p>
<h2 id="二、添加到依赖"><a href="#二、添加到依赖" class="headerlink" title="二、添加到依赖"></a>二、添加到依赖</h2><p>在项目跟目录创建 <code>lib</code> 文件夹，并把下载的依赖包拖进去</p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3NlTK.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;ac9ddc6fdc2044c390f30f8a1eeacdbd~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>鼠标移动到依赖包上，右键选择 <code>Add as Library...</code>。依次添加 <code>junit.jar</code> 以及 <code>hamcrest-core.jar</code> 到 library 中</p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3Nclj.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;e209db9aa1e34923881791a9b08f5c95~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3UknI.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;b0bcd4ad8f62479c8495366026b9d984~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3UEHP.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;74259d3917e24dd987897f8f4620810c~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="三、设置-test-目录"><a href="#三、设置-test-目录" class="headerlink" title="三、设置 test 目录"></a>三、设置 test 目录</h2><p>在项目根目录创建 <code>test</code> 文件夹，右键设置 <code>Mark Directory as</code> —— <code>Test Sources Root</code></p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3afiT.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;0c8e70cfd49144d08cc8326bdd6439b4~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="四、创建测试类"><a href="#四、创建测试类" class="headerlink" title="四、创建测试类"></a>四、创建测试类</h2><p>随便写一个类，用于演示</p>
<p><strong>HaHa.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaHa</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHaHa</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HaHa&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">sayBye</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Bye&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Byt&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Ctrl + Shift + T</code> 快速创建 Test 代码。选择 <code>Create New Test...</code> 并选择你需要测试的方法。</p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3U5DI.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;6391ce24cfe74db2a9a090c04edebe40~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://z3.ax1x.com/2021/11/07/I3apV0.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;d0b7b3139b724792908edb8abd38e0c4~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h2 id="五、开始测试"><a href="#五、开始测试" class="headerlink" title="五、开始测试"></a>五、开始测试</h2><p><strong>HaHaTest.java</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HaHaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHaHa</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HaHa</span>().sayHaHa();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayBye</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">bye</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HaHa</span>().sayBye();</span><br><span class="line">    Assert.assertEquals(<span class="string">&quot;Byt&quot;</span>, bye);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://z3.ax1x.com/2021/11/07/I3dpyd.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;cb08824fe245433f8b0e5c471dd73a10~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac/Windows下如何使用安卓模拟器开发UniApp</title>
    <url>/2021/07/31/article/Mac%20Windows%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%BC%80%E5%8F%91UniApp/</url>
    <content><![CDATA[<h2 id="1、Mac篇"><a href="#1、Mac篇" class="headerlink" title="1、Mac篇"></a>1、Mac篇</h2><h3 id="1-1-网易MuMu"><a href="#1-1-网易MuMu" class="headerlink" title="1.1 网易MuMu"></a>1.1 网易MuMu</h3><h4 id="1-1-1-下载并安装"><a href="#1-1-1-下载并安装" class="headerlink" title="1.1.1 下载并安装"></a>1.1.1 下载并安装</h4><p><a href="https://mumu.163.com/mac/index.html">网易MuMu模拟器官网下载地址</a></p>
<h4 id="1-1-2-进入adb的目录"><a href="#1-1-2-进入adb的目录" class="headerlink" title="1.1.2 进入adb的目录"></a>1.1.2 进入adb的目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /Applications/NemuPlayer.app/Contents/MacOS</span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-连接模拟器的端口"><a href="#1-1-3-连接模拟器的端口" class="headerlink" title="1.1.3 连接模拟器的端口"></a>1.1.3 连接模拟器的端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./adb kill-server &amp;&amp; ./adb server &amp;&amp; ./adb shell</span><br></pre></td></tr></table></figure>

<h2 id="2、Windows篇"><a href="#2、Windows篇" class="headerlink" title="2、Windows篇"></a>2、Windows篇</h2><h3 id="2-1-夜神"><a href="#2-1-夜神" class="headerlink" title="2.1 夜神"></a>2.1 夜神</h3><h4 id="2-1-1-下载并安装"><a href="#2-1-1-下载并安装" class="headerlink" title="2.1.1 下载并安装"></a>2.1.1 下载并安装</h4><p><a href="https://www.yeshen.com/">https://www.yeshen.com/</a></p>
<h4 id="2-1-2-运行设置端口"><a href="#2-1-2-运行设置端口" class="headerlink" title="2.1.2 运行设置端口"></a>2.1.2 运行设置端口</h4><p>运行夜神模拟器</p>
<p>打开终端，这里使用cmder来演示</p>
<p>进入根目录的 bin 目录（<code>Nox64/bin</code>）下，查看目前设备的端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nox_adb devices</span><br></pre></td></tr></table></figure>

<p>连接对应端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nox_adb connect 127.0.0.1:你查看到的端口号</span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-打开HBuilderX，设置-adb-路径和端口"><a href="#2-1-3-打开HBuilderX，设置-adb-路径和端口" class="headerlink" title="2.1.3 打开HBuilderX，设置 adb 路径和端口"></a>2.1.3 打开HBuilderX，设置 adb 路径和端口</h4><p>打开设置</p>
<p>adb路径：夜神模拟器根目录下，bin目录中的 <strong>nox_adb.ext</strong></p>
<p>Android模拟器端口：设置你连接的端口号</p>
<p>例如：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/358cbd0aeb3b453eb72d2e1fa40ac471~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<h4 id="2-1-4-修复热更新"><a href="#2-1-4-修复热更新" class="headerlink" title="2.1.4 修复热更新"></a>2.1.4 修复热更新</h4><p>复制 HBuilderX 中的 adb 替换掉夜神模拟器中的 nox_adb</p>
<p>Hbuilder中的adb路径：<code>HBuilderX\plugins\launcher\tools\adbs</code></p>
<p>复制一份后，修改名字为 nox_adb</p>
<p>接着替换掉原本的 nox_adb 即可</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>uniapp</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装微信小助手实现多开及反撤回</title>
    <url>/2020/07/11/article/Mac%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1%E5%B0%8F%E5%8A%A9%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%BC%80%E5%8F%8A%E5%8F%8D%E6%92%A4%E5%9B%9E/</url>
    <content><![CDATA[<p>使用终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r -f WeChatExtension-ForMac &amp;&amp; git <span class="built_in">clone</span> --depth=1 https://github.com/MustangYM/WeChatExtension-ForMac &amp;&amp; <span class="built_in">cd</span> WeChatExtension-ForMac/WeChatExtension/Rely &amp;&amp; ./Install.sh</span><br></pre></td></tr></table></figure>

<p>等待安装完成即可，完成后重启微信就可以使用了。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>macos</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac微信多开以及防撤回方案</title>
    <url>/2022/04/18/article/Mac%E5%BE%AE%E4%BF%A1%E5%A4%9A%E5%BC%80%E4%BB%A5%E5%8F%8A%E9%98%B2%E6%92%A4%E5%9B%9E%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知，微信无论在 Win 还是 Mac 都是默认不支持多开的。可是我们这些将账号分为公司账号和私人账号的人（海王）。是远不能满足我们的需求。所以只能通过特殊的手段来实现我们的需求。<br>在手贱把微信升级之前，你可以直接使用 <a href="WeChatExtension-ForMac">WeChatExtension-ForMac</a> 安装一下该插件即可实现微信 + 防撤回。<br>可在昨天不小心把微信升级到了 3.4.0 后，在次安装发现打开就会弹出签名的错误。（如果你还是可以用，那么恭喜你！下面不用继续看了）。为此我经过艰苦的寻找（百度 2分钟，google 1分钟）才找到了方法。</p>
<h2 id="如何防撤回"><a href="#如何防撤回" class="headerlink" title="如何防撤回"></a>如何防撤回</h2><p>防撤回可以通过 <a href="WeChatIntercept">WeChatIntercept</a> 这个插件。我们下载下来后，直接运行里面的 install.sh 脚本自动安装（如果提示 password，那么你输入你的电脑密码即可）。提示安装好后，我们只需要重启微信即可实现防撤回。</p>
<h2 id="如何多开"><a href="#如何多开" class="headerlink" title="如何多开"></a>如何多开</h2><p>目前我找到了的方案是当你已经打开一个微信后通过命令行，输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open -n /Applications/WeChat.app/Contents/MacOS/WeChat</span><br></pre></td></tr></table></figure>

<p>即可另起一个微信进程。</p>
<h2 id="不重要的内容"><a href="#不重要的内容" class="headerlink" title="不重要的内容"></a>不重要的内容</h2><p>如果你有更好的方案，或者遇到了什么问题。可以在评论或者直接 wx 找我</p>
<ul>
<li>微信：gdgzyw  </li>
<li>WeChatExtension-ForMac的安装方法：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r -f WeChatExtension-ForMac &amp;&amp; git <span class="built_in">clone</span> --depth=1 https://github.com/MustangYM/WeChatExtension-ForMac &amp;&amp; <span class="built_in">cd</span> WeChatExtension-ForMac/WeChatExtension/Rely &amp;&amp; ./Install.sh &amp;&amp; <span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://codeload.github.com/a244573118/WeChatIntercept/zip/refs/heads/master">WeChatIntercept防撤回插件</a></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>wechat</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt3 中使用 pnpm 安装的 NuxtImg 使用会提示找不到图片</title>
    <url>/2025/06/11/article/Nuxt3%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20pnpm%20%E5%AE%89%E8%A3%85%E7%9A%84%20NuxtImg%20%E4%BD%BF%E7%94%A8%E4%BC%9A%E6%8F%90%E7%A4%BA%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="http://obsidian.easyhappy.top/avan/202506111712538.png" alt="image.png"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>在一个全新的 Nuxt 3 项目中，我打算像往常一样直接写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtImg src=&quot;/images/logo.png&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>然而页面报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/_ipx/_/images/logo.png 500 (Internal Server Error)</span><br></pre></td></tr></table></figure>

<p>猜测这一错误常见于 <strong>IPX</strong> （Nuxt 默认的本地图片处理服务）无法正常工作或缺少二进制依赖，如 sharp 等。</p>
<h2 id="问题复现与初步排查"><a href="#问题复现与初步排查" class="headerlink" title="问题复现与初步排查"></a><strong>问题复现与初步排查</strong></h2><ol>
<li><p><strong>确认官方文档</strong></p>
<p> Nuxt Image 文档并未提到需要额外配置即可本地使用。</p>
</li>
<li><p><strong>定位到 IPX</strong></p>
<p> 查看 Nuxt Image 的默认 provider，可见如果未显式配置，Nuxt 会自动启用 IPX。</p>
</li>
<li><p><strong>搜索社区反馈</strong></p>
<p> 多位开发者在 GitHub 上反馈升级或安装时出现「IPX 500」或「sharp 模块缺失」问题，且大多与包版本或二进制构建方式有关。</p>
</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><h3 id="步骤一：锁定-IPX-版本"><a href="#步骤一：锁定-IPX-版本" class="headerlink" title="步骤一：锁定 IPX 版本"></a><strong>步骤一：锁定 IPX 版本</strong></h3><p>在 package.json 中新增（或合并）以下字段，强制 pnpm 使用 ipx@^3.0.0：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pnpm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ipx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>内心OS: 估计是版本 3 已默认内置预编译好的 sharp 二进制，避免了跨平台自行编译失败的问题。</p>
<h3 id="步骤二：重新安装依赖并启动"><a href="#步骤二：重新安装依赖并启动" class="headerlink" title="步骤二：重新安装依赖并启动"></a><strong>步骤二：重新安装依赖并启动</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure>

<p>此时刷新页面，&#x2F;<em>ipx&#x2F;</em> 路径应能正确返回处理后的图片。  </p>
<h2 id="为什么-pnpm-会「漏装」或装错-IPX？"><a href="#为什么-pnpm-会「漏装」或装错-IPX？" class="headerlink" title="为什么 pnpm 会「漏装」或装错 IPX？"></a><strong>为什么 pnpm 会「漏装」或装错 IPX？</strong></h2><ul>
<li><strong>严格的依赖隔离</strong>：pnpm 以硬链接 + 独立虚拟 store 机制保存依赖，若某深层模块声明的版本范围与项目锁文件冲突，可能被解析为旧版。</li>
<li><strong>可选依赖</strong>：IPX 及其 sharp 本身属于可选依赖；当安装时遇到编译失败，pnpm 会跳过而不抛错，导致运行期才暴露 500。</li>
<li><strong>overrides 的作用</strong>：显式声明 overrides 可让 pnpm「顶置」该版本，强制一致，避免多版本并存。</li>
</ul>
<h2 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a><strong>完整代码示例</strong></h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json（节选）</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nuxt-img-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@nuxt/image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pnpm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ipx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages/index.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtImg src=&quot;/images/logo.png&quot; width=&quot;200&quot; height=&quot;200&quot; placeholder /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><ul>
<li>Nuxt 3 里 <NuxtImg> 默认依赖 IPX；IPX 依赖 sharp。 </li>
<li>当 IPX 版本不兼容或二进制缺失时，会抛出「500 – IPX Error」。  </li>
<li>在 <strong>pnpm</strong> 项目中，可通过 pnpm.overrides 强制锁定 ipx@^3.0.0，再重新安装即可快速修复。</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
        <category>nuxt</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>React使用context进行组件通信</title>
    <url>/2021/07/07/article/React%E4%BD%BF%E7%94%A8context%E8%BF%9B%E8%A1%8C%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h2><p>之前文章介绍了使用Props进行参数和函数引用的传参达到组件通信的效果。这次使用context来实现这个效果。</p>
<h2 id="2、创建组件"><a href="#2、创建组件" class="headerlink" title="2、创建组件"></a>2、创建组件</h2><p>创建 <code>Grandpa</code>、<code>Father</code>、<code>Son1</code>、<code>Son2</code>、<code>Son3</code> 组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Grandpa</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Grandpa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是Son1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Son2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Son3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grandpa</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、创建-context-对象"><a href="#3、创建-context-对象" class="headerlink" title="3、创建 context 对象"></a>3、创建 context 对象</h2><p>引入 <code>createContext</code> 函数，用于构造context对象</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="title function_">createContext</span>()</span><br></pre></td></tr></table></figure>

<p>从 <code>context</code> 中结构出 <code>Provider</code>、<code>Consumer</code> 两个组件</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>, <span class="title class_">Consumer</span> &#125; = context</span><br></pre></td></tr></table></figure>

<h2 id="4、注入数据"><a href="#4、注入数据" class="headerlink" title="4、注入数据"></a>4、注入数据</h2><p>在 App 中使用 Provider 组件进行注入，并把对应数据和方法传递下去</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;梁又文&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">    setName,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grandpa</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、子孙组件获取数据"><a href="#5、子孙组件获取数据" class="headerlink" title="5、子孙组件获取数据"></a>5、子孙组件获取数据</h2><h3 id="5-1-函数组件"><a href="#5-1-函数组件" class="headerlink" title="5.1 函数组件"></a>5.1 函数组件</h3><p>通过 <code>Consumer</code> 获取数据</p>
<p>Son1</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Son1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(&#123; name, setName &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          我是Son1，我拿到的数据是：&#123;name&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son1修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-类组件"><a href="#5-2-类组件" class="headerlink" title="5.2 类组件"></a>5.2 类组件</h3><p>通过 <code>contextType</code> 挂载 <code>context</code> 的属性</p>
<p>Son2</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = context</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, setName &#125; = <span class="variable language_">this</span>.<span class="property">context</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是Son2，我拿到的数据是：&#123;name&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son2修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-useContext-方式"><a href="#5-3-useContext-方式" class="headerlink" title="5.3 useContext 方式"></a>5.3 useContext 方式</h3><p>通过把 <code>context</code> 对象传入到 <code>useContext</code> 中，返回所有数据。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Son3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, setName, age &#125; = <span class="title function_">useContext</span>(context)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是Son1，Grandpa今年&#123;age&#125;岁了。我拿到的数据是：&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son1修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、最终代码"><a href="#6、最终代码" class="headerlink" title="6、最终代码"></a>6、最终代码</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span>, createContext, useState, useContext &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Provider</span>, <span class="title class_">Consumer</span> &#125; = context</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Consumer</span>, context &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Grandpa</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Grandpa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是 Father<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son2</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Son3</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;(&#123; name, setName &#125;) =&gt; (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          我是Son1，我拿到的数据是：&#123;name&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son1修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Consumer</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = context</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, setName &#125; = <span class="variable language_">this</span>.<span class="property">context</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是Son2，我拿到的数据是：&#123;name&#125; <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son2修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son3</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, setName, age &#125; = <span class="title function_">useContext</span>(context)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      我是Son1，Grandpa今年&#123;age&#125;岁了。我拿到的数据是：&#123;name&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setName(&#x27;我是被Son1修改的名字&#x27;)&#125;&gt;修改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">useState</span>(<span class="string">&#x27;梁又文&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">    setName,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">value</span>=<span class="string">&#123;data&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Grandpa</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React使用cra创建项目，开启装饰器</title>
    <url>/2021/08/19/article/React%E4%BD%BF%E7%94%A8cra%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%BC%80%E5%90%AF%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天使用 cra 创建了个项目。打算研究一下 rc-form 的实现思路。发现项目并未开启装饰器。并提示下面的错误。</p>
<p><code>Support for the experimental syntax &#39;decorators-legacy&#39; isn&#39;t currently enable</code></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>安装对应的依赖库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators customize-cra react-app-rewired</span><br></pre></td></tr></table></figure>

<p>接着配置一下根目录 <strong>config-overrides.js</strong> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; override, addDecoratorsLegacy &#125; = <span class="built_in">require</span>(<span class="string">&#x27;customize-cra&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">override</span>(<span class="title function_">addDecoratorsLegacy</span>())</span><br></pre></td></tr></table></figure>

<p>接着修改 <strong>package.json</strong> 的启动参数</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-app-rewired start&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>重新运行，大功告成</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何使用Hooks</title>
    <url>/2020/09/01/article/React%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hooks/</url>
    <content><![CDATA[<h2 id="一、State"><a href="#一、State" class="headerlink" title="一、State"></a>一、State</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入useState</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明State</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组第一个参数为使用的值，第二个参数为设置值的函数。useState的参数为默认值。</p>
</blockquote>
<ol start="3">
<li>使用值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>设置值、</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setValue</span>(value + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数即为对值得变更操作</p>
</blockquote>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setValue</span>(value + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add1&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h2 id="二、useReducer"><a href="#二、useReducer" class="headerlink" title="二、useReducer"></a>二、useReducer</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入useReducer</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建初始值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建所有操作类型</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> + action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;multi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> - action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;未知类型&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用useReducer，获得读写操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(action, initial)</span><br></pre></td></tr></table></figure>

<p>读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">dispath(type: &quot;add&quot;, numer: 1 )</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> + action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.<span class="property">type</span> = <span class="string">&quot;multi&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> - action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;未知类型&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseReducer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initial)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;multi&quot;, number: 3 &#125;)&#125;&gt;-3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseReducer</span></span><br></pre></td></tr></table></figure>

<h2 id="三、useContext"><a href="#三、useContext" class="headerlink" title="三、useContext"></a>三、useContext</h2><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入createContext、useContext</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建Context</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置作用域，传递你需要使用的数据</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;n,</span> <span class="attr">setN</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在作用域中的组件解构传递的数据</li>
</ol>
<p>Father</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;n, setN&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用解构出来的数据</li>
</ol>
<p>Father</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setN(n=&gt;n+1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseContext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">n</span>, <span class="attr">setN</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; n, setN &#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是爸爸&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 1)&#125;&gt;爸爸按钮+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; n, setN &#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是儿子&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n - 1)&#125;&gt;儿子按钮-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseContext</span></span><br></pre></td></tr></table></figure>

<h2 id="四、useEffect和useLayoutEffect"><a href="#四、useEffect和useLayoutEffect" class="headerlink" title="四、useEffect和useLayoutEffect"></a>四、useEffect和useLayoutEffect</h2><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>每次都执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>第一次渲染执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在某个值变化的时候执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[n])</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在页面渲染前执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState, useEffect, useLayoutEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseEffect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [display, setDisplay] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我每次都执行&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在第一次执行&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在销毁的时候执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在n变化执行&quot;</span>)</span><br><span class="line">  &#125;, [n])</span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是在页面渲染前就执行结束&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;display ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 5)&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        setDisplay(display =&gt; !display)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;消灭n</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseEffect</span></span><br></pre></td></tr></table></figure>

<h2 id="五、memo-useMemo-useCallback"><a href="#五、memo-useMemo-useCallback" class="headerlink" title="五、memo&amp;useMemo&amp;useCallback"></a>五、memo&amp;useMemo&amp;useCallback</h2><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useMemo, useState, memo, useEffect, useCallback&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>memo包住不需要重新渲染的组件函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Childer</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是孩子，我不想执行&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孩子 &#123;props.childer&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>useMemo包住防止因对象地址变化而导致的误渲染</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childClick = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [childer])</span><br></pre></td></tr></table></figure>


<h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useMemo, useState, memo, useEffect, useCallback&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseMemoAndUseCallback</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [childer, setChilder] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我变化了&quot;</span>)</span><br><span class="line">  &#125;, [n])</span><br><span class="line">  <span class="comment">// 使用useMemo阻止因为对象地址变化而重新执行</span></span><br><span class="line">  <span class="keyword">const</span> childClick = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [childer])</span><br><span class="line">  <span class="comment">// 等同于useMemo，比useMemo简单</span></span><br><span class="line">  <span class="keyword">const</span> childClick2 = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Childer</span> <span class="attr">childer</span>=<span class="string">&#123;childer&#125;</span> <span class="attr">childClick</span>=<span class="string">&#123;childClick&#125;</span> <span class="attr">childClick2</span>=<span class="string">&#123;childClick2&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 10)&#125;&gt;+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用memo阻止子组件state没改变，因父组件属性改变而重新渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Childer</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是孩子，我不想执行&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孩子 &#123;props.childer&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseMemoAndUseCallback</span></span><br></pre></td></tr></table></figure>

<h2 id="六、useRef"><a href="#六、useRef" class="headerlink" title="六、useRef"></a>六、useRef</h2><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用&#x2F;修改值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">count.<span class="property">current</span> += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">current</span> += <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第&quot;</span> + count.<span class="property">current</span> + <span class="string">&quot;执行&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 1)&#125;&gt;n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseRef</span></span><br></pre></td></tr></table></figure>

<h2 id="七、useImperativeHandle"><a href="#七、useImperativeHandle" class="headerlink" title="七、useImperativeHandle"></a>七、useImperativeHandle</h2><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在父组件创建ref</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonRef = <span class="title function_">useRef</span>()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>传递给子组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;buttonRef&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>子组件接收并对ref进行修改后返还出去</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useImperativeHandle</span>(ref, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;forwardRef, useRef, useEffect, useImperativeHandle&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoImperativeHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> buttonRef = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttonRef)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;buttonRef&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(buttonRef.current.x())&#125;&gt;按钮<span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Son</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> realRef = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">ref</span>: realRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;realRef&#125;</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoImperativeHandle</span></span><br></pre></td></tr></table></figure>

<h2 id="八、forwardRef"><a href="#八、forwardRef" class="headerlink" title="八、forwardRef"></a>八、forwardRef</h2><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建ref</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>向组件传ref</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">ChildNode</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用forwardRef接收ref</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildNode</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(ref)&#125;&gt;&#123;props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-7"><a href="#代码示例-7" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;forwardRef, useRef&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoForwardRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是本身的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">ChildNode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildNode</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(ref)&#125;&gt;&#123;props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoForwardRef</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展一、useContext-useReducer代替Redux"><a href="#拓展一、useContext-useReducer代替Redux" class="headerlink" title="拓展一、useContext&amp;useReducer代替Redux"></a>拓展一、useContext&amp;useReducer代替Redux</h2><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建Store数据仓库</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cosnt store = &#123;<span class="attr">user</span>: <span class="literal">null</span>, <span class="attr">books</span>: <span class="literal">null</span>, movies&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建reducer行为操作列表</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setUser&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">user</span>: action.<span class="property">user</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setBooks&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">books</span>: action.<span class="property">books</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setMovies&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">movies</span>: action.<span class="property">movies</span>&#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;位置类型&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Context</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建读写的API</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, store)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>定义作用域</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,</span> <span class="attr">dispatch</span>&#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">User</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Books</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Movies</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用传递的数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>对数据进行操作</li>
</ol>
<p>读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setUser&quot;</span>, <span class="attr">user</span>: 数据&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-8"><a href="#代码示例-8" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useContext, useEffect, useReducer, createContext&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据仓库</span></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">books</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">movies</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setUser&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">user</span>: action.<span class="property">user</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setBooks&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">books</span>: action.<span class="property">books</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setMovies&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">movies</span>: action.<span class="property">movies</span>&#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;位置类型&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoContextReducer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建数据读写的API</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, store)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,</span> <span class="attr">dispatch</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">User</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Books</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Movies</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/user&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setUser&quot;</span>, user&#125;)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.user ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Books</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">books</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setBooks&quot;</span>, books&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.books ? state.books.map(book =&gt; (<span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;book.id&#125;</span>&gt;</span>&#123;book.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Movies</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/movies&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">movies</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setMovies&quot;</span>, <span class="attr">movies</span>: movies&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.movies ? state.movies.map(item =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoContextReducer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path === <span class="string">&quot;/user&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;梁又文&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/books&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;我是一本好书&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;我是一本坏书&quot;</span></span><br><span class="line">        &#125;])</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/movies&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;最时间的尽头&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;八百&quot;</span></span><br><span class="line">        &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓展二、自定义hook"><a href="#拓展二、自定义hook" class="headerlink" title="拓展二、自定义hook"></a>拓展二、自定义hook</h2><h3 id="代码示例-9"><a href="#代码示例-9" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="useList"><a href="#useList" class="headerlink" title="useList"></a>useList</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (&#123;</span><br><span class="line">    <span class="attr">list</span>: list,</span><br><span class="line">    <span class="attr">setList</span>: setList</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useList</span><br></pre></td></tr></table></figure>

<h4 id="DemoCustomHook"><a href="#DemoCustomHook" class="headerlink" title="DemoCustomHook"></a>DemoCustomHook</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> useList <span class="keyword">from</span> <span class="string">&quot;./hooks/useList&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoCustomHook</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;list, setList&#125; = <span class="title function_">useList</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setList(n =&gt; n + 10)&#125;&gt;+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoCustomHook</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何实现任意组件的通信</title>
    <url>/2020/08/30/article/React%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>现在有一个家庭，他们有10w的财产。家庭成员分别有爸爸1、爸爸2。他们分别有两个孩子，儿子11、儿子12、儿子21、儿子22。现在要实现家族中每位成员花费金额时，其他成员都需要知道。</p>
<h2 id="方法一-eventHub（非单项数据流）"><a href="#方法一-eventHub（非单项数据流）" class="headerlink" title="方法一 eventHub（非单项数据流）"></a>方法一 eventHub（非单项数据流）</h2><p>找个跑腿的。在每次消费后去通知另一位成员。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 财产</span></span><br><span class="line"><span class="keyword">let</span> money = &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">100000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跑腿需要监听的事件</span></span><br><span class="line"><span class="keyword">let</span> fnLists = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> eventHub = &#123;</span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fnList = fnLists[eventName]</span><br><span class="line">    <span class="keyword">if</span> (!fnList) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fnList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      fnList[i](data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fnLists[eventName]) &#123;</span><br><span class="line">      fnLists[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    fnLists[eventName].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听别人是否花钱</span></span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">money</span>: money</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知跑腿需要花钱</span></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    money.<span class="property">amount</span> -= <span class="number">100</span></span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">// 监听别人是否花钱</span></span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">money</span>: money</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知跑腿需要花钱</span></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>)&#123;</span><br><span class="line">    money.<span class="property">amount</span> -= <span class="number">100</span></span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p><a href="https://jsbin.com/besuhof/5/edit?html,js,output">代码预览</a></p>
<p>提前跟跑腿的说明，每当son22花钱时，通知son11有人花钱了。从而更新信息。</p>
<blockquote>
<p>每个人消费跑腿都需要来回通知效率很慢。需要实现告诉跑腿的要监听谁消费了。</p>
</blockquote>
<h2 id="方法二-eventHub（单向数据流）"><a href="#方法二-eventHub（单向数据流）" class="headerlink" title="方法二 eventHub（单向数据流）"></a>方法二 eventHub（单向数据流）</h2><p>找一个管家，每次消费都去向下通知所有成员。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><p>与上次一样的代码，这里就不重复了</p>
<h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><p>与上次一样的代码，这里就不重复了</p>
<h4 id="JSX-1"><a href="#JSX-1" class="headerlink" title="JSX"></a>JSX</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 财产</span></span><br><span class="line"><span class="keyword">let</span> money = &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">100000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件中心</span></span><br><span class="line"><span class="keyword">let</span> fnLists = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> eventHub = &#123;</span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fnList = fnLists[eventName]</span><br><span class="line">    <span class="keyword">if</span> (!fnList) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fnList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      fnList[i](data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fnLists[eventName]) &#123;</span><br><span class="line">      fnLists[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    fnLists[eventName].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管家</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      money.<span class="property">amount</span> -= data</span><br><span class="line">      <span class="title function_">render</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p><a href="https://jsbin.com/besuhof/6/edit?html,js,output">预览地址</a></p>
<p>全部数据统一由管家来下发更新</p>
<h2 id="方法三-redux（单向数据流）"><a href="#方法三-redux（单向数据流）" class="headerlink" title="方法三 redux（单向数据流）"></a>方法三 redux（单向数据流）</h2><p>与eventHub的思路一样</p>
<h3 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/redux/4.0.5/redux.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h3><p>与上次一样的代码，这里就不重复了</p>
<h3 id="JSX-2"><a href="#JSX-2" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux</span></span><br><span class="line"><span class="keyword">let</span> createStore = <span class="title class_">Redux</span>.<span class="property">createStore</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">reducers</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  state = state || &#123;</span><br><span class="line">    <span class="attr">money</span>: &#123;<span class="attr">amount</span>: <span class="number">100000</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我想花钱&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">money</span>: &#123;</span><br><span class="line">          <span class="attr">amount</span>: state.<span class="property">money</span>.<span class="property">amount</span> - action.<span class="property">payload</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.props.store.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.props.store.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;我想花钱&quot;</span>, <span class="attr">payload</span>: <span class="number">100</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store.getState()&#125;/</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line">store.<span class="title function_">subscribe</span>(render)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何实现父子组件通信</title>
    <url>/2020/08/28/article/React%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h2><p>在父组件显示数值，在子组件有个按钮点击后修改父组件的值。</p>
<h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Father</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">number</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.number&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">change</span>=<span class="string">&#123;this.changeValue.bind(this)&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.change&#125;</span>&gt;</span>更改值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><p>在父组件声明一个函数，用于修改父组件中的值。<br>将此函数通过子组件的props进行传参</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Son</span> change=&#123;<span class="variable language_">this</span>.<span class="property">changeValue</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>子组件接收后，即可调用外部函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">change</span>&#125;&gt;更改值&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h2 id="四、代码效果预览"><a href="#四、代码效果预览" class="headerlink" title="四、代码效果预览"></a>四、代码效果预览</h2><p><a href="https://jsbin.com/fubefeg/11/edit?html,js,output">预览链接</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React的CSS方案</title>
    <url>/2020/09/01/article/React%E7%9A%84CSS%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="一、方案选择"><a href="#一、方案选择" class="headerlink" title="一、方案选择"></a>一、方案选择</h2><p>React的css in js有很多种，这里推荐按照start的数量进行选择。如果有一些特别合自己心意的除外。以下是一个搜集方案的网址</p>
<p><a href="https://github.com/MicheleBertoli/css-in-js">点我跳转</a></p>
<h2 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h2><h3 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h3><p><a href="https://styled-components.com/">官方文档</a></p>
<ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义标签</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Div1</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    width: 100px;</span></span><br><span class="line"><span class="string">    height: 100px;</span></span><br><span class="line"><span class="string">    border: 1px soild red;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>直接使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是一个styled标签</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Div1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="emotion"><a href="#emotion" class="headerlink" title="emotion"></a>emotion</h3><p><a href="https://emotion.sh/docs/introduction">官方文档</a></p>
<ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @emotion/core</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@jsx</span> jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123;jsx&#125; <span class="keyword">from</span> <span class="string">&quot;@emotion/core&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>直接在jsx中使用css属性使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> <span class="attr">1px</span> <span class="attr">soild</span> <span class="attr">red</span>, <span class="attr">width:</span> <span class="attr">100</span>, <span class="attr">height:</span> <span class="attr">100</span> &#125;&#125;&gt;</span>我是emotion方案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>css-in-js</tag>
      </tags>
  </entry>
  <entry>
    <title>React的mobx使用方式</title>
    <url>/2020/09/03/article/React%E7%9A%84mobx%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、创建文件"><a href="#一、创建文件" class="headerlink" title="一、创建文件"></a>一、创建文件</h2><p>stores<br>—– auth.js 例子文件<br>—– index.js 总入口</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mobx</span><br><span class="line">yarn add mobx-react</span><br></pre></td></tr></table></figure>

<h2 id="三、书写相应代码"><a href="#三、书写相应代码" class="headerlink" title="三、书写相应代码"></a>三、书写相应代码</h2><h3 id="auth-js"><a href="#auth-js" class="headerlink" title="auth.js"></a>auth.js</h3><ol>
<li>import相应的文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明class类，并导出</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthStore</span> &#123;</span><br><span class="line">    @observable 变量名 = 值</span><br><span class="line">    @boservable values = &#123;</span><br><span class="line">        username = <span class="string">&quot;梁又文&quot;</span></span><br><span class="line">        sex = <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @action 方法名(参数) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(参数)</span><br><span class="line">    &#125;</span><br><span class="line">    @action <span class="title function_">setName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">values</span>.<span class="property">username</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">AuthSotre</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ol>
<li>import相应文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; 类名 &#125; <span class="keyword">from</span> <span class="string">&quot;../stores/文件名&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthSotre</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../stores/auth&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建Context对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> context = <span class="title function_">createContext</span>(&#123;</span><br><span class="line">    定义方法名: <span class="keyword">new</span> 类名(),</span><br><span class="line">    <span class="attr">authStore</span>: <span class="keyword">new</span> <span class="title class_">AuthStore</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将Context对象全局导出</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useStores</span> = (<span class="params"></span>) =&gt; <span class="title function_">useContext</span>(context)</span><br></pre></td></tr></table></figure>

<h2 id="四、配置package-json"><a href="#四、配置package-json" class="headerlink" title="四、配置package.json"></a>四、配置package.json</h2><ol>
<li>将react隐藏的webpack暴露出来，释放之前请先提交代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn eject</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装插件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改package.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;legacy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、在组件中进行使用"><a href="#五、在组件中进行使用" class="headerlink" title="五、在组件中进行使用"></a>五、在组件中进行使用</h2><ol>
<li>import相应文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStores &#125; <span class="keyword">from</span> <span class="string">&quot;../stores&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用observer监控组件，并解构我们需要的对象出来并使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = <span class="title function_">observer</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">AuthStore</span> &#125; = <span class="title function_">useStores</span>()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Demo组件<span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解构后我们就可以使用该对象的属性及方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = <span class="title function_">observer</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">AuthStore</span> &#125; = <span class="title function_">useStores</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title class_">AuthStore</span>.<span class="title function_">setName</span>(<span class="string">&quot;改名字后的梁又文&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Demo组件，我的名字叫&#123; AuthStore.values.username &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeName&#125;</span>&gt;</span>改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>mobx</tag>
      </tags>
  </entry>
  <entry>
    <title>React的生命周期概括</title>
    <url>/2020/09/01/article/React%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<h2 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h2><h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><blockquote>
<p>设置默认的Props</p>
</blockquote>
<h3 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h3><blockquote>
<p>可以访问this.props</p>
</blockquote>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><blockquote>
<p>挂载页面前，在渲染前调用。此时还可以修改state</p>
</blockquote>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote>
<p>渲染页面，此时已经不能更改state</p>
</blockquote>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><blockquote>
<p>挂在页面后调用</p>
</blockquote>
<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillUpdate</span>(nextPorps, nextState)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>组件数据更新时调用</p>
</blockquote>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(nextPorps, nextState)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当props或state更新时触发，用来判断数值是否发生变化，并返回布尔值。true为进行更新，false为阻止更新</p>
</blockquote>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><blockquote>
<p>组件跟新完毕后调用，此时可以修改state值</p>
</blockquote>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><blockquote>
<p>组件卸载时调用，一般用于清除事件监听和定时器</p>
</blockquote>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillReceiveProps</span>(nextProps)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当外部传来的props发生变化时触发，它接收变更后的props值可供使用</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode的Beautify插件格式化ES6语法出现换行</title>
    <url>/2020/08/17/article/VSCode%E7%9A%84Beautify%E6%8F%92%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%96ES6%E8%AF%AD%E6%B3%95%E5%87%BA%E7%8E%B0%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>在settings(JSON)中添加此配置即刻，之前换行的需要手动删除回车</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;beautify.config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;brace_style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;collapse,preserve-inline&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode中使用Cmder及一些简单命令</title>
    <url>/2020/02/12/article/VScode%E4%B8%AD%E4%BD%BF%E7%94%A8Cmder%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ol>
<li>安装了VScode</li>
<li>安装了Cmder<br>要是没有安装，可以看前两篇文章<br><a href="https://www.jianshu.com/p/ebb9af006e25">前端小白-简单配置VScode及常用快捷键</a><br><a href="https://www.jianshu.com/p/050943776aea">前端小白-Windows下安装Cmder及配置&amp;设置系统右键菜单</a></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>打开VScode，使用快捷键 <code>Ctrl + Shift + P</code> 输入“settings json”点击“首选项：打开设置（json）”，注意这里是没有“默认”两个字。<br><img src="http://obsidian.easyhappy.top/avan/202506291721368.png" alt="image.png"></p>
<p>随便找一行（只要不是最后一行）的逗号后面回车，输入下面代码（<a href="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration#use-cmder-embedded-git-in-vscode">原贴</a>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;git.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]\\vendor\\git-for-windows\\cmd\\git.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]\\vendor\\git-for-windows\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<p>注意里面的[cmder_root]换成你Cmder的根目录路径，并且将单斜杠改为双斜杠。如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;git.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programme\\cmder\\vendor\\git-for-windows\\cmd\\git.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programme\\cmder\\vendor\\git-for-windows\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<p><img src="http://obsidian.easyhappy.top/avan/202506291722740.png" alt="image.png"></p>
<p>然后 <code>Ctrl + S</code> 保存退出，关闭终端重新打开，即可<br><img src="http://obsidian.easyhappy.top/avan/202506291723112.png" alt="image.png"></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode的Git本地仓库的配置</title>
    <url>/2020/02/12/article/VScode%E7%9A%84Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ul>
<li>前置条件</li>
<li>配置命令</li>
<li>一些常用指令</li>
</ul>
<h2 id="一、前置条件"><a href="#一、前置条件" class="headerlink" title="一、前置条件"></a>一、前置条件</h2><ol>
<li>安装了VScode，并且配配置了环境变量</li>
<li>安装了git环境</li>
</ol>
<h2 id="二、配置指令"><a href="#二、配置指令" class="headerlink" title="二、配置指令"></a>二、配置指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;code --wait&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>



<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name Layouwen</span><br><span class="line">git config --global user.email Layouwen@gmail.com</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;code --wait&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>



<p>以上六条命令运行后，输入 <code>git config --global --list</code> 查看配置有没有输错。<br><img src="http://obsidian.easyhappy.top/avan/202506291903853.png" alt="image.png"></p>
<p>配置好后，就可以使用git的指令了</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 初始化创建一个.git目录</span><br><span class="line">git inte  </span><br><span class="line"></span><br><span class="line">// 添加需要备份的文件</span><br><span class="line">git add .  </span><br><span class="line"></span><br><span class="line">// 开始备份</span><br><span class="line">git commit -m &quot;备注&quot;  </span><br><span class="line"></span><br><span class="line">// 查看备份记录</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">// 回滚之前版本</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>博客</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3初体验（1）</title>
    <url>/2020/10/05/article/Vue3%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1、Vite简单操作"><a href="#1、Vite简单操作" class="headerlink" title="1、Vite简单操作"></a>1、Vite简单操作</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add create-vite-app@1.18.0</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>文档的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite-app 项目名</span><br><span class="line">yarn create vite-app 项目名</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">全局安装后</span><br><span class="line">cva 项目名</span><br><span class="line">或</span><br><span class="line">npx create-vite-app 项目名</span><br></pre></td></tr></table></figure>

<h2 id="2、Vue3与Vue2的区别"><a href="#2、Vue3与Vue2的区别" class="headerlink" title="2、Vue3与Vue2的区别"></a>2、Vue3与Vue2的区别</h2><ul>
<li>Vue3的Template支持多个跟标签，Vue2不支持</li>
<li>Vue3有createApp()，而Vue2是new Vue()</li>
<li>createApp(组件)，new Vue({template,render})</li>
</ul>
<h2 id="3、Vue-router-4"><a href="#3、Vue-router-4" class="headerlink" title="3、Vue-router 4"></a>3、Vue-router 4</h2><h3 id="3-1-查看所有版本号"><a href="#3-1-查看所有版本号" class="headerlink" title="3.1 查看所有版本号"></a>3.1 查看所有版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm info vue-router versions</span><br></pre></td></tr></table></figure>

<h3 id="3-2-安装vue-router-4"><a href="#3-2-安装vue-router-4" class="headerlink" title="3.2 安装vue-router 4"></a>3.2 安装vue-router 4</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@4.0.0-beta.3</span><br></pre></td></tr></table></figure>

<h3 id="3-3-初始化vue-router"><a href="#3-3-初始化vue-router" class="headerlink" title="3.3 初始化vue-router"></a>3.3 初始化vue-router</h3><h4 id="新建history对象"><a href="#新建history对象" class="headerlink" title="新建history对象"></a>新建history对象</h4><p>在main.ts中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createWebHashHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = <span class="title function_">createWebHashHistory</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="新建router对象"><a href="#新建router对象" class="headerlink" title="新建router对象"></a>新建router对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  history,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Easyw</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="app-use-router"><a href="#app-use-router" class="headerlink" title="app.use(router)"></a>app.use(router)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 挂载组件</span></span><br></pre></td></tr></table></figure>

<h4 id="在App-vue中添加router-view"><a href="#在App-vue中添加router-view" class="headerlink" title="在App.vue中添加router-view"></a>在App.vue中添加router-view</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在routers中添加其他测试路由"><a href="#在routers中添加其他测试路由" class="headerlink" title="在routers中添加其他测试路由"></a>在routers中添加其他测试路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routers</span>: [&#123;</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Easyw</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Test</span>&#125;,</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="在App-vue中添加router-link"><a href="#在App-vue中添加router-link" class="headerlink" title="在App.vue中添加router-link"></a>在App.vue中添加router-link</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Easyw<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/test&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-添加子路由"><a href="#3-4-添加子路由" class="headerlink" title="3.4 添加子路由"></a>3.4 添加子路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="title function_">createWebHashHistory</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  history,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/doc&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Doc</span>, <span class="attr">children</span>: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;switch&#x27;</span>, <span class="attr">component</span>: <span class="title class_">SwitchDemo</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;switch&#x27;</span>, <span class="attr">component</span>: <span class="title class_">SwitchDemo</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-5-路由切换时进行操作"><a href="#3-5-路由切换时进行操作" class="headerlink" title="3.5 路由切换时进行操作"></a>3.5 路由切换时进行操作</h3><p>先导入你的router文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4、provide和inject"><a href="#4、provide和inject" class="headerlink" title="4、provide和inject"></a>4、provide和inject</h2><h3 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1 实现思路"></a>4.1 实现思路</h3><p>在最外层的页面中，定义provide变量。然后在子组件中使用inject可以及时拿到该变量。</p>
<h2 id="4-2-使用步骤"><a href="#4-2-使用步骤" class="headerlink" title="4.2 使用步骤"></a>4.2 使用步骤</h2><p> 在最外层声明<br> App.vue<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line">// 导入相应内容</span><br><span class="line">import &#123;provide, ref&#125; from &#x27;vue</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 使用ref设置默认值</span><br><span class="line">    const asideVisible = ref(false)</span><br><span class="line">    // 使用provide设置名字以及它对应的值，供子组件访问其数值</span><br><span class="line">    provide(&#x27;asideVisible&#x27;, asideVisible)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>子组件.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入相应内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;inject, <span class="title class_">Ref</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用inject获取名为asideVisible的provide</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> asideVisible = inject&lt;<span class="title class_">Ref</span>&lt;boolean&gt;&gt;(<span class="string">&#x27;asideVisible&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、props外部传参"><a href="#5、props外部传参" class="headerlink" title="5、props外部传参"></a>5、props外部传参</h2><h3 id="5-1-实现思路"><a href="#5-1-实现思路" class="headerlink" title="5.1 实现思路"></a>5.1 实现思路</h3><p>在外部定义一个需要传参的属性名，后面带上需要传递的参数。在子组件中使用props接受该参数。如果需要修改使用context.$emit和$event进行数据的修改。</p>
<h3 id="5-2-使用步骤"><a href="#5-2-使用步骤" class="headerlink" title="5.2 使用步骤"></a>5.2 使用步骤</h3><h4 id="外部组件"><a href="#外部组件" class="headerlink" title="外部组件"></a>外部组件</h4><p>定义属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传递参数，并定义事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Switch</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">update:value</span>=<span class="string">&quot;value = $event&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><p>接受参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="title class_">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">modify</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    context.$emit(<span class="string">&#x27;update:value&#x27;</span>, !props.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-使用v-model简化"><a href="#5-3-使用v-model简化" class="headerlink" title="5.3 使用v-model简化"></a>5.3 使用v-model简化</h3><p>删除外部事件名，使用v-model代替</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Switch</span> <span class="attr">v-model:value</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果使用v-model，子组件内部的触发事件名必须为 <code>update:外部定义的参数名</code></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的.sync修饰符的理解</title>
    <url>/2020/03/22/article/Vue%E4%B8%AD%E7%9A%84.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>准备2个文件：Main.vue、Child.vue</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="- 代码"></a>- 代码</h3><p>Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;border&quot;&gt;</span><br><span class="line">    总金额：&#123;&#123;total&#125;&#125; 元</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Child :money=&quot;total&quot; v-on:update:money=&quot;total = $event&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; total: 10000 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child: Child &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.border &#123;</span><br><span class="line">  border: 3px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Child.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;$emit(&#x27;update:money&#x27;, money-100)&quot;&gt;</span><br><span class="line">      &lt;span&gt;花钱&lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;money&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.child &#123;</span><br><span class="line">  border: 3px solid pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>Main.vue用外部表示</p>
<p>Child.vue用内部表示</p>
<p><code>外部</code> 将total的值，赋值给money，然后 <code>内部</code> 通过props接收了money的值。当button触发click时，会使用$emit将money-100发送给 <code>外部</code> 。接着 <code>外部</code> 通过v-on接收了数据，并将money-100的结果，赋值给total。然后将total的值显示在div标签中。从而实现对数据的修改。</p>
<h3 id="sync修饰符的出现"><a href="#sync修饰符的出现" class="headerlink" title=".sync修饰符的出现"></a>.sync修饰符的出现</h3><p>尤雨溪发现这种操作挺常用的，就为这种行为进行了一个简化。</p>
<p>将 <code>&lt;Child :money=&quot;total&quot; v-on:update:money=&quot;total = $event&quot;/&gt;</code> 简化为 <code>&lt;Child :money.sync=&quot;total&quot;&gt;</code> 通过使用.sync修饰符来实现上面一整局话的效果。</p>
<p>Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;border&quot;&gt;</span><br><span class="line">    总金额：&#123;&#123;total&#125;&#125; 元</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Child :money.sync=&quot;total&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; total: 5000 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child: Child &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.border &#123;</span><br><span class="line">  border: 3px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p>.sync简单来说就是，监听是否有人修改本地的数据，如果有的话就对本地数据进行一个修改。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue简化版真实DOM转虚拟DOM</title>
    <url>/2021/03/18/article/Vue%E7%AE%80%E5%8C%96%E7%89%88%E7%9C%9F%E5%AE%9EDOM%E8%BD%AC%E8%99%9A%E6%8B%9FDOM/</url>
    <content><![CDATA[<h2 id="1、大致思路"><a href="#1、大致思路" class="headerlink" title="1、大致思路"></a>1、大致思路</h2><p>获取#app根节点，创建VNode类用于创建虚拟DOM，创建vDom函数，用于生成虚拟DOM对象。根据元素的 nodeType 判断类型，对真实DOM的参数进行处理创建虚拟DOM。对每个元素的 childNodes 进行遍历，递归的进行 vDom 的创建。</p>
<h2 id="2、代码实现"><a href="#2、代码实现" class="headerlink" title="2、代码实现"></a>2、代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">obj</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(option.<span class="property">el</span>)</span><br><span class="line">    <span class="keyword">let</span> <span class="variable constant_">AST</span> = <span class="title function_">vDom</span>(<span class="variable language_">this</span>.<span class="property">obj</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">AST</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VNode</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>, option)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">appendChild</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">push</span>(node)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">vDom</span>(<span class="params">node</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> nodeType = node.<span class="property">nodeType</span></span><br><span class="line">  <span class="keyword">let</span> _vnode = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">if</span> (nodeType === <span class="number">1</span>) &#123; <span class="comment">// 元素节点</span></span><br><span class="line">    <span class="keyword">let</span> props = node.<span class="property">attributes</span> <span class="comment">// 获取元素的属性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> property = &#123;&#125; <span class="comment">// 定义一个空的对象，用于保存精简后的属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.<span class="property">length</span>; i++) &#123; <span class="comment">// 处理属性</span></span><br><span class="line">      property[props[i].<span class="property">name</span>] = props[i].<span class="property">nodeValue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将处理好的数据，创建虚拟DOM</span></span><br><span class="line">    _vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(&#123;</span><br><span class="line">      <span class="attr">tagName</span>: node.<span class="property">nodeName</span>,</span><br><span class="line">      <span class="attr">props</span>: property,</span><br><span class="line">      <span class="attr">type</span>: nodeType</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> children = node.<span class="property">childNodes</span> <span class="comment">// 获取所有子节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="comment">// 遍历循环子节点，只对 元素节点 和 长度大于 1 的节点进行处理</span></span><br><span class="line">      <span class="keyword">if</span> (children[i].<span class="property">nodeType</span> === <span class="number">1</span> || children[i].<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        _vnode.<span class="title function_">appendChild</span>(<span class="title function_">vDom</span>(children[i]))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeType === <span class="number">3</span>) &#123; <span class="comment">// 文本节点</span></span><br><span class="line">    _vnode = <span class="keyword">new</span> <span class="title class_">VNode</span>(&#123;</span><br><span class="line">      <span class="attr">type</span>: nodeType,</span><br><span class="line">      <span class="attr">value</span>: node.<span class="property">nodeValue</span>.<span class="title function_">trim</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _vnode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>vdom</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue自定义指令、Mixin、Extends、Provide&amp;Inject</title>
    <url>/2020/12/21/article/Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4%E3%80%81Mixin%E3%80%81Extends%E3%80%81Provide&amp;Inject/</url>
    <content><![CDATA[<h2 id="一、自定义指令"><a href="#一、自定义指令" class="headerlink" title="一、自定义指令"></a>一、自定义指令</h2><h3 id="1-1-全局指令"><a href="#1-1-全局指令" class="headerlink" title="1.1 全局指令"></a>1.1 全局指令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;指令名&#x27;</span>, directiveOptions)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-局部指令"><a href="#1-2-局部指令" class="headerlink" title="1.2 局部指令"></a>1.2 局部指令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;指令名&#x27;</span>: directiveOptions</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-directiveOptions的属性"><a href="#1-3-directiveOptions的属性" class="headerlink" title="1.3 directiveOptions的属性"></a>1.3 directiveOptions的属性</h3><ul>
<li>bind(el, info, vnode, oldVnode) —— 类似于 created</li>
<li>inserted(el, info, vnode, oldVnode) —— 类似于 mounted</li>
<li>update(el, info, vnode, oldVnode) —— 类似于 updated</li>
<li>componentUpdated(el, info, vnode, oldVnode) —— 基本上用不到</li>
<li>unbind(el, info, vnode, oldVnode) —— 类似于 destroyed</li>
</ul>
<h3 id="1-4-使用方式"><a href="#1-4-使用方式" class="headerlink" title="1.4 使用方式"></a>1.4 使用方式</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-指令名</span>=<span class="string">&quot;参数&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-代码示例，模拟v-on"><a href="#1-5-代码示例，模拟v-on" class="headerlink" title="1.5 代码示例，模拟v-on"></a>1.5 代码示例，模拟v-on</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">directives</span>: </span><br><span class="line">    <span class="string">&#x27;on2&#x27;</span>: &#123;</span><br><span class="line">      <span class="title function_">inserted</span>(<span class="params">el, info</span>)&#123;</span><br><span class="line">        el.<span class="title function_">addEventListener</span>(info.<span class="property">arg</span>, info.<span class="property">value</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">unbind</span>(<span class="params">el, info</span>)&#123;</span><br><span class="line">        el.<span class="title function_">removeEventListener</span>(info.<span class="property">arg</span>, info.<span class="property">value</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;测试&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on2:click</span>=<span class="string">&quot;fn&quot;</span>&gt;</span>我是假的v-on<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-函数简写"><a href="#1-6-函数简写" class="headerlink" title="1.6 函数简写"></a>1.6 函数简写</h3><p>如果 <code>bind</code> 和 <code>update</code> 的内容一致时，并不关心其他钩子，可以使用此简写。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="function">(<span class="params">el, binding</span>)=&gt;</span>&#123;</span><br><span class="line">  el.<span class="property">style</span>.<span class="property">backgroundColor</span> = binging.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="二、Mixin混入"><a href="#二、Mixin混入" class="headerlink" title="二、Mixin混入"></a>二、Mixin混入</h2><p>需要混入的内容 <code>mixins/test.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&#x27;我是测试的内容&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">onSay</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是测试的生面周期钩子&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要混入的文件 <code>Demo.vue</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;../mixins/test.js&#x27;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [test]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>混入说白了就是复制粘贴</p>
</blockquote>
<h2 id="三、Extends继承、拓展"><a href="#三、Extends继承、拓展" class="headerlink" title="三、Extends继承、拓展"></a>三、Extends继承、拓展</h2><p>需要继承的文件 DemoVue.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;../mixins/test.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DemoVue</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [test]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>需要使用该继承的地方</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">DemoVue</span> <span class="keyword">from</span> <span class="string">&#x27;../DemoVue.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">extends</span>: <span class="title class_">DemoVue</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DemoVue</span>(&#123;</span><br><span class="line">  构造选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="四、Provide-Inject"><a href="#四、Provide-Inject" class="headerlink" title="四、Provide &amp; Inject"></a>四、Provide &amp; Inject</h2><p>使用 <code>provide</code> 将属性暴露出去</p>
<p>Demo1.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">project</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="variable language_">this</span>.<span class="property">color</span>,</span><br><span class="line">      <span class="attr">changeColor</span>: <span class="variable language_">this</span>.<span class="property">changeColor</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>其他组件就可以使用 <code>inject</code> 获取暴露出来的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;color&#x27;</span>, <span class="string">&#x27;changeColor&#x27;</span>],</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">showColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">changeColor</span>()</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack loader 和 Webpack plugin 区别</title>
    <url>/2020/03/17/article/Webpack%20loader%20%E5%92%8C%20Webpack%20plugin%20%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>思路</li>
<li>回答</li>
</ul>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p><font style="color:#333333;">所有问两个的区别都是，英文翻译成中文+对翻译的解释+举例子</font></p>
<p><font style="color:#333333;"></font></p>
<h2 id="二、回答"><a href="#二、回答" class="headerlink" title="二、回答"></a>二、回答</h2><h3 id="将英文翻译"><a href="#将英文翻译" class="headerlink" title="- 将英文翻译"></a>- 将英文翻译</h3><p>loader是一个加载器</p>
<p>plugin是一个插件</p>
<h3 id="对翻译解释"><a href="#对翻译解释" class="headerlink" title="- 对翻译解释"></a>- 对翻译解释</h3><ol>
<li><p>loader 加载器 是用来用来load一个个文件的，比如说：<br>babel loader 用来加载高级的js，变成低版本浏览器支持的js文件<br>style loader 和 css loader 是用来加载 css，变成页面中style标签<br>还可以加载图片文件，对图片文件进行一些优化</p>
</li>
<li><p>插件 是用来加强功能，比如说：<br>HtmlWebpackPlugin 用来单独自动生成 html页面，这个插件可以自己指定一个模板，根据模板内容来进行生成<br>MiniCssExtractPlugin 用来将loader加载器 加载的style标签单独提取出来，变成一个css文件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Web安全常见基本知识</title>
    <url>/2022/03/08/article/Web%E5%AE%89%E5%85%A8%E5%B8%B8%E8%A7%81%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="1、XSS"><a href="#1、XSS" class="headerlink" title="1、XSS"></a>1、XSS</h2><p>跨站式脚本攻击。Cross-Site Scripting。因为与 CSS 重名所以变更为 XSS。</p>
<h3 id="反射性"><a href="#反射性" class="headerlink" title="反射性"></a>反射性</h3><p>通过在传参处植入代码，实现数据的传输。</p>
<h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>借助存储能力，植入恶意代码。当用户读取该输入时，如果是直接运行到页面。就会把恶意脚本一并执行。</p>
<h3 id="常见危害"><a href="#常见危害" class="headerlink" title="常见危害"></a>常见危害</h3><ul>
<li>获取页面数据</li>
<li>获取Cookies</li>
<li>劫持前端逻辑</li>
<li>发送请求</li>
<li>偷取网页数据</li>
<li>偷取用户信息</li>
<li>偷取用户的登录态</li>
<li>欺骗用户</li>
</ul>
<h3 id="防范方案"><a href="#防范方案" class="headerlink" title="防范方案"></a>防范方案</h3><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>通过添加 header 来禁止 XSS 过滤</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">ctx.set(&#x27;X-XSS-Protection&#x27;, 0)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>0 禁止<br>1 启动（默认）</p>
</blockquote>
<h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p>内容安全策略 (CSP, Content Security Policy)。建立白名单，告诉浏览器哪些外部资源可以加载和执行。</p>
<p>只允许加载本站资源</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>default-src &#x27;self&#x27;</span><br></pre></td></tr></table></figure>

<p>只允许加载 HTTPS 协议图片</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>img-src https://*</span><br></pre></td></tr></table></figure>

<p>不允许加载任何来源框架</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>child-src &#x27;none&#x27;</span><br></pre></td></tr></table></figure>

<h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><p>将用户所以敏感字符串，全部替换成转义字符。</p>
<p>安装 xss 依赖。使用 <code>xss(&#39;&lt;script&gt;alert(&#39;layouwen&#39;)&lt;/script&gt;&#39;)</code> 函数转义。</p>
<h4 id="HttpOnly-Cookie"><a href="#HttpOnly-Cookie" class="headerlink" title="HttpOnly Cookie"></a>HttpOnly Cookie</h4><p>设置请求头，不允许 js 直接获取 cookie。防止 XSS 攻击后获取信息。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">response.addHeader(&#x27;Set-Cookie&#x27;, &#x27;name=layouwen; Path=/; HttpOnly&#x27;)</span><br></pre></td></tr></table></figure>

<h2 id="2、CSRF"><a href="#2、CSRF" class="headerlink" title="2、CSRF"></a>2、CSRF</h2><p>CSRF(Cross Site Request Forgery)，跨站请求伪造。</p>
<p>通过特殊方式，诱导我们在恶意网址中请求我们目标地址。会把我们的 cookie 一并携带。如果 hack 对我们请求参数做了手脚，则会伪造身份进行操作。</p>
<h3 id="常见危害-1"><a href="#常见危害-1" class="headerlink" title="常见危害"></a>常见危害</h3><ul>
<li>利用用户登录态</li>
<li>伪造业务请求</li>
<li>冒充用户发帖</li>
</ul>
<h3 id="防范方案-1"><a href="#防范方案-1" class="headerlink" title="防范方案"></a>防范方案</h3><ol>
<li>禁止第三方网站带 Cookie</li>
<li>Referer Check</li>
</ol>
<p>检查请求方，是否是我们白名单</p>
<ol start="3">
<li>短信 &#x2F; 邮箱 &#x2F; 滑动验证码</li>
</ol>
<h2 id="3、clickjacking"><a href="#3、clickjacking" class="headerlink" title="3、clickjacking"></a>3、clickjacking</h2><p>点击劫持，通过嵌入iframe并通过某种方式隐藏。欺骗用户点击按钮发送信息。</p>
<h3 id="防范方案-2"><a href="#防范方案-2" class="headerlink" title="防范方案"></a>防范方案</h3><h4 id="X-FRAME-OPTIONS"><a href="#X-FRAME-OPTIONS" class="headerlink" title="X-FRAME-OPTIONS"></a>X-FRAME-OPTIONS</h4><p>设置请求头，不允许 iframe 嵌入。</p>
<ul>
<li>DENY 不允许</li>
<li>SAMEORIGIN 同域名允许</li>
<li>ALLOW-FROM 允许指定来源</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">ctx.set(&#x27;X-FRAME-OPTIONS&#x27;, &#x27;DENY&#x27;)</span><br></pre></td></tr></table></figure>

<h4 id="js判断"><a href="#js判断" class="headerlink" title="js判断"></a>js判断</h4><p>通过 js 脚本，判断网站是否被嵌套。如果嵌套了就把内容清空隐藏。</p>
<h2 id="4、SQL注入"><a href="#4、SQL注入" class="headerlink" title="4、SQL注入"></a>4、SQL注入</h2><p>通过组装条件，使连接 sql 查询时。满足不应该满足的条件，从而获取数据。</p>
<h3 id="防御方案"><a href="#防御方案" class="headerlink" title="防御方案"></a>防御方案</h3><p>使用库，将 sql 语句进行转义并处理后执行。</p>
<h2 id="5、OS命令注入"><a href="#5、OS命令注入" class="headerlink" title="5、OS命令注入"></a>5、OS命令注入</h2><p>与 SQL 注入类似，都是组装命令从而执行恶意内容。</p>
<h2 id="6、请求劫持"><a href="#6、请求劫持" class="headerlink" title="6、请求劫持"></a>6、请求劫持</h2><h3 id="DNS劫持"><a href="#DNS劫持" class="headerlink" title="DNS劫持"></a>DNS劫持</h3><p>在 DNS 解析的时候，引导用户访问错误的结果。</p>
<h3 id="HTTP劫持"><a href="#HTTP劫持" class="headerlink" title="HTTP劫持"></a>HTTP劫持</h3><p>这个最简单的方法是升级 https</p>
<h2 id="7、常见攻击方式"><a href="#7、常见攻击方式" class="headerlink" title="7、常见攻击方式"></a>7、常见攻击方式</h2><h3 id="SYN-Flood"><a href="#SYN-Flood" class="headerlink" title="SYN Flood"></a>SYN Flood</h3><p>我们都知道 TCP 有三次握手。通过大量的连接，每次连接都不完成三次，时TCP连接处于等待下一次握手的状态。达到耗尽目标资源。</p>
<h3 id="HTTP-Flood"><a href="#HTTP-Flood" class="headerlink" title="HTTP Flood"></a>HTTP Flood</h3><p>通过大量的访问，导致服务器处理不过来瘫痪。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>web安全</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Web性能优化的常见技巧</title>
    <url>/2020/12/21/article/Web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84%E5%B8%B8%E8%A7%81%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="1、DNS服务加速或配置hosts"><a href="#1、DNS服务加速或配置hosts" class="headerlink" title="1、DNS服务加速或配置hosts"></a>1、DNS服务加速或配置hosts</h3><h3 id="2、keep-alive"><a href="#2、keep-alive" class="headerlink" title="2、keep-alive"></a>2、keep-alive</h3><p>保持连接，使其复用</p>
<h3 id="3、SQL优化"><a href="#3、SQL优化" class="headerlink" title="3、SQL优化"></a>3、SQL优化</h3><p>后端优化sql语句的查询速度，使其更快的返回给前端数据</p>
<h3 id="4、提高server带宽"><a href="#4、提高server带宽" class="headerlink" title="4、提高server带宽"></a>4、提高server带宽</h3><p>一般由财务决定，涉及预算问题。</p>
<h3 id="5、压缩gzip"><a href="#5、压缩gzip" class="headerlink" title="5、压缩gzip"></a>5、压缩gzip</h3><p>后端开启gzip代码压缩，浏览器会自动解压缩</p>
<h3 id="6、优化CSS合并相同样式"><a href="#6、优化CSS合并相同样式" class="headerlink" title="6、优化CSS合并相同样式"></a>6、优化CSS合并相同样式</h3><h3 id="7、先加载CSS再加载JS"><a href="#7、先加载CSS再加载JS" class="headerlink" title="7、先加载CSS再加载JS"></a>7、先加载CSS再加载JS</h3><p>调整其加载顺序，让用户先看到页面，在实现其js的功能</p>
<h3 id="8、懒加载"><a href="#8、懒加载" class="headerlink" title="8、懒加载"></a>8、懒加载</h3><p>先加载用户看到的，在按需加载剩余的。</p>
<h3 id="9、预加载"><a href="#9、预加载" class="headerlink" title="9、预加载"></a>9、预加载</h3><p>对于用户访问率大的部分，可以提前加载好，比如小说的下一页。</p>
<h3 id="10、http缓存css-js-图片"><a href="#10、http缓存css-js-图片" class="headerlink" title="10、http缓存css&#x2F;js&#x2F;图片"></a>10、http缓存css&#x2F;js&#x2F;图片</h3><p>后端设置缓存时间，可以使用hash值判定是否需要更新对应文件，html不能缓存，否则无法判断是否更新。</p>
<h3 id="11、加域名CDN"><a href="#11、加域名CDN" class="headerlink" title="11、加域名CDN"></a>11、加域名CDN</h3><p>增加同时请求数量</p>
<h3 id="12、cookie-free"><a href="#12、cookie-free" class="headerlink" title="12、cookie-free"></a>12、cookie-free</h3><p>将需要cookie请求和不需要cookie请求的分开多个域名请求，加快不需要cookie的请求速度。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下安装Cmder及配置&amp;设置系统右键菜单</title>
    <url>/2020/02/12/article/Windows%20%E4%B8%8B%E5%AE%89%E8%A3%85Cmder%E5%8F%8A%E9%85%8D%E7%BD%AE&amp;%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<h1 id="下载Cmder"><a href="#下载Cmder" class="headerlink" title="下载Cmder"></a>下载Cmder</h1><p>Cmder的官网 <a href="https://cmder.net/">https://cmder.net/</a><br>Cmder的GitHub下载链接 <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/11276147/eb0e7b00-3262-11ea-8f83-c17cae9b8b2c?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20200210/us-east-1/s3/aws4_request&X-Amz-Date=20200210T075928Z&X-Amz-Expires=300&X-Amz-Signature=9a1d570c489bd1abcc9dd2ceb57e9f965ca8e7adecd4a8f795332c2c035f68e8&X-Amz-SignedHeaders=host&actor_id=60692794&response-content-disposition=attachment;%20filename=cmder.zip&response-content-type=application/octet-stream">点击这里</a></p>
<h1 id="安装Cmder"><a href="#安装Cmder" class="headerlink" title="安装Cmder"></a>安装Cmder</h1><p>直接解压到文件夹下，打开目录下的 Cmder.exe 即可运行<br><img src="http://obsidian.easyhappy.top/avan/202506291713700.png" alt="image.png"></p>
<h1 id="简单的配置Cmder"><a href="#简单的配置Cmder" class="headerlink" title="简单的配置Cmder"></a>简单的配置Cmder</h1><ol>
<li><p>在右下角 鼠标右键 打开设置<br><img src="http://obsidian.easyhappy.top/avan/202506291713456.png" alt="image.png"></p>
</li>
<li><p>设置语言为中文<br><img src="http://obsidian.easyhappy.top/avan/202506291714820.png" alt="image.png"></p>
</li>
<li><p>把这三个打上勾<br><img src="http://obsidian.easyhappy.top/avan/202506291714823.png" alt="image.png"></p>
</li>
<li><p>在设置左边点击 大小&amp;位置 ，按下方图片的数据来设置（可以自己设置）<br><img src="http://obsidian.easyhappy.top/avan/202506291714801.png" alt="image.png"></p>
</li>
<li><p>单击保存设置<br><img src="http://obsidian.easyhappy.top/avan/202506291714047.png" alt="image.png"></p>
</li>
</ol>
<p>PS：如果发现下次打开设置页面，又恢复成中文则进行一下操作</p>
<ol>
<li><p>再次打开设置，点击导出，右键 ConEmu.xml 文件点击编辑<br><img src="http://obsidian.easyhappy.top/avan/202506291715652.png" alt="image.png"></p>
</li>
<li><p>在新打开的记事本中，按 <code>Ctrl + F</code> 搜素关键字 “Language”<br><img src="http://obsidian.easyhappy.top/avan/202506291715179.png" alt="image.png"></p>
</li>
<li><p>将后面的 en 改为 zh 然后按 <code>Ctrl + S</code> 保存退出即可。<br><img src="http://obsidian.easyhappy.top/avan/202506291715659.png" alt="image.png"></p>
</li>
</ol>
<h1 id="设置鼠标移出后隐藏Cmder"><a href="#设置鼠标移出后隐藏Cmder" class="headerlink" title="设置鼠标移出后隐藏Cmder"></a>设置鼠标移出后隐藏Cmder</h1><p>在设置页面，单击右边的 Quake 风格 然后勾选下方图片的三个选项，保存设置<br><img src="http://obsidian.easyhappy.top/avan/202506291715076.png" alt="image.png"></p>
<h1 id="修改呼出快捷键"><a href="#修改呼出快捷键" class="headerlink" title="修改呼出快捷键"></a>修改呼出快捷键</h1><p>在设置页面，单击右边的 通用 然后按下方图片位置，自定义快捷键，我是 <code>Alt + 1</code><br><img src="http://obsidian.easyhappy.top/avan/202506291715566.png" alt="image.png"></p>
<h1 id="设置默认bash启动"><a href="#设置默认bash启动" class="headerlink" title="设置默认bash启动"></a>设置默认bash启动</h1><p>在设置页面，单击右边的 启动 然后按下方图片位置进行设置<br><img src="http://obsidian.easyhappy.top/avan/202506291716676.png" alt="image.png"></p>
<h1 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h1><p>在设置页面，单击右边的 按键&amp;宏 即可自定义快捷键<br><img src="http://obsidian.easyhappy.top/avan/202506291716515.png" alt="image.png"></p>
<h1 id="设置bash启动目录"><a href="#设置bash启动目录" class="headerlink" title="设置bash启动目录"></a>设置bash启动目录</h1><p>在设计页面。单击右边的 启动，单击 任务 ，然后进行下面图片的设置即可<br><img src="http://obsidian.easyhappy.top/avan/202506291716056.png" alt="image.png"></p>
<h1 id="设置Cmder系统右键菜单"><a href="#设置Cmder系统右键菜单" class="headerlink" title="设置Cmder系统右键菜单"></a>设置Cmder系统右键菜单</h1><ol>
<li>将Cmder根目录路径，复制到系统 环境变量 中。<br><img src="http://obsidian.easyhappy.top/avan/202506291716190.png" alt="image.png"></li>
</ol>
<p><img src="http://obsidian.easyhappy.top/avan/202506291717488.png" alt="image.png"></p>
<ol start="2">
<li>打开 运行 窗口 <code>Ctrl + R</code> 输入“cmd”回车<br><img src="http://obsidian.easyhappy.top/avan/202506291717490.png" alt="image.png"></li>
</ol>
<p>然后在新弹出来的窗口中输入 <code>cmder /register all</code> 后回车即可<br><img src="http://obsidian.easyhappy.top/avan/202506291717221.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>cmder</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下安装Node.js和yarn</title>
    <url>/2020/02/12/article/Windows%20%E4%B8%8B%E5%AE%89%E8%A3%85Node.js%E5%92%8Cyarn/</url>
    <content><![CDATA[<h1 id="一、Node-js部分"><a href="#一、Node-js部分" class="headerlink" title="一、Node.js部分"></a>一、Node.js部分</h1><ul>
<li>下载Node.js</li>
</ul>
<p>Node.js官网 <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<p>Node.js下载链接 <a href="https://nodejs.org/dist/latest-v10.x/node-v10.19.0-x64.msi">https://nodejs.org/dist/latest-v10.x/node-v10.19.0-x64.msi</a></p>
<ul>
<li>##安装Node.js</li>
</ul>
<p>下载后，双击运行文件，一直点 Next 就可以了。如果想改目录可以自行跟改<br><img src="http://obsidian.easyhappy.top/avan/202506291725117.png" alt="image.png"></p>
<ul>
<li>测试是否安装成功</li>
</ul>
<p>使用 <code>Ctrl + R</code> 打卡 运行 窗口，输入“cmd”回车进入 命令行窗口。输入 <code>node --version</code> 回车、输入 <code>npm--version</code> 回车、输入 <code>npx--version</code> 回车，如果都返回版本号则安装成功。没有就重启电脑在重复以上操作。</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291725377.png" alt="image.png"></p>
<ul>
<li>配置Node.js</li>
</ul>
<p>在 命令行窗口 输入 <code>npm i -g nrm</code> 回车。下载nrm服务，这里会比较慢，耐心等他下完</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291725017.png" alt="image.png"></p>
<p>下载完后，输入 <code>nrm ls</code> 可以查看所有服务器，使用 <code>nrm use taobao</code> 使用淘宝源</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291725445.png" alt="image.png"></p>
<p>可以输入 <code>nrm i -g http-server</code> 顺便下载此服务，来测试一下速度</p>
<h1 id="二、yarn部分"><a href="#二、yarn部分" class="headerlink" title="二、yarn部分"></a>二、yarn部分</h1><ul>
<li>下载yarn</li>
</ul>
<p>yarn官网下载链接 <a href="https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable">https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable</a></p>
<ul>
<li>安装yarn</li>
</ul>
<p>同Node.js一样，无脑下一部即可。安装位置可以自己换</p>
<ul>
<li>测试是否安装成功</li>
</ul>
<p>使用 <code>Ctrl + R</code> 打卡 运行 窗口，输入“cmd”回车进入 命令行窗口。输入 <code>yarn --version</code> 回车，若返回版本号则安装成功。</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291726440.png" alt="image.png"></p>
<ul>
<li>配置yarn</li>
</ul>
<p>在命令行输入 <code>yarn global add yrm</code> 回车，等它下载完。</p>
<p>输入 <code>yrm ls</code> 回车查看目前服务器，输入 <code>yrm use taobao</code> 回车使用淘宝服务器。</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291726855.png" alt="image.png"></p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>node</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>dayjs计算连续打卡时间</title>
    <url>/2022/02/06/article/dayjs%E8%AE%A1%E7%AE%97%E8%BF%9E%E7%BB%AD%E6%89%93%E5%8D%A1%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做的个人项目中，需要统计用户连续打卡的时间。网上搜索了很多资料，方法有很多。比如使用mysql分组条件查询、窗口排序等。考虑到自己需求没有这么复杂，只需要计算最近一次的连续天数。就是直接使用dayjs计算。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>mysql查询对应用户所有的打卡记录，进行降序排序。</li>
<li>获取第一个时间，判断时候在今天或昨天的范围。</li>
<li>如果是则表示仍在连续打卡范围，如果不是直接返回0天</li>
<li>判断最后一次打开是否是今天，不是的话从昨天开始查找</li>
<li>每次遍历天数加一，直到发现不是连续的则中断遍历</li>
</ol>
<blockquote>
<p>这里数据添加的时候，限制了一天只能打卡一次。所以记录中没有重复天数的。如果返回的数据有重复的，会导致最后的连续天数有误差。可以考虑进行去重。</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getContinueDay</span> = (<span class="params"><span class="attr">list</span>: &#123; checkInTime: <span class="built_in">string</span> &#125;[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> day = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (!list.<span class="property">length</span>) <span class="keyword">return</span> day;</span><br><span class="line">  <span class="keyword">let</span> nowStartDay = <span class="title function_">dayjs</span>().<span class="title function_">startOf</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> left = <span class="title function_">dayjs</span>().<span class="title function_">subtract</span>(<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>).<span class="title function_">startOf</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> right = <span class="title function_">dayjs</span>().<span class="title function_">endOf</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">dayjs</span>(list[<span class="number">0</span>].<span class="property">checkInTime</span>).<span class="title function_">isBetween</span>(left, right, <span class="literal">null</span>, <span class="string">&#x27;[]&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">dayjs</span>(list[<span class="number">0</span>].<span class="property">checkInTime</span>).<span class="title function_">isSame</span>(nowStartDay, <span class="string">&#x27;day&#x27;</span>)) &#123;</span><br><span class="line">      nowStartDay = nowStartDay.<span class="title function_">subtract</span>(<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> i <span class="keyword">of</span> list) &#123;</span><br><span class="line">      <span class="keyword">const</span> dayStart = <span class="title function_">dayjs</span>(nowStartDay).<span class="title function_">startOf</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> dayEnd = <span class="title function_">dayjs</span>(nowStartDay).<span class="title function_">endOf</span>(<span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_">dayjs</span>(i.<span class="property">checkInTime</span>).<span class="title function_">isBetween</span>(dayStart, dayEnd, <span class="string">&#x27;day&#x27;</span>, <span class="string">&#x27;[]&#x27;</span>)) <span class="keyword">break</span>;</span><br><span class="line">      day++;</span><br><span class="line">      nowStartDay = nowStartDay.<span class="title function_">subtract</span>(<span class="number">1</span>, <span class="string">&#x27;day&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> day;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38fcde674535402693b7f1d9a7c82909~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de9ef709e52748c384d0ec00e0746102~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows在git-bash安装zsh</title>
    <url>/2022/07/22/article/Windows%E5%9C%A8git-bash%E5%AE%89%E8%A3%85zsh/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主现在已经转 mac 用户。但是因为家里的台式机是是 win 装黑果遇到各种问题，最终还是放弃在家使用 mac 环境。<br>但是又用习惯了 zsh 的各种插件。所以开始琢磨如何在 win 中使用一套舒适的环境。<br>最开始我是使用 wsl 中的 linux 环境安装 zsh。但毕竟属于子系统，很多环境是不共享。因为我是一名前端工程师，当做桌面程序开发的时候。在 wsl 需要另外配一套环境启动。<br>后面在 google 查阅之后。发现 git-bash 中安装 zsh 即可在大多环境与 window 共享的前提下使用 zsh 的生态。</p>
<h1 id="安装-git-bash"><a href="#安装-git-bash" class="headerlink" title="安装 git-bash"></a>安装 git-bash</h1><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<p>安装这个没什么好说的，按照提示点击下一步操作。如果不知道怎么配置，全部默认即可。</p>
<p>打开后是类似这个样子</p>
<p><img src="https://pic1.zhimg.com/80/v2-be6c033a8d8f0c47a1a4b81f736034d1_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;c1b9f2f96cca4912a6b7b31cc6fbf2a1~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h1 id="下载-zsh-的包"><a href="#下载-zsh-的包" class="headerlink" title="下载 zsh 的包"></a>下载 zsh 的包</h1><p><a href="https://packages.msys2.org/package/zsh?repo=msys&variant=x86_64">https://packages.msys2.org/package/zsh?repo=msys&amp;variant=x86_64</a></p>
<p>下载 <code>zsh-5.8-5-x86_64.pkg.tar.zst</code> 文件。5.8-5 是版本号，当你看到这配文章的时候版本号可能已经发生改变，所以你只需要下载 <code>zsh-xxx-x86_64.pkg.tar.zst</code> 即可。</p>
<p><img src="https://pic3.zhimg.com/80/v2-16838b5c27b5025dec43c65a23381cd3_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;d325eac0599b4eaea2fa374b345ae8a3~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h1 id="解压-zsh-压缩文件"><a href="#解压-zsh-压缩文件" class="headerlink" title="解压 zsh 压缩文件"></a>解压 zsh 压缩文件</h1><p>这里推荐使用 <a href="https://peazip.github.io/">https://peazip.github.io/</a> 进行解压。当然如果你有其他的解压工具能解压也行。</p>
<p>解压后你的文件中应该包含 <code>etc</code> 和 <code>usr</code> 类似字眼。将解压出来的所有文件，包含刚刚说的文件。复制到 git-bash 安装的根目录。可能会提示冲突，选择覆盖文件即可。</p>
<p><img src="https://picx.zhimg.com/80/v2-dbb97af1fb3f900f1e44d2c7d2aa9186_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;f185d07fe38c41dfa0a11db13d30311e~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://pica.zhimg.com/80/v2-9929b1394ac9a6a1e3736c1a50ce3041_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;6314799d90714dbb8c558bad89fdfb8d~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h1 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh-my-zsh"></a>安装 oh-my-zsh</h1><p>如果你跟我一样，决定默认使用 zsh。而不进入 bash。可以在 <code>.bashrc</code> 加上下面代码。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -t 1 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exec</span> zsh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p><img src="https://pic1.zhimg.com/80/v2-fcdc278894f89abbd4d15184c6754517_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;b3b82682481e463e83603572e4066ea7~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p><img src="https://pic1.zhimg.com/80/v2-6f88f431319471875930394532079178_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;1681b6efd62a4cebb7425ab84f263a75~tplv-k3u1fbpfcp-zoom-1.image"></p>
<p>在终端输入下面指令。进入 zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zsh</span><br></pre></td></tr></table></figure>

<p>安装 oh-my-zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用一些默认插件"><a href="#使用一些默认插件" class="headerlink" title="使用一些默认插件"></a>使用一些默认插件</h2><p>编辑 <code>~/.zshrc</code> ，如果没有则会自动创建。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面的 vim 如果不会操作，你可以使用 code 在你的用户根目录打开 .zshrc 文件编辑是一样的效果。但是你都用 zsh 了我相信你都是会用 vim 的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  bundler</span><br><span class="line">  dotenv</span><br><span class="line">  macos</span><br><span class="line">  rake</span><br><span class="line">  rbenv</span><br><span class="line">  ruby</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>上面的是写官方的插件，如果你需要使用其他插件只需要安装好后，回车换行添加尚对应插件名即可。</p>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>同样是在 <code>~/.zshrc</code> 文件中配置，添加下面代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你想要使用其他主题，可以在这里查看对应的名字替换即可 <a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">https://github.com/ohmyzsh/ohmyzsh/wiki/Themes</a></p>
</blockquote>
<p>如果你想每次使用都有新的体验，可以设置为随机主题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME=<span class="string">&quot;random&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者你想在指定的几个主题中随机，那么可以加上下面代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME_RANDOM_CANDIDATES=(</span><br><span class="line">  <span class="string">&quot;robbyrussell&quot;</span></span><br><span class="line">  <span class="string">&quot;agnoster&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>如果不想看到某个特别讨厌的主题，可以忽略它</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ZSH_THEME_RANDOM_IGNORED=(</span><br><span class="line">pygmalion</span><br><span class="line">tjkirch_mod</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意！！！<br>上面所有关于 <code>.zshrc</code> 的操作，修改都不会立即生效。你可以退出重新进入终端即可生效，或者执行 <code>source ~/.zshrc</code> 让他立刻生效。</p>
</blockquote>
<p>配置完后的大概效果是这样</p>
<p><img src="https://picx.zhimg.com/80/v2-795af57fac6246fe0d583e014d4e7afe_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;6d5e0cf3f4f046e59eb751f5f6b6d3e9~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h1 id="安装一些实用的插件"><a href="#安装一些实用的插件" class="headerlink" title="安装一些实用的插件"></a>安装一些实用的插件</h1><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p><code>zsh-syntax-highlighting</code> 他可以高亮你的代码提示，让你更直观的知道你的命令是否有输入错误</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source <span class="variable">$&#123;(q-)PWD&#125;</span>/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot;</span> &gt;&gt; <span class="variable">$&#123;ZDOTDIR:-<span class="variable">$HOME</span>&#125;</span>/.zshrc</span><br></pre></td></tr></table></figure>

<h2 id="自动补全-提示"><a href="#自动补全-提示" class="headerlink" title="自动补全&#x2F;提示"></a>自动补全&#x2F;提示</h2><p><code>zsh-users/zsh-autosuggestions</code> 他可以在你历史指令中找到与你当前输入指令匹配的记录，并高亮显示，如果想直接使用，可以直接通过 右方向键 补全。</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>

<p>在 <code>plugins</code> 中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=( </span><br><span class="line">    <span class="comment"># other plugins...</span></span><br><span class="line">    zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="还有一些实用默认插件"><a href="#还有一些实用默认插件" class="headerlink" title="还有一些实用默认插件"></a>还有一些实用默认插件</h2><ul>
<li>z —— 快速跳转路径</li>
<li>sudo —— 按两次 ESC 快速添加 sudo 前缀</li>
</ul>
<h1 id="不太相关的内容"><a href="#不太相关的内容" class="headerlink" title="不太相关的内容"></a>不太相关的内容</h1><p>如果你想让终端更好看点，可以在 Store 中安装 Windows Terminal 美化你的终端。大概效果就是我的封面图。</p>
<p><img src="https://picx.zhimg.com/80/v2-0b832736190f75adf90e1a909a586272_720w.png" alt="https:&#x2F;&#x2F;p3-juejin.byteimg.com&#x2F;tos-cn-i-k3u1fbpfcp&#x2F;3b1bb7be94e544ec83ba80f076e9738e~tplv-k3u1fbpfcp-zoom-1.image"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>windows</tag>
        <tag>工具</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>hoc实现表单组件的设计思路</title>
    <url>/2021/08/20/article/hoc%E5%AE%9E%E7%8E%B0%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过模仿 rc-form 的实现思路，可以学习一下 hoc 的使用场景。</p>
<h2 id="暴露-createForm-函数"><a href="#暴露-createForm-函数" class="headerlink" title="暴露 createForm() 函数"></a>暴露 createForm() 函数</h2><p>通过 createForm 函数，返回一个组件。该组件拓展了我们的一些方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createForm</span>(<span class="params">Cmp</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    getFieldDecorator = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    getFieldsValue = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    getFieldValue = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    setFieldValue = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    validateFields = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">  </span><br><span class="line">    form = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getFieldDecorator</span>: <span class="variable language_">this</span>.<span class="property">getFieldDecorator</span>,</span><br><span class="line">        <span class="attr">getFieldValue</span>: <span class="variable language_">this</span>.<span class="property">getFieldValue</span>,</span><br><span class="line">        <span class="attr">getFieldsValue</span>: <span class="variable language_">this</span>.<span class="property">getFieldsValue</span>,</span><br><span class="line">        <span class="attr">setFieldValue</span>: <span class="variable language_">this</span>.<span class="property">setFieldValue</span>,</span><br><span class="line">        <span class="attr">validateFields</span>: <span class="variable language_">this</span>.<span class="property">validateFields</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> form = <span class="title function_">getForm</span>()</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Cmp</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">form</span>=<span class="string">&#123;form&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getFieldDecorator"><a href="#实现-getFieldDecorator" class="headerlink" title="实现 getFieldDecorator"></a>实现 getFieldDecorator</h2><p>使用方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &#123;<span class="title function_">getFieldDecorator</span>(<span class="string">&#x27;username&#x27;</span>, &#123;<span class="attr">rules</span>: &#123; <span class="attr">require</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入用户名&#x27;</span> &#125;)(<span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> /&gt;</span></span>)&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出，该函数接收两个参数，第一个是字段名，第二个是它的规则。又接着返回了一个接收一个组件的函数，最终返回一个加工后的组件。现在我们开始简单实现一下。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span> = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFieldDecorator = <span class="function">(<span class="params">fieldName, option</span>) =&gt;</span> <span class="function"><span class="params">InputCmp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 保存数据和选项</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>[fieldName] === <span class="literal">undefined</span>) <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [fieldName]: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span>[fieldName] = option</span><br><span class="line">  <span class="comment">// 返回一个处理后的组件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(<span class="title class_">InputCmp</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: fieldName,</span><br><span class="line">    <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">state</span>[fieldName],</span><br><span class="line">    <span class="attr">onChange</span>: <span class="variable language_">this</span>.<span class="property">handleChange</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义 handleChange 事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = e.<span class="property">target</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [name]: value &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getFieldValue"><a href="#实现-getFieldValue" class="headerlink" title="实现 getFieldValue"></a>实现 getFieldValue</h2><p>直接把 state 的数据返回即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFieldsValue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;...<span class="variable language_">this</span>.<span class="property">state</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-getFieldsValue"><a href="#实现-getFieldsValue" class="headerlink" title="实现 getFieldsValue"></a>实现 getFieldsValue</h2><p>通过传进来的名字，返回对应的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getFieldValue = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-setFieldValue"><a href="#实现-setFieldValue" class="headerlink" title="实现 setFieldValue"></a>实现 setFieldValue</h2><p>直接将传进来的数据合并起来即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setFieldValue = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(state)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现-validateFields"><a href="#实现-validateFields" class="headerlink" title="实现 validateFields"></a>实现 validateFields</h2><p>该方法接收一个回调函数，通过遍历options的规则，在判断相应的值，返回错误数据以及state的数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">validateFields = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> err = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> fieldName <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">options</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rules = <span class="variable language_">this</span>.<span class="property">options</span>[fieldName]?.<span class="property">rules</span></span><br><span class="line">    <span class="keyword">const</span> value = <span class="variable language_">this</span>.<span class="property">state</span>[fieldName]</span><br><span class="line">    <span class="keyword">if</span>(rules &amp;&amp; rules.<span class="property">require</span> &amp;&amp; rules.<span class="property">message</span> &amp;&amp; !value) &#123;</span><br><span class="line">      err.<span class="title function_">push</span>(&#123;</span><br><span class="line">        [fieldName]: rules.<span class="property">message</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断 err 是否有数据</span></span><br><span class="line">  <span class="keyword">if</span> (err.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, &#123; ...<span class="variable language_">this</span>.<span class="property">state</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(err, &#123; ...<span class="variable language_">this</span>.<span class="property">state</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createForm</span>(<span class="params">Cmp</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">options</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; name, value &#125; = e.<span class="property">target</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [name]: value &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    validateFields = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> err = []</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> fieldName <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">options</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> rules = <span class="variable language_">this</span>.<span class="property">options</span>[fieldName]?.<span class="property">rules</span></span><br><span class="line">        <span class="keyword">if</span> (rules &amp;&amp; rules.<span class="property">require</span> &amp;&amp; rules.<span class="property">message</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">state</span>[fieldName]) &#123;</span><br><span class="line">          err.<span class="title function_">push</span>(&#123;</span><br><span class="line">            [fieldName]: rules.<span class="property">message</span>,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (err.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="literal">null</span>, &#123; ...<span class="variable language_">this</span>.<span class="property">state</span> &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(err, &#123; ...<span class="variable language_">this</span>.<span class="property">state</span> &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getFieldDecorator = <span class="function">(<span class="params">fieldName, option</span>) =&gt;</span> <span class="function"><span class="params">InputCmp</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">options</span>[fieldName] = option</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>[fieldName] === <span class="literal">undefined</span>) <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; [fieldName]: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">cloneElement</span>(<span class="title class_">InputCmp</span>, &#123;</span><br><span class="line">        <span class="attr">name</span>: fieldName,</span><br><span class="line">        <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">state</span>[fieldName],</span><br><span class="line">        <span class="attr">onChange</span>: <span class="variable language_">this</span>.<span class="property">handleChange</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getFieldValue = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>[name]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getFieldsValue = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...<span class="variable language_">this</span>.<span class="property">state</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setFieldValue = <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(state)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getForm = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getFieldDecorator</span>: <span class="variable language_">this</span>.<span class="property">getFieldDecorator</span>,</span><br><span class="line">        <span class="attr">getFieldValue</span>: <span class="variable language_">this</span>.<span class="property">getFieldValue</span>,</span><br><span class="line">        <span class="attr">getFieldsValue</span>: <span class="variable language_">this</span>.<span class="property">getFieldsValue</span>,</span><br><span class="line">        <span class="attr">setFieldValue</span>: <span class="variable language_">this</span>.<span class="property">setFieldValue</span>,</span><br><span class="line">        <span class="attr">validateFields</span>: <span class="variable language_">this</span>.<span class="property">validateFields</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> form = <span class="variable language_">this</span>.<span class="title function_">getForm</span>()</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Cmp</span> &#123;<span class="attr">...this.props</span>&#125; <span class="attr">form</span>=<span class="string">&#123;form&#125;</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>mac系统下配置flutter环境</title>
    <url>/2020/07/14/article/mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEflutter%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="一、下载安装及配置"><a href="#一、下载安装及配置" class="headerlink" title="一、下载安装及配置"></a>一、下载安装及配置</h2><h3 id="1、安装-Flutter-SDK"><a href="#1、安装-Flutter-SDK" class="headerlink" title="1、安装 Flutter SDK"></a>1、安装 Flutter SDK</h3><p>进入 <a href="https://developer.android.google.cn/studio?hl=zh-cn">Flutter官网</a> 下载 <code>Flutter SDK</code></p>
<p>我安装时的下载地址：<a href="https://flutter.dev/docs/get-started/install/macos">https://flutter.dev/docs/get-started/install/macos</a></p>
<p>下载好后，将<code>flutter_macos_1.17.5-stable.zip</code>安装包，解压到不会轻易误删的地方。这里我解压到文稿中。也就是路径为&#x2F;Users&#x2F;你的mac名&#x2F;Documents的位置。</p>
<p>编辑环境变量，打开 <code>bash_profile</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.bash_pofile</span><br></pre></td></tr></table></figure>

<p>在最后面插入下列代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=你文件所在目录的路径/flutter/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>接着保存退出后，在终端输入 <code>source ~/.bash_profile</code> 即可使用flutter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>上面代码用于检测你还有哪些部分没有配置完成。</p>
<blockquote>
<p>如果你终端是zsh，你还需要多一步</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>在最下面添加这一行代码</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="2、安装-Xcode"><a href="#2、安装-Xcode" class="headerlink" title="2、安装 Xcode"></a>2、安装 Xcode</h3><p>直接在AppSotre中，搜索Xcode进行安装即可。</p>
<p>终端输入 <code>flutter doctor</code> 进行检查。</p>
<h3 id="3、安装-Android-Studio"><a href="#3、安装-Android-Studio" class="headerlink" title="3、安装 Android Studio"></a>3、安装 Android Studio</h3><p>进入 <a href="https://developer.android.google.cn/studio?hl=zh-cn">Android Studio官网</a> 下载</p>
<p>下载后，按自己需要进行设置及安装。</p>
<p>安装结束后添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>在最后一行添加下面代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:~/Library/Android/sdk/platform-tools</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>接着打开 Android Studio，在 Plugin 中搜索 <code>flutter</code> 并安装。它会自动安装 flutter、dart两个插件。</p>
<p>安装结束后可以输入 <code>flutter doctor</code> 检测是否成功。</p>
<h3 id="4、下载-VScode"><a href="#4、下载-VScode" class="headerlink" title="4、下载 VScode"></a>4、下载 VScode</h3><p>进入 <a href="https://code.visualstudio.com/">VScode官网</a> 下载</p>
<p>下载好后添加 flutter、Dart 两个插件</p>
<p>终端输入 <code>flutter doctor</code> 进行检测。</p>
<h3 id="5、安装夜神模拟器"><a href="#5、安装夜神模拟器" class="headerlink" title="5、安装夜神模拟器"></a>5、安装夜神模拟器</h3><p>进入 <a href="https://www.yeshen.com/">夜神模拟器官网</a> 下载</p>
<p>安装并打开。</p>
<h2 id="二、运行项目"><a href="#二、运行项目" class="headerlink" title="二、运行项目"></a>二、运行项目</h2><p>在运行时为了增加流畅性，建议修改Flutter的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open 你的flutter文件目录/packages/flutter_tools/gradle/flutter.gradle</span><br></pre></td></tr></table></figure>

<p>将repositories中的 <code>google()</code> 和 <code>jcenter()</code> 删除。替换为</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">maven &#123; url ‘https:<span class="comment">//maven.aliyun.com/repository/google’ &#125;</span></span><br><span class="line">maven &#123; url ‘https:<span class="comment">//maven.aliyun.com/repository/jcenter’ &#125;</span></span><br><span class="line">maven &#123; url ‘http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public’ &#125;</span></span><br></pre></td></tr></table></figure>

<p>创建你的第一个项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter create 项目名</span><br><span class="line"><span class="built_in">cd</span> 项目名</span><br></pre></td></tr></table></figure>

<p>并修改你项目中的 <code>android/build.gradle</code> 的配置文件。同样修改 repositories 中的内容。只不过他有两个位置都要替换。</p>
<p>接着将项目与夜神模拟器建立连接，在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>输入完没报错就是连接成功了。</p>
<blockquote>
<p>如果报错，那是因为你夜神模拟器没有打开，要在打开的状态下在输入指令连接。</p>
</blockquote>
<p>确认无误后，即可开始编译运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>博客</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>navicat找回连接成功的密码</title>
    <url>/2021/06/15/article/navicat%E6%89%BE%E5%9B%9E%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E7%9A%84%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<h2 id="Setp-1-导出connections"><a href="#Setp-1-导出connections" class="headerlink" title="Setp 1 导出connections"></a>Setp 1 导出connections</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9fd9322a54f46689e703eaaa7b7d97e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="Setp-2-解密password"><a href="#Setp-2-解密password" class="headerlink" title="Setp 2 解密password"></a>Setp 2 解密password</h2><ol>
<li>进入网站 <a href="https://tool.lu/coderunner">https://tool.lu/coderunner</a></li>
<li>复制下面代码，ctrl+a + ctrl+v</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavicatPassword</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$version</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesKey</span> = <span class="string">&#x27;libcckeylibcckey&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$aesIv</span> = <span class="string">&#x27;libcciv libcciv &#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowString</span> = <span class="string">&#x27;3DC5CA39&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowKey</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$blowIv</span> = <span class="literal">null</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$version</span> = <span class="number">12</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;version = <span class="variable">$version</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowKey = <span class="title function_ invoke__">sha1</span>(<span class="string">&#x27;3DC5CA39&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blowIv = <span class="title function_ invoke__">hex2bin</span>(<span class="string">&#x27;d9c7c3c8870d64bd&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptEleven</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>), <span class="variable">$currentVector</span>));</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$temp</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptBlock</span>(<span class="params"><span class="variable">$block</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$block</span>, <span class="string">&#x27;BF-ECB&#x27;</span>, <span class="variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">xorBytes</span>(<span class="params"><span class="variable">$str1</span>, <span class="variable">$str2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$result</span> .= <span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$str1</span>[<span class="variable">$i</span>]) ^ <span class="title function_ invoke__">ord</span>(<span class="variable">$str2</span>[<span class="variable">$i</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">encryptTwelve</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="title function_ invoke__">bin2hex</span>(<span class="variable">$result</span>));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decrypt</span>(<span class="params"><span class="variable">$string</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$result</span> = <span class="literal">FALSE</span>;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable language_">$this</span>-&gt;version) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptEleven</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                <span class="variable">$result</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decryptTwelve</span>(<span class="variable">$string</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptEleven</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">         </span><br><span class="line">        <span class="variable">$round</span> = <span class="title function_ invoke__">intval</span>(<span class="title function_ invoke__">floor</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) / <span class="number">8</span>));</span><br><span class="line">        <span class="variable">$leftLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$string</span>) % <span class="number">8</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;blowIv;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$round</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$encryptedBlock</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="number">8</span>);</span><br><span class="line">            <span class="variable">$temp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">decryptBlock</span>(<span class="variable">$encryptedBlock</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="variable">$currentVector</span>, <span class="variable">$encryptedBlock</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable">$temp</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$leftLength</span>) &#123;</span><br><span class="line">            <span class="variable">$currentVector</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">encryptBlock</span>(<span class="variable">$currentVector</span>);</span><br><span class="line">            <span class="variable">$result</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">xorBytes</span>(<span class="title function_ invoke__">substr</span>(<span class="variable">$string</span>, <span class="number">8</span> * <span class="variable">$i</span>, <span class="variable">$leftLength</span>), <span class="variable">$currentVector</span>);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">decryptTwelve</span>(<span class="params"><span class="variable">$upperString</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$string</span> = <span class="title function_ invoke__">hex2bin</span>(<span class="title function_ invoke__">strtolower</span>(<span class="variable">$upperString</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$string</span>, <span class="string">&#x27;AES-128-CBC&#x27;</span>, <span class="variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="variable">$this</span>-&gt;aesIv);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//需要指定版本两种，11或12</span></span><br><span class="line"><span class="comment">//$navicatPassword = new NavicatPassword(11);</span></span><br><span class="line"><span class="variable">$navicatPassword</span> = <span class="keyword">new</span> <span class="title class_">NavicatPassword</span>(<span class="number">11</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="comment">//$decode = $navicatPassword-&gt;decrypt(&#x27;15057D7BA390&#x27;);</span></span><br><span class="line"><span class="variable">$decode</span> = <span class="variable">$navicatPassword</span>-&gt;<span class="title function_ invoke__">decrypt</span>(<span class="string">&#x27;E75BF077AB8BAA3AC2D5&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$decode</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>从Setp 1导出的文件中复制加密密码</li>
</ol>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4732077bb673489c8eff9d85f802ca04~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="4">
<li>替换 decrypt 中的密码</li>
</ol>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/66d629c9f59746bc8c20b83708cc8a52~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol start="5">
<li>在右边输出窗口获得解密后的密码navicat找回连接成功的密码</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>工具</tag>
        <tag>navicat</tag>
      </tags>
  </entry>
  <entry>
    <title>nest 循环依赖问题</title>
    <url>/2023/11/16/article/nest%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>module 循环依赖</li>
</ol>
<p>例如 asset.module.ts &lt;-&gt; user.module.ts 循环依赖互相调用的情况, 可以通过在 import 中使用 <code>forwardRef</code> 进行延迟加载</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// asset.module.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">AssetEntity</span>]),</span><br><span class="line">    <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">UserModule</span>),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AssetController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AssetService</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">AssetService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AssetModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.module.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>]), <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">AssetModule</span>)],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>service 循环依赖</li>
</ol>
<p>除了 module 会出现循环依赖, service 一样会. 一样通过 <code>forwardRef</code> 包裹即可</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; AssetService))</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">assetService</span>: <span class="title class_">AssetService</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// asset.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AssetService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; UserService))</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">userService</span>: <span class="title class_">UserService</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs websocket 配置</title>
    <url>/2023/09/16/article/nestjs%20websocket%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>src&#x2F;socket&#x2F;socket.module.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SocketGateway</span>, <span class="title class_">SocketService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;socket&#x2F;socket.service.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;socket&#x2F;socket.gateway.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebSocketGateway</span>(&#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketGateway</span> &#123;</span><br><span class="line">  <span class="meta">@WebSocketServer</span>()</span><br><span class="line">  <span class="attr">server</span>: <span class="title class_">Server</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterInit</span>(<span class="params"><span class="attr">server</span>: <span class="title class_">Server</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Socket server initialized&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SubscribeMessage</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="attr">client</span>: <span class="title class_">Socket</span>, <span class="attr">payload</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">`server: <span class="subst">$&#123;<span class="built_in">JSON</span>.stirify(payload)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;app.module.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">SocketModule</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nestjs</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs遇到问题，如何在webstorm进行调试</title>
    <url>/2022/04/17/article/nestjs%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%EF%BC%8C%E5%A6%82%E4%BD%95%E5%9C%A8webstorm%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>在开发过程中，经常需要log出来我们的数据查看。而像node程序终端log出来的数据不具备良好的可读性，所以能不能像浏览器调试一样阅读呢。</p>
<p>顶部菜单找到 <code>RUN</code> 接着选择 <code>Edit Configurations</code> 会弹出一个窗口</p>
<p>接着点击 <code>+</code> 号，选择 <code>Node.js</code> 接着参考下面图片，将 <code>Node parameters</code> 和 <code>Javascript file</code> 的参数修改为对应的数值。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0526367c91064e5c9a671123c4307a4f~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
        <tag>nestjs</tag>
        <tag>webstorm</tag>
      </tags>
  </entry>
  <entry>
    <title>nods中mysql时间相差8小时</title>
    <url>/2022/01/16/article/nods%E4%B8%ADmysql%E6%97%B6%E9%97%B4%E7%9B%B8%E5%B7%AE8%E5%B0%8F%E6%97%B6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做自己的一个记账项目，后端nestjs中使用typeorm的mysql。当添加记录时，发现所以时间都相差了8小时。<br>后面查了一下资料发现因为默认 timezone 是用 UTC 的。所以只需要设置成我们自己的时区即可。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>ormconfig.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="number">3306</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;database&quot;</span><span class="punctuation">:</span> <span class="string">&quot;development&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;entities&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist/**/*.entity&#123;.ts,.js&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;synchronize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timezone&quot;</span><span class="punctuation">:</span> <span class="string">&quot;+08:00&quot;</span> <span class="comment">// 添加这一条</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
        <category>nodejs</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nestjs</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres 中断数据库的所有链接, 并重命名数据库</title>
    <url>/2023/05/16/article/postgres%E4%B8%AD%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%89%80%E6%9C%89%E9%93%BE%E6%8E%A5,%20%E5%B9%B6%E9%87%8D%E5%91%BD%E5%90%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker 直接管理员进入</span></span><br><span class="line">psql -U postgres</span><br><span class="line"><span class="comment"># 查看连接数</span></span><br><span class="line">SELECT COUNT(*) AS connection_count</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname = <span class="string">&#x27;数据库名字&#x27;</span>;</span><br><span class="line"><span class="comment"># 删除所有连接</span></span><br><span class="line">SELECT pg_terminate_backend(pg_stat_activity.pid)</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname = <span class="string">&#x27;数据库名字&#x27;</span></span><br><span class="line">  AND pid &lt;&gt; pg_backend_pid();</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">ALTER DATABASE <span class="string">&quot;原本名字&quot;</span> rename TO <span class="string">&quot;新名字&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>react使用AntD</title>
    <url>/2020/09/03/article/react%E4%BD%BF%E7%94%A8AntD/</url>
    <content><![CDATA[<h2 id="一、安装AntD"><a href="#一、安装AntD" class="headerlink" title="一、安装AntD"></a>一、安装AntD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<h2 id="二、引入AntD的CSS样式"><a href="#二、引入AntD的CSS样式" class="headerlink" title="二、引入AntD的CSS样式"></a>二、引入AntD的CSS样式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import <span class="string">&quot;antd/dist/antd.css&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、在官方文档寻找自己需要的组件并使用"><a href="#三、在官方文档寻找自己需要的组件并使用" class="headerlink" title="三、在官方文档寻找自己需要的组件并使用"></a>三、在官方文档寻找自己需要的组件并使用</h2><h3 id="例如：Button"><a href="#例如：Button" class="headerlink" title="例如：Button"></a>例如：Button</h3><ol>
<li>先import组件到页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>次按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例如：Form"><a href="#例如：Form" class="headerlink" title="例如：Form"></a>例如：Form</h3><ol>
<li>先import组件到页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span>, <span class="title class_">Button</span>, checkbox &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> layout = &#123;</span><br><span class="line">    <span class="attr">labelCol</span>: &#123; <span class="attr">span</span>: <span class="number">8</span> &#125;,</span><br><span class="line">    <span class="attr">wrapperCol</span>: &#123; <span class="attr">span</span>: <span class="number">16</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tailLayout = &#123;</span><br><span class="line">    <span class="attr">wrapperCol</span>: &#123; <span class="attr">offset</span>: <span class="number">8</span>, <span class="attr">span</span>: <span class="number">16</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFinish</span> = values =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success:&quot;</span>, values)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFinishFailed</span> = errorInfo =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Failed:&quot;</span>, errorInfo)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...layout</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;basic&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">initialValues</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remember:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onFinishFailed</span>=<span class="string">&#123;onFinishFailed&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">rules</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">required:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">message:</span> &quot;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">username</span>!&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;Password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">rules</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">required:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">message:</span> &quot;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">password</span>!&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input.Password</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> &#123;<span class="attr">...tailLayout</span>&#125; <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">valuePropName</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Checkbox</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> &#123;<span class="attr">...tailLayout</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Submit</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改里面的参数达到自己的效果</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>react使用vitest的一些问题</title>
    <url>/2022/01/08/article/react%E4%BD%BF%E7%94%A8vitest%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、TypeError-vite-ssr-import-0-default-is-not-a-function"><a href="#1、TypeError-vite-ssr-import-0-default-is-not-a-function" class="headerlink" title="1、TypeError: vite_ssr_import_0.default is not a function"></a>1、TypeError: <strong>vite_ssr_import_0</strong>.default is not a function</h2><p>为项目中使用到了classnames，但是他提示不是个函数</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>安装classnames-es-ts</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add -D classnames-es-ts</span><br></pre></td></tr></table></figure>

<p>配置vite别名</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="attr">classnames</span>: <span class="string">&quot;classnames-es-ts&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果还是不行，尝试降低一下版本号<br>“vitest”: “0.0.131”</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>vitest</tag>
      </tags>
  </entry>
  <entry>
    <title>taro的CSS-in-JS方案</title>
    <url>/2020/09/01/article/taro%E7%9A%84CSS-in-JS%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="linaria"><a href="#linaria" class="headerlink" title="linaria"></a>linaria</h2><p>在taro中使用React开发，无法使用之前的styled-components的CSS方案。官方提供了一个linaria的一种CSS样式方案。这种方案与styled-components方案类似。</p>
<h3 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h3><p>1.下载安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add linaria</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置 <code>babel.config.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [<span class="string">&#x27;taro&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">      <span class="attr">ts</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;linaria/babel&#x27;</span> <span class="comment">// 添加到 babel-presets</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置 <code>config/index.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="title function_">webpackChain</span>(<span class="params">chain, webpack</span>) &#123; <span class="comment">// 添加到config-mini</span></span><br><span class="line">      chain.<span class="property">module</span></span><br><span class="line">        .<span class="title function_">rule</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        .<span class="title function_">use</span>(<span class="string">&#x27;linariaLoader&#x27;</span>)</span><br><span class="line">        .<span class="title function_">loader</span>(<span class="string">&#x27;linaria/loader&#x27;</span>)</span><br><span class="line">        .<span class="title function_">options</span>(&#123;</span><br><span class="line">          <span class="attr">sourceMap</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>新建文件 <code>linaria.config.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">ignore</span>: <span class="regexp">/node_modules[\/\\](?!@tarojs[\/\\]components)/</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用方式</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@tarojs/components&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; styled &#125; <span class="keyword">from</span> <span class="string">&quot;linaria/react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = <span class="title function_">styled</span>(<span class="title class_">View</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    color: #333;</span></span><br><span class="line"><span class="string">    background: red;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello World!</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>css-in-js</tag>
        <tag>taro</tag>
      </tags>
  </entry>
  <entry>
    <title>timestamp 转 timestamptz 问题</title>
    <url>/2024/09/12/article/timestamp%20%E8%BD%AC%20timestamptz%20%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>无时区转带时区的格式的时候, 使用 sync 他会将你原本的字段删除, 重新创建一个类型为 timestamptz 的字段, 数据会完全清空.</p>
<p>建议新增一个 swaptime 字段, 将原本的 time 先转到 swaptime, 确认没问题后. 对服务器进行暂停维护, 然后开始将 time 的字段去掉, 然后将 swaptime 的名字改成 time. 重新开启服务.</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>win11在cmder中使用vim查看内容的时候空白</title>
    <url>/2022/06/21/article/win11%E5%9C%A8cmder%E4%B8%AD%E4%BD%BF%E7%94%A8vim%E6%9F%A5%E7%9C%8B%E5%86%85%E5%AE%B9%E7%9A%84%E6%97%B6%E5%80%99%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<p>依次选择，最终打上个<code>√</code>就可以了</p>
<p>“Show system menu (RCIickfcr Settings)” -》 “Debug” -》 “properties” -》 “Use legacy console (requires relaunch, affects all consoles)”</p>
<blockquote>
<p>一句话概括，使用旧版</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>工具</category>
        <category>cmder</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>cmder</tag>
        <tag>工具</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>windows11安装C++编译器mingw-w64</title>
    <url>/2021/07/07/article/windows11%E5%AE%89%E8%A3%85C++%E7%BC%96%E8%AF%91%E5%99%A8mingw-w64/</url>
    <content><![CDATA[<h2 id="1、下载压缩包"><a href="#1、下载压缩包" class="headerlink" title="1、下载压缩包"></a>1、下载压缩包</h2><p><a href="https://winlibs.com/">https://winlibs.com/</a></p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/19bcbdcf99024f11a0c4304abce4c173~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="2、解压出来"><a href="#2、解压出来" class="headerlink" title="2、解压出来"></a>2、解压出来</h2><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98a02da4366d4b719a06158169ff0ead~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79523dd9a2704cdc8a0118c30f5a5eee~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ab96d85153b4918a8cedfcccdebf8cd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c8e4845bd39433c8a2276efd9407c3b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98e0948986204453ba793a03a0a49e53~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0533d152afa546658131e5de8cd9aefa~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c02008170a14ad284282afa44f3216e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1835b86831d148369baf5101410475f4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="4、打开终端进行测试"><a href="#4、打开终端进行测试" class="headerlink" title="4、打开终端进行测试"></a>4、打开终端进行测试</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c17a70c2f834448f8b1f16f43ba74586~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3f6c1c3870b4da09c8548598284dd63~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="5、成功"><a href="#5、成功" class="headerlink" title="5、成功"></a>5、成功</h2>]]></content>
      <categories>
        <category>博客</category>
        <category>c++</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>c++</tag>
        <tag>mingw-w64</tag>
      </tags>
  </entry>
  <entry>
    <title>《HTML常用标签》</title>
    <url>/2020/02/13/article/%E3%80%8AHTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E3%80%8B/</url>
    <content><![CDATA[<h1 id="一、a标签"><a href="#一、a标签" class="headerlink" title="一、a标签"></a>一、a标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="href属性"><a href="#href属性" class="headerlink" title="href属性"></a>href属性</h2><ul>
<li>网址<br><a href="https://google.com/">https://google.com</a><br><a href="http://google.com/">http://google.com</a><br><a href="//google.com">&#x2F;&#x2F;google.com</a></li>
<li>路径<br>&#x2F;a&#x2F;b&#x2F;c&#x2F;index.html</li>
<li>伪协议<br>javascript:代码;<br>mailto:邮箱<br>tel:手机号</li>
<li>id<br>href&#x3D;”#名字”</li>
</ul>
<h2 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h2><ul>
<li>_balnk<br>新页面打开</li>
<li>_self<br>默认页面打卡</li>
<li>_top<br>在顶层页面打开</li>
<li>_parent<br>在此页面的上一层页面打开</li>
<li>自己命名<br>windows的name<br>iframe的name</li>
</ul>
<h1 id="二、img标签"><a href="#二、img标签" class="headerlink" title="二、img标签"></a>二、img标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h2><p>相对路径<br>绝对路径<br>网址</p>
<h2 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h2><p>加载失败显示的文字</p>
<h2 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h2><p>图片高度</p>
<h2 id="width属性"><a href="#width属性" class="headerlink" title="width属性"></a>width属性</h2><p>图片宽度</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>onload事件<br>加载成功时执行</li>
<li>onerror事件<br>加载失败时执行</li>
</ul>
<p>##响应式<br>max-width: 100%</p>
<h1 id="三、table标签"><a href="#三、table标签" class="headerlink" title="三、table标签"></a>三、table标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="comment">&lt;!-- 表格整体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 表格头部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!-- 行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="comment">&lt;!-- 单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="comment">&lt;!-- 表格底部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="相关样式"><a href="#相关样式" class="headerlink" title="相关样式"></a>相关样式</h2><ul>
<li>table-layout<br>auto：根据单元格内容调整跨宽度<br>fixed：根据单元格内容调整宽度，并且单元格内容平均</li>
<li>border-collapse: collapse<br>合并单元格之间的间隙</li>
<li>border-spacing<br>调整单元格之间的间隙</li>
</ul>
<h1 id="四、form标签"><a href="#四、form标签" class="headerlink" title="四、form标签"></a>四、form标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h2><p>谁来处理提交的数据<br>如：xxx.php</p>
<h2 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h2><ul>
<li>get<br>表单数据会附加在 action 属性的URI中，并以 ‘?’ 作为分隔符，然后这样得到的 URI 再发送给服务器</li>
<li>post<br>表单数据会包含在表单体内然后发送给服务器</li>
</ul>
<h2 id="autocomplete属性"><a href="#autocomplete属性" class="headerlink" title="autocomplete属性"></a>autocomplete属性</h2><ul>
<li>on<br>打开自动填充</li>
<li>off<br>关闭自动填充</li>
</ul>
<h2 id="target属性-1"><a href="#target属性-1" class="headerlink" title="target属性"></a>target属性</h2><p>用来指示在提交表单之后，在哪里显示收到的回复</p>
<ul>
<li>_blank<br>新页面</li>
<li>_self<br>当前页面</li>
<li>windows或iframe的name<br>程序猿自定义窗口名字接收</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和浅析</title>
    <url>/2021/08/16/article/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一道 LeetCode 简单题。下面我们简单的做一下，算法萌新，欢迎大佬提供更好的解决思路。</p>
<h2 id="无脑for循环"><a href="#无脑for循环" class="headerlink" title="无脑for循环"></a>无脑for循环</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>通过双重循环，进行逐一比较<br>当他们其中某个值相加等于 target 时，直接返回对应的下标 i, j</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nums[i] + nums[j] === target) <span class="keyword">return</span> [i, j]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="hash表"><a href="#hash表" class="headerlink" title="hash表"></a>hash表</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>建立一个哈希索引表，里面保存 key 为它的值，value 为对应的下标<br>通过使用 target - 当前遍历项的值，得出需要匹对的值<br>此时进入哈希表中，看看是否有这个差值<br>如果有则表示匹对，返回改匹对的下标，以及当前遍历的下标<br>没有则将当前遍历的 值 和 下标保存到哈希表中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">twoSum</span>(<span class="params">nums, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> reduce = target - nums[i]</span><br><span class="line">    <span class="keyword">if</span> (hash[reduce] !== <span class="literal">undefined</span>) <span class="keyword">return</span> [i, hash[reduce]]</span><br><span class="line">    <span class="keyword">else</span> hash[nums[i]] = i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>两数之和</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步实现一个Promise</title>
    <url>/2021/04/19/article/%E4%B8%80%E6%AD%A5%E6%AD%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本篇文章，默认你已经知道什么是 <strong>Promise</strong> ，然后我会带你一步步的实现一个简易的 Promise。将会以循序渐进的方式，分步骤实现。</p>
<p>本文章相关代码地址：<a href="https://github.com/layouwen/blog_demo_lpromise">https://github.com/layouwen/blog_demo_lpromise</a></p>
<p>如果本文章对你有所帮助，请不要吝啬你的 <strong>Start</strong> 哦~</p>
<h2 id="2、三种状态"><a href="#2、三种状态" class="headerlink" title="2、三种状态"></a>2、三种状态</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81.html">此处代码，点击这里</a></p>
<p>Promise 它一共会有三种状态：</p>
<ol>
<li>pending</li>
<li>fulfilled</li>
<li>rejected</li>
</ol>
<p>下面我们自己实现一个类，默认为 <strong>pending</strong> 状态，通过调用 <strong>resolve</strong> 或者 <strong>reject</strong> 改变其状态</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pending&#x27;</span>))) <span class="comment">// pending 状态</span></span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;我调用了resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(l1) <span class="comment">// fulfilled 状态</span></span><br><span class="line"><span class="keyword">const</span> l2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="string">&#x27;我调用了reject&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(l2) <span class="comment">// rejected 状态</span></span><br></pre></td></tr></table></figure>

<h2 id="3、实现-then-参数回调"><a href="#3、实现-then-参数回调" class="headerlink" title="3、实现 then 参数回调"></a>3、实现 then 参数回调</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0then%E5%8F%82%E6%95%B0%E5%9B%9E%E8%B0%83.html">此处代码，点击这里</a></p>
<p>返回的 <strong>Promise</strong> ，可以通过使用 <strong>then</strong> 传递成功和失败的回调。</p>
<p>通过 then 接收了两个回调。实现了分别调用回调的内容。但是发现，他们两个都会执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="title function_">onResolve</span>()</span><br><span class="line">    <span class="title function_">onReject</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>())</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>对执行时机进行调整。使其在调用 resolve 或 reject 才执行相关的回调</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cbResolve</span>() <span class="comment">// 报错</span></span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">cbReject</span>() <span class="comment">// 报错</span></span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolve</span> = onResolve</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbReject</span> = onReject</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>())</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>改装后，发现 resolve 和 reject 的执行时间比 then 的回调要快。导致无法执行 then 中的回调。我们需要对 resolve 和 reject 中执行回调的部分进行 <strong>延迟执行</strong>。可以使用 setTimeout 进行延迟</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">cbResolve</span>())</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">cbReject</span>())</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolve</span> = onResolve</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbReject</span> = onReject</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>())</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>考虑到 微任务 和 宏任务。我们可以使用 MutationObserver 替代 setTimeout</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="title function_">cbResolve</span>()</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; <span class="variable language_">this</span>.<span class="title function_">cbReject</span>()</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolve</span> = onResolve</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbReject</span> = onReject</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>())</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="4、链式调用"><a href="#4、链式调用" class="headerlink" title="4、链式调用"></a>4、链式调用</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8.html">此处代码，点击这里</a></p>
<p>在原本的 <strong>Promise</strong> 中。我们是可以使用 <strong>then</strong> 链式调用。意味着每个 <strong>then</strong> 都返回一个新的 <strong>Promise</strong>。</p>
<p>因为支持链式。所以我们之前的 <code>cbResolve</code> 和 <code>cbReject</code> 就不能单单保存一个回调。要改回一个数组，将每一个 <strong>then</strong> 中的回调。都保存到回调队列中。等待调用 <strong>resolve</strong> 或者 <strong>reject</strong> 后才执行所有回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="comment">/* new content start */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        onResolve &amp;&amp; <span class="title function_">onResolve</span>()</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>()</span><br><span class="line">        <span class="title function_">reject</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/* new content end */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>())</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>此时我们已经完成了链式调用，但是我们会发现，此时如果返回一个新的 <strong>Promise</strong> ，却无法获取 <strong>Promise</strong> 的结果。所以我们得加一些判断条件。我们也会发现，此时此刻我们无法接收到 <strong>res</strong> 或 <strong>err</strong> 的参数。所以我们也要完善一下参数传递问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        <span class="comment">/* new content start */</span></span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">        <span class="comment">/* new content end */</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        <span class="comment">/* new content start */</span></span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">        <span class="comment">/* new content end */</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* new content start */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* new content end */</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="comment">/* new content start */</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/* new content end */</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> l1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;我是传入的 resolve 数据&#x27;</span>))</span><br><span class="line">l1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个then的res&#x27;</span>, res)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;返回的Promise&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个then的err&#x27;</span>, err)</span><br><span class="line">)</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个then的res&#x27;</span>, res),</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个then的err&#x27;</span>, err)</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三个then的res&#x27;</span>, res),</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三个then的err&#x27;</span>, err)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<p>到现在我们已经实现了 <strong>then</strong> 的链式调用</p>
<h2 id="5、实现-catch-方法"><a href="#5、实现-catch-方法" class="headerlink" title="5、实现 catch 方法"></a>5、实现 catch 方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0catch%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p>在调用 <code>catch</code> 的时候自动在回调队列中添加一个错误回调函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;我是p1的错误信息&#x27;</span>))</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res)).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err))</span><br></pre></td></tr></table></figure>

<h2 id="6、resolve-和-reject-静态方法"><a href="#6、resolve-和-reject-静态方法" class="headerlink" title="6、resolve 和 reject 静态方法"></a>6、resolve 和 reject 静态方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/Resolve%E5%92%8CReject%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p>这两个静态方法比较简单。只需要返回一个固定状态的 <strong>Promise</strong> 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(res))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">LPromise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">LPromise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br></pre></td></tr></table></figure>

<h2 id="7、实现-finally-方法"><a href="#7、实现-finally-方法" class="headerlink" title="7、实现 finally 方法"></a>7、实现 finally 方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0finally%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p>这个与 catch 类似的实现，只需要保证不管成功还是失败都执行里面的回调。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(callback, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(res))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;我是p1的错误信息&#x27;</span>))</span><br><span class="line">p1.<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="8、实现-race-方法"><a href="#8、实现-race-方法" class="headerlink" title="8、实现 race 方法"></a>8、实现 race 方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0race%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p><strong>race</strong> 就是返回最先执行成功的结果。不管是成功还是失败。这样我们只需要遍历该 <strong>Promise</strong> ，正常返回数据。谁先执行完成，谁先返回即可。注意要控制状态，防止返回多个结果。 <strong>race</strong> 只需要返回最快的一个结果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(callback, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(res))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> isContinue = <span class="literal">true</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">200</span>))</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="number">2</span>), <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line"><span class="title class_">LPromise</span>.<span class="title function_">race</span>([p1, p2, p3]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="9、实现-all-方法"><a href="#9、实现-all-方法" class="headerlink" title="9、实现 all 方法"></a>9、实现 all 方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0all%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p><strong>all</strong> 方法当所有 <strong>Promise</strong> 都成功时返回所有结果的数组，否则返回第一个失败的结果。我们只需要遍历该 <strong>Promise</strong> 数组。定义个变量存放当前 <strong>res</strong> 的长度。如果长度等于数组的长度，我们就 <strong>resolve</strong> 出去。否则发现第一个失败的时候，直接 <strong>reject</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(callback, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(res))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> isContinue = <span class="literal">true</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resArr = []</span><br><span class="line">      <span class="keyword">const</span> length = promiseArr.<span class="property">length</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            resArr.<span class="title function_">push</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (resArr.<span class="property">length</span> === length) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(resArr)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">200</span>))</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="number">2</span>), <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line"><span class="title class_">LPromise</span>.<span class="title function_">all</span>([p1, p2, p3]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="10、实现-allSettled-方法"><a href="#10、实现-allSettled-方法" class="headerlink" title="10、实现 allSettled 方法"></a>10、实现 allSettled 方法</h2><p><a href="https://github.com/Layouwen/blog_demo_lpromise/blob/master/%E5%AE%9E%E7%8E%B0allSettled%E6%96%B9%E6%B3%95.html">此处代码，点击这里</a></p>
<p>该方法与 <strong>all</strong> 类似。只是这个方法不管成功或失败，只要该 <strong>Promise</strong> 数组执行完毕。就会返回所有结果。我们只需要判断执行过的 <strong>Promise</strong> 长度是否等于数组长度。当一致时就直接 <strong>resolve</strong>。并且每次执行的时候，将返回值以指定格式的对象保存到返回的 <strong>res</strong> 中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LPromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callbackFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;pending&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = <span class="literal">undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span> = []</span><br><span class="line">    <span class="title function_">callbackFn</span>(<span class="variable language_">this</span>.#resolve.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="variable language_">this</span>.#reject.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = res</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  #<span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseState]]&#x27;</span>] = <span class="string">&#x27;reject&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>[<span class="string">&#x27;[[PromiseResult]]&#x27;</span>] = err</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> cbFn</span><br><span class="line">      <span class="keyword">while</span> ((cbFn = <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        cbFn &amp;&amp; <span class="title function_">cbFn</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ob = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(run)</span><br><span class="line">    ob.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, &#123; <span class="attr">attributes</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">setAttribute</span>(<span class="string">&#x27;lpromise&#x27;</span>, <span class="string">&#x27;layouwen&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onResolve, onReject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbResolve</span> = res =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> resolveRes = onResolve &amp;&amp; <span class="title function_">onResolve</span>(res)</span><br><span class="line">        <span class="keyword">if</span> (resolveRes <span class="keyword">instanceof</span> <span class="title class_">LPromise</span>) &#123;</span><br><span class="line">          resolveRes.<span class="title function_">then</span>(resolve)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbResolveQueue</span>.<span class="title function_">push</span>(cbResolve)</span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">cbReject</span> = err =&gt; &#123;</span><br><span class="line">        onReject &amp;&amp; <span class="title function_">onReject</span>(err)</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">cbRejectQueue</span>.<span class="title function_">push</span>(cbReject)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">undefined</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">finally</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">then</span>(callback, callback)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(res))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params"><span class="literal">undefined</span>, reject</span>) =&gt;</span> <span class="title function_">reject</span>(err))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> isContinue = <span class="literal">true</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">promise</span> =&gt;</span> &#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">resolve</span>(res)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (isContinue) &#123;</span><br><span class="line">              isContinue = <span class="literal">false</span></span><br><span class="line">              <span class="title function_">reject</span>(err)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resArr = []</span><br><span class="line">      <span class="keyword">const</span> length = promiseArr.<span class="property">length</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            resArr.<span class="title function_">push</span>(res)</span><br><span class="line">            <span class="keyword">if</span> (resArr.<span class="property">length</span> === length) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(resArr)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">reject</span>(err)</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content start */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">allSettled</span>(<span class="params">promiseArr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> resArr = <span class="keyword">new</span> <span class="title class_">Array</span>(promiseArr.<span class="property">length</span>)</span><br><span class="line">      <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">      promiseArr.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">        p.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            obj.<span class="property">status</span> = <span class="string">&#x27;fulfilled&#x27;</span></span><br><span class="line">            obj.<span class="property">value</span> = res</span><br><span class="line">            resArr[num] = obj</span><br><span class="line">            num++</span><br><span class="line">            <span class="keyword">if</span> (num === resArr.<span class="property">length</span>) <span class="title function_">resolve</span>(resArr)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            obj.<span class="property">status</span> = <span class="string">&#x27;rejected&#x27;</span></span><br><span class="line">            obj.<span class="property">reason</span> = err</span><br><span class="line">            resArr[num] = obj</span><br><span class="line">            num++</span><br><span class="line">            <span class="keyword">if</span> (num === resArr.<span class="property">length</span>) <span class="title function_">resolve</span>(resArr)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">200</span>))</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="number">2</span>), <span class="number">1000</span>))</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">LPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="number">3</span>), <span class="number">3000</span>))</span><br><span class="line"><span class="title class_">LPromise</span>.<span class="title function_">allSettled</span>([p1, p2, p3]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res),</span><br><span class="line">  <span class="function"><span class="params">err</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>, err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>本文章实现的 Promise 不够完善，只是大概把实现原理带大家过一遍。Promise 的源码不是由 js 写的，所以我们只能尽可能使用 js 模仿。欢淫各位大佬补充更完善的版本。</p>
<p>交流学习~</p>
<blockquote>
<p>微信：gdgzyw<br>github: <a href="www.github.com/layouwen">www.github.com/layouwen</a></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>两种盒模型的区别</title>
    <url>/2020/04/29/article/%E4%B8%A4%E7%A7%8D%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、盒模型种类"><a href="#一、盒模型种类" class="headerlink" title="一、盒模型种类"></a>一、盒模型种类</h2><ol>
<li>content-box 内容盒模型</li>
<li>border-box 边框盒模型</li>
</ol>
<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><h3 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h3><p>盒模型的宽度为width的宽度<br>公式为： width &#x3D; 内容宽度</p>
<h3 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h3><p>边框模型的宽度为内容的宽度，加上内边距的宽度，再加上边框的宽度<br>公式为： width &#x3D; 内容的宽度 + padding + border</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul>
<li>盒模型在定义width宽度后，后面写padding和border是会改变盒子实际大小。如果需要保持固定大小，需要进行计算。</li>
<li>边框模型在定义width宽度后，不管怎么写padding和border宽度都固定在书写时的width。但是有可能导致内容被压缩，导致布局异常。</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>博客</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>为了白嫖 https 的图床, 顺手写了个 Picgo 的插件</title>
    <url>/2025/07/01/article/%E4%B8%BA%E4%BA%86%E7%99%BD%E5%AB%96%20https%20%E7%9A%84%E5%9B%BE%E5%BA%8A,%20%E9%A1%BA%E6%89%8B%E5%86%99%E4%BA%86%E4%B8%AA%20Picgo%20%E7%9A%84%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2025/07/01/xkyRgZGKVIqXev8.png" alt="image.png"></p>
<h2 id="🧠-前言"><a href="#🧠-前言" class="headerlink" title="🧠 前言"></a><strong>🧠 前言</strong></h2><blockquote>
<p>本文没有什么深奥的技术点，纯粹是个人使用 Obsidian + Hexo 搭博客 + 图片服务的折腾记录，顺便+1篇博客写作练习。</p>
</blockquote>
<hr>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>一直以来，我用 <strong>Obsidian</strong> 做“第二大脑”做知识沉淀。某天，「张三」想看我的一些笔记文章，于是我顺手用 <strong>Hexo</strong> 搭了个 <a href="https://blog.4van.top/">博客</a>，还加了 <strong>HTTPS</strong>。之前文章中插图都是用免费的 <strong>七牛云 HTTP 图床 + PicGo 上传</strong>，但是 HTTPS 的站点里图片全部挂了 🤣</p>
<hr>
<h2 id="初始方案：Nginx-反向代理七牛-HTTP-图床"><a href="#初始方案：Nginx-反向代理七牛-HTTP-图床" class="headerlink" title="初始方案：Nginx 反向代理七牛 HTTP 图床"></a><strong>初始方案：Nginx 反向代理七牛 HTTP 图床</strong></h2><p>我想走最简单的方式，用自己的服务器做 HTTPS 代理，流量转发给七牛。配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    server_name qiniussl.iamsb.top;</span><br><span class="line"></span><br><span class="line">    ssl_certificate     conf.d/cert/qiniussl.iamsb.top.pem;</span><br><span class="line">    ssl_certificate_key conf.d/cert/qiniussl.iamsb.top.key;</span><br><span class="line">    ssl_session_cache   shared:SSL:10m;</span><br><span class="line">    ssl_session_timeout  10m;</span><br><span class="line">    ssl_protocols        TLSv1.2 TLSv1.3;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass       http://qiniu.iamsb.top;</span><br><span class="line">        proxy_set_header Host            qiniu.iamsb.top;</span><br><span class="line">        proxy_set_header X-Real-IP       $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="✅-优点"><a href="#✅-优点" class="headerlink" title="✅ 优点"></a><strong>✅ 优点</strong></h3><ul>
<li>配置简单，不改 PicGo 上传逻辑；</li>
<li>不需迁移已有图片。</li>
</ul>
<h3 id="❌-缺点"><a href="#❌-缺点" class="headerlink" title="❌ 缺点"></a><strong>❌ 缺点</strong></h3><ul>
<li>我那台小鸡服务器，带宽和性能都拉满；</li>
<li>加载一张图要等好几秒，非常影响浏览体验。</li>
</ul>
<hr>
<h2 id="最终方案：找免费-HTTPS-图床-自定义-PicGo-插件"><a href="#最终方案：找免费-HTTPS-图床-自定义-PicGo-插件" class="headerlink" title="最终方案：找免费 HTTPS 图床 + 自定义 PicGo 插件"></a><strong>最终方案：找免费 HTTPS 图床 + 自定义 PicGo 插件</strong></h2><p>我转念一想：干脆省省事，找个<strong>免费又支持 HTTPS</strong>、<strong>API 无限制</strong>的图床，先临时把图托管上去, 后续在找找其他能安全存放图片的方案。后来找到了「<a href="https://111666.best/">16 图床</a>」，初印象还好那就它了。</p>
<p>为了继续保留 PicGo 上传体验，就把 PicGo 稍微改造一下，写了个自定义插件将图片上传到 16图床 上</p>
<p>插件源码地址：</p>
<p>➡️ GitHub: <a href="https://github.com/Layouwen/picgo-plugin-custom-api-uploader">Layouwen&#x2F;picgo‑plugin‑custom‑api‑uploader</a></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><table>
<thead>
<tr>
<th><strong>阶段</strong></th>
<th><strong>方案</strong></th>
<th><strong>优点</strong></th>
<th><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td>初期</td>
<td>Nginx 反向代理七牛 HTTP 图床</td>
<td>简单、迁移无痛</td>
<td>服务器性能和带宽受限</td>
</tr>
<tr>
<td>最终方案</td>
<td>免费 HTTPS 图床（16 图床）+ PicGo</td>
<td>上传体验一致，访问速度还行</td>
<td>需要维护 PicGo 自定义插件, 也不知道靠不靠谱</td>
</tr>
</tbody></table>
<p>若你也正考虑从 Obsidian 搭博客并处理图片问题，希望这篇记录能给你一些参考。欢迎留言讨论～</p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p><a href="https://github.com/layouwen">Github 主页</a></p>
<p><a href="https://blog.4van.top/">上文提到到的博客</a></p>
<p><del><a href="https://111666.best/">16图床</a></del> 国内无法访问!!!!</p>
<p><a href="https://sm.ms/">sm.ms</a> YYDS!!!!!!!!!!!</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>图床</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>picgo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>了解defineProperty，实现一个简单的vue数据响应式</title>
    <url>/2021/04/21/article/%E4%BA%86%E8%A7%A3defineProperty%EF%BC%8C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本文章相关代码地址：<a href="https://github.com/layouwen/blog_demo_defineproperty">https://github.com/layouwen/blog_demo_defineproperty</a></p>
<p>如果本文章对你有所帮助，请不要吝啬你的 <strong>Start</strong> 哦~</p>
<h2 id="2、对象进行读写监听"><a href="#2、对象进行读写监听" class="headerlink" title="2、对象进行读写监听"></a>2、对象进行读写监听</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发get&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;layouwen&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发set&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> newValue</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">obj.<span class="property">name</span> <span class="comment">// 触发get</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;yuouwen&#x27;</span> <span class="comment">// 触发set</span></span><br></pre></td></tr></table></figure>

<h2 id="3、观察者模式"><a href="#3、观察者模式" class="headerlink" title="3、观察者模式"></a>3、观察者模式</h2><p>下面有个场景。当儿子说要出去玩的时候，爸爸告诉孩子不能出去玩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> father = &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不给出去玩！准备吃饭了&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son = &#123;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爸，我出去玩会~&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">son.<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure>

<p>我们新建一个事件触发器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventObj</span> = <span class="keyword">new</span> <span class="title class_">EventTarget</span>()</span><br></pre></td></tr></table></figure>

<p>在执行 play 方法是，通知爸爸</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EventObj</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;callFather&#x27;</span>, father.<span class="property">eat</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son = &#123;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爸，我出去玩会~&#x27;</span>)</span><br><span class="line">    <span class="title class_">EventObj</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;callFather&#x27;</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、发布订阅模式"><a href="#4、发布订阅模式" class="headerlink" title="4、发布订阅模式"></a>4、发布订阅模式</h2><p>跟上面的场景一致，我们换个思路实现。首先创建一个保存需要执行函数的队列。提供两个方法：添加新的任务 <code>addSub</code>，执行所有任务 <code>notify</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span> = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">notify</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="title function_">update</span>())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建一个用于新建任务的类，提供一个方法：执行自己的任务 <code>update</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span> = callback</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">callback</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实例化 Dep，用于将新建的任务加入到队列中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span><br></pre></td></tr></table></figure>

<p>创建两个对象，模拟妈妈和爸爸。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> father = &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    dep.<span class="title function_">addSub</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爸爸：不给出去玩！准备吃饭了&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mother = &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    dep.<span class="title function_">addSub</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;妈妈：不给出去玩！准备吃饭了&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行里面的方法，使其加入到等待任务中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">father.<span class="title function_">eat</span>()</span><br><span class="line">mother.<span class="title function_">eat</span>()</span><br></pre></td></tr></table></figure>

<p>此时创建一个儿子对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> son = &#123;</span><br><span class="line">  <span class="title function_">play</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;儿子：爸，我出去玩会~&#x27;</span>)</span><br><span class="line">    dep.<span class="title function_">notify</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我设置一个延迟，在 2 秒回触发儿子的 <code>play</code> 方法。看看是否会将爸爸和妈妈中的等待任务给执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(son.<span class="property">play</span>, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">儿子：爸，我出去玩会~</span><br><span class="line">爸爸：不给出去玩！准备吃饭了</span><br><span class="line">妈妈：不给出去玩！准备吃饭了</span><br></pre></td></tr></table></figure>

<h2 id="5、观察模式模拟-Vue-的数据监听响应"><a href="#5、观察模式模拟-Vue-的数据监听响应" class="headerlink" title="5、观察模式模拟 Vue 的数据监听响应"></a>5、观察模式模拟 Vue 的数据监听响应</h2><p>先实现通过正则表达式，将<code>&#123;&#123;value&#125;&#125;</code>内的值替换成，data 中的数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LVue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$option</span> = option</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_data</span> = option.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">$option</span>.<span class="property">el</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compileNodes</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">/* 获取所有子节点 */</span></span><br><span class="line">    <span class="keyword">const</span> childNodes = el.<span class="property">childNodes</span></span><br><span class="line">    childNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* 如果为元素节点，并且该节点内部还有内容，就继续进行遍历编译 */</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 元素节点 */</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* 文本节点 */</span></span><br><span class="line">        <span class="keyword">const</span> textContent = node.<span class="property">textContent</span></span><br><span class="line">        <span class="comment">// 创建正则。匹配&#123;&#123;&#125;&#125;中的内容</span></span><br><span class="line">        <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\&#123;\&#125;\s]+)\s*\&#125;\&#125;/g</span></span><br><span class="line">        <span class="comment">/* 匹配成功的就是我们需要的内容 */</span></span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(textContent)) &#123;</span><br><span class="line">          <span class="comment">// 获得匹配到的内容</span></span><br><span class="line">          <span class="keyword">const</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span></span><br><span class="line">          <span class="comment">// 替换内容</span></span><br><span class="line">          node.<span class="property">textContent</span> = node.<span class="property">textContent</span>.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">_data</span>[name])</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">LVue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;广州市荔湾区&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们实现了简单的替换后，我们开始实现数据劫持监听</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 继承 EventTarget 实现监听事件</span></span><br><span class="line"><span class="comment">/* new content start */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LVue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">EventTarget</span> &#123;</span><br><span class="line">  <span class="comment">/* new content end */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$option</span> = option</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_data</span> = option.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">observe</span>(option.<span class="property">data</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compile</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data)</span><br><span class="line">    <span class="keyword">const</span> that = <span class="variable language_">this</span></span><br><span class="line">    keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> value = data[key]</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">        <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">          <span class="comment">/* new content start */</span></span><br><span class="line">          <span class="comment">// 触发对应 key 事件</span></span><br><span class="line">          that.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(key, &#123; <span class="attr">detail</span>: newValue &#125;))</span><br><span class="line">          <span class="comment">/* new content end */</span></span><br><span class="line">          <span class="comment">// 更新闭包中缓存的 value</span></span><br><span class="line">          value = newValue</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">$option</span>.<span class="property">el</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(el)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">compileNodes</span>(<span class="params">el</span>) &#123;</span><br><span class="line">    <span class="comment">/* 获取所有子节点 */</span></span><br><span class="line">    <span class="keyword">const</span> childNodes = el.<span class="property">childNodes</span></span><br><span class="line">    childNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* 如果为元素节点，并且该节点内部还有内容，就继续进行遍历编译 */</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span> &amp;&amp; node.<span class="property">childNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 元素节点 */</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">/* 文本节点 */</span></span><br><span class="line">        <span class="keyword">const</span> textContent = node.<span class="property">textContent</span></span><br><span class="line">        <span class="comment">// 创建正则。匹配&#123;&#123;&#125;&#125;中的内容</span></span><br><span class="line">        <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\&#123;\&#125;\s]+)\s*\&#125;\&#125;/g</span></span><br><span class="line">        <span class="comment">/* 匹配成功的就是我们需要的内容 */</span></span><br><span class="line">        <span class="keyword">if</span> (reg.<span class="title function_">test</span>(textContent)) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;this1&#x27;</span>)</span><br><span class="line">          <span class="comment">// 获得匹配到的内容</span></span><br><span class="line">          <span class="keyword">const</span> name = <span class="title class_">RegExp</span>.<span class="property">$1</span></span><br><span class="line">          <span class="comment">// 替换内容</span></span><br><span class="line">          node.<span class="property">textContent</span> = node.<span class="property">textContent</span>.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">_data</span>[name])</span><br><span class="line">          <span class="comment">/* new content start */</span></span><br><span class="line">          <span class="comment">// 监听 name 对应的事件</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">addEventListener</span>(name, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, <span class="string">&#x27;this2&#x27;</span>)</span><br><span class="line">            <span class="keyword">const</span> newValue = e.<span class="property">detail</span></span><br><span class="line">            <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">_data</span>[name]</span><br><span class="line">            node.<span class="property">textContent</span> = node.<span class="property">textContent</span>.<span class="title function_">replace</span>(oldValue, newValue)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;页面数据刷新了&#x27;</span>)</span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">/* new content end */</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lvue = <span class="keyword">new</span> <span class="title class_">LVue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">    <span class="attr">address</span>: <span class="string">&#x27;广州市荔湾区&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  lvue.<span class="property">_data</span>.<span class="property">name</span> = <span class="string">&#x27;梁又文&#x27;</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    lvue.<span class="property">_data</span>.<span class="property">age</span> = <span class="number">23</span></span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>

<h2 id="6、发布订阅模式版本"><a href="#6、发布订阅模式版本" class="headerlink" title="6、发布订阅模式版本"></a>6、发布订阅模式版本</h2><p>通过依赖收集，对用 notify 触发所有收集的依赖实现响应式。简单模拟了一下 v-model、v-text 以及 v-html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>v-text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>年龄:&#123;&#123;age&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>地址:&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">LVue2</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">option</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$option</span> = option</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$data</span> = option.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">observer</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">compile</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">observer</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span></span><br><span class="line"><span class="language-javascript">      keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">keyName</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">$data</span>[keyName]</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, keyName, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">configurable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> value</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            dep.<span class="title function_">notify</span>(newValue)</span></span><br><span class="line"><span class="language-javascript">            value = newValue</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">compile</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="variable language_">this</span>.<span class="property">$option</span>.<span class="property">el</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(el)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">compileNodes</span>(<span class="params">el</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> childNodes = el.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">      childNodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">/* new content start */</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 新增 v-model 属性监听</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> attrs = node.<span class="property">attributes</span></span></span><br><span class="line"><span class="language-javascript">          ;[...attrs].<span class="title function_">forEach</span>(<span class="function"><span class="params">attr</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> attrName = attr.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> attrValue = attr.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (attrName === <span class="string">&#x27;v-model&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              node.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">$data</span>[attrValue]</span></span><br><span class="line"><span class="language-javascript">              node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$data</span>[attrValue] = e.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attrName === <span class="string">&#x27;v-text&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              node.<span class="property">innerText</span> = <span class="variable language_">this</span>.<span class="property">$data</span>[attrValue]</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, attrValue, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                node.<span class="property">innerText</span> = newValue</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (attrName === <span class="string">&#x27;v-html&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">              node.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">$data</span>[attrValue]</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, attrValue, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                node.<span class="property">innerHTML</span> = newValue</span></span><br><span class="line"><span class="language-javascript">              &#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">/* new content end */</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (node.<span class="property">childNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="title function_">compileNodes</span>(node)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> textContent = node.<span class="property">textContent</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;\s*([^\&#123;\&#125;\s]+)\s*\&#125;\&#125;/g</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (reg.<span class="title function_">test</span>(textContent)) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> valueName = <span class="title class_">RegExp</span>.<span class="property">$1</span></span></span><br><span class="line"><span class="language-javascript">            node.<span class="property">textContent</span> = node.<span class="property">textContent</span>.<span class="title function_">replace</span>(reg, <span class="variable language_">this</span>.<span class="property">$data</span>[valueName])</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">new</span> <span class="title class_">Watcher</span>(<span class="variable language_">this</span>.<span class="property">$data</span>, valueName, <span class="function"><span class="params">newValue</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">const</span> oldValue = <span class="variable language_">this</span>.<span class="property">$data</span>[valueName]</span></span><br><span class="line"><span class="language-javascript">              node.<span class="property">textContent</span> = node.<span class="property">textContent</span>.<span class="title function_">replace</span>(oldValue, newValue)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">subs</span> = []</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addSub</span>(<span class="params">sub</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">notify</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        sub.<span class="title function_">update</span>(newValue)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params">data, key, cb</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 保存实例对象到 Dep 中的 target 中</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 为了触发 get 收集依赖</span></span></span><br><span class="line"><span class="language-javascript">      data[key]</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">update</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> lvue2 = <span class="keyword">new</span> <span class="title class_">LVue2</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&#x27;梁又文&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">23</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">address</span>: <span class="string">&#x27;广州市荔湾区&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> (lvue2.<span class="property">$data</span>.<span class="property">name</span> = <span class="string">&#x27;梁文文&#x27;</span>), <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> (lvue2.<span class="property">$data</span>.<span class="property">name</span> = <span class="string">&#x27;我是v-text的内容&#x27;</span>), <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> (lvue2.<span class="property">$data</span>.<span class="property">name</span> = <span class="string">&#x27;&lt;h3&gt;我是v-html的内容&lt;/h3&gt;&#x27;</span>), <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>事件委托</title>
    <url>/2020/06/04/article/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>事件委托，用白话来讲就是将事件监听交给自己的祖先元素进行处理。</p>
<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>事件委托的实现是根据事件冒泡实现的,利用事件冒泡的特性。对于父元素使用事件监听，当父盒子里面的某个元素被触发时，向上冒泡，触发父元素的事件。利用 <code>target</code> 后去触发冒泡事件的元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> domUl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#father&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    domUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;li&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>target</code> 下的 <code>nodeName</code> 属性判断。是否是我们需要监听的元素。</p>
<h2 id="三、优点"><a href="#三、优点" class="headerlink" title="三、优点"></a>三、优点</h2><ul>
<li>可以节省大量内存</li>
<li>可以监听动态元素</li>
</ul>
<blockquote>
<p>注意：事件委托需要依赖事件冒泡，如果不支持事件冒泡的元素没办法使用事件委托。</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>homebrew</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>你不知道的WebComponent</title>
    <url>/2021/04/02/article/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84WebComponent/</url>
    <content><![CDATA[<h2 id="1、原生也有组件？"><a href="#1、原生也有组件？" class="headerlink" title="1、原生也有组件？"></a>1、原生也有组件？</h2><p>现在Vue、React的大规模流行。前端组件化已经成为潮流，但是原生的组件又有多少人了解了。下面通过几个代码示例，让你快速了解原生怎么写组件。</p>
<h2 id="2、通过继承-HTML-实现组件"><a href="#2、通过继承-HTML-实现组件" class="headerlink" title="2、通过继承 HTML 实现组件"></a>2、通过继承 HTML 实现组件</h2><p><a href="http://layouwen.gitee.io/webcomponent-demo/demo1.html">代码demo示例</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过继承 HTMLImageElement 实现组件化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyImg</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLImageElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="keyword">const</span> src = <span class="string">&#x27;https://resource.ttplus.cn/publish/app/pics/2019/04/18/233772/76d96560-7211-483d-988c-dc00d8391f41.jpg&#x27;</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// this 指向继承后的新组件</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">src</span> = src</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件名字 继承后的类 需要继承的标签</span></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-img&#x27;</span>, <span class="title class_">MyImg</span>, &#123;</span><br><span class="line">  <span class="attr">extends</span>: <span class="string">&#x27;img&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用的时候只需要在你继承的标签中，<code>is=&quot;你的组件名&quot;</code> 即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">is</span>=<span class="string">&quot;my-img&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3、独立的组件"><a href="#3、独立的组件" class="headerlink" title="3、独立的组件"></a>3、独立的组件</h2><p><a href="http://layouwen.gitee.io/webcomponent-demo/demo2.html">代码demo示例</a></p>
<h3 id="demo2-html"><a href="#demo2-html" class="headerlink" title="demo2.html"></a>demo2.html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 样式隔离，无法操作 MyCom 内部的样式 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.my_com_main</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: pink;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">my-com</span> <span class="attr">class</span>=<span class="string">&quot;my_com&quot;</span> <span class="attr">cusAttr</span>=<span class="string">&quot;我是自定义属性&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;middle&quot;</span>&gt;</span>我是主要内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span>我是底部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;head&quot;</span>&gt;</span>我是头部插槽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-com</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./demo2.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="MyCom-js"><a href="#MyCom-js" class="headerlink" title="MyCom.js"></a>MyCom.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;template&#x27;</span>)</span><br><span class="line">template.<span class="property">innerHTML</span> = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">  .my_com_wrapper &#123;</span></span><br><span class="line"><span class="string">    border: 1px solid red;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .my_com_main &#123;</span></span><br><span class="line"><span class="string">    height: 100px;</span></span><br><span class="line"><span class="string">    background: skyblue;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&quot;my_com_wrapper&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;header&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;head&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/header&gt;</span></span><br><span class="line"><span class="string">  &lt;main class=&quot;my_com_main&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;middle&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/main&gt;</span></span><br><span class="line"><span class="string">  &lt;footer&gt;</span></span><br><span class="line"><span class="string">    &lt;slot name=&quot;bottom&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">  &lt;/footer&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCom</span> <span class="keyword">extends</span> <span class="title class_ inherited__">HTMLElement</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">// 获取自定义组件的属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;class&#x27;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;cusAttr&#x27;</span>))</span><br><span class="line">    <span class="comment">// 使用 attachShadow 与外面样式进行隔离</span></span><br><span class="line">    <span class="keyword">const</span> sd = <span class="variable language_">this</span>.<span class="title function_">attachShadow</span>(&#123; <span class="attr">mode</span>: <span class="string">&#x27;open&#x27;</span> &#125;)</span><br><span class="line">    sd.<span class="title function_">appendChild</span>(template.<span class="property">content</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">customElements.<span class="title function_">define</span>(<span class="string">&#x27;my-com&#x27;</span>, <span class="title class_">MyCom</span>)</span><br></pre></td></tr></table></figure>

<h3 id="demo2-js"><a href="#demo2-js" class="headerlink" title="demo2.js"></a>demo2.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./MyCom.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myComEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.my_com&#x27;</span>)</span><br><span class="line"><span class="comment">// 当 attachShadow 的 mode 为 open 时，可以获取 shadowRoot 的内容并且操作。</span></span><br><span class="line"><span class="comment">// 如果 mode 为 closed 则无法获取该节点信息</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myComEl.<span class="property">shadowRoot</span>)</span><br><span class="line"><span class="keyword">const</span> myColElChildren = myComEl.<span class="property">shadowRoot</span>.<span class="property">children</span></span><br><span class="line">![...myColElChildren].<span class="title function_">forEach</span>(<span class="function"><span class="params">el</span> =&gt;</span> (el.<span class="property">style</span> = <span class="string">&#x27;font-size: 40px;&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="4、如何实现自定义事件"><a href="#4、如何实现自定义事件" class="headerlink" title="4、如何实现自定义事件"></a>4、如何实现自定义事件</h2><p><a href="http://layouwen.gitee.io/webcomponent-demo/demo3.html">代码demo示例</a></p>
<p>通过 EventTarget 添加自定义事件。在通过 dispatchEvent 触发 CustomEvent 事件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn_a&quot;</span>&gt;</span>自定义事件a<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn_b&quot;</span>&gt;</span>自定义事件b<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 创建事件</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">EventTarget</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 添加事件</span></span></span><br><span class="line"><span class="language-javascript">  obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;a&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;触发了事件a&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;b&#x27;</span>, <span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&#x27;触发了事件b&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn_a&#x27;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;a&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn_b&#x27;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;b&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、实现简易版Dialog组件"><a href="#5、实现简易版Dialog组件" class="headerlink" title="5、实现简易版Dialog组件"></a>5、实现简易版Dialog组件</h2><p>由于代码太多，直接放链接了</p>
<p><a href="http://layouwen.gitee.io/webcomponent-demo/demo4.html">代码demo示例</a></p>
<h2 id="6、仓库源码地址"><a href="#6、仓库源码地址" class="headerlink" title="6、仓库源码地址"></a>6、仓库源码地址</h2><p><a href="https://github.com/Layouwen/webcomponent-demo">https://github.com/Layouwen/webcomponent-demo</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>webcomponent</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Node.js和JSON搭建简单的动态服务器</title>
    <url>/2020/06/14/article/%E4%BD%BF%E7%94%A8Node.js%E5%92%8CJSON%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、创建html页面"><a href="#一、创建html页面" class="headerlink" title="一、创建html页面"></a>一、创建html页面</h2><p>创建4个页面，index.html、register.html、sign_in.html、home.html</p>
<ul>
<li>index.html 默认主页</li>
<li>register.html 用于注册账号</li>
<li>sign_in.html 用于登录账号</li>
<li>home.html 用于显示登录后的页面</li>
</ul>
<h3 id="主要代码片段"><a href="#主要代码片段" class="headerlink" title="主要代码片段"></a>主要代码片段</h3><p>register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> $form = $(<span class="string">&#x27;#registerForm&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">$form.<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> name = $form.<span class="title function_">find</span>(<span class="string">&quot;input[name=name]&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> password = $form.<span class="title function_">find</span>(<span class="string">&#x27;input[name=password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, password)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// pass AJAX post data</span></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;/register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">contentType</span>: <span class="string">&#x27;text/json; charset=UTF-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            name, <span class="comment">// name: name </span></span></span><br><span class="line"><span class="language-javascript">            password <span class="comment">// password: password</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;注册成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&#x27;/sign_in.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>sign_in.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;signInForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $form = $(<span class="string">&#x27;#signInForm&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    $form.<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// get name password</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> name = $form.<span class="title function_">find</span>(<span class="string">&quot;input[name=name]&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> password = $form.<span class="title function_">find</span>(<span class="string">&#x27;input[name=password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pass AJAX post data</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;/sign_in&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&#x27;text/json; charset=UTF-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                name,</span></span><br><span class="line"><span class="language-javascript">                password</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&#x27;/home.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>home.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;loginStatus&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    你好,&#123;&#123;user.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sign_in.html&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Node服务器"><a href="#二、Node服务器" class="headerlink" title="二、Node服务器"></a>二、Node服务器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> port = process.<span class="property">argv</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!port) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请输入指定端口。如：\nnode server.js 8888&#x27;</span>)</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> parsedUrl = url.<span class="title function_">parse</span>(request.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">var</span> pathWithQuery = request.<span class="property">url</span></span><br><span class="line">    <span class="keyword">var</span> queryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (pathWithQuery.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        queryString = pathWithQuery.<span class="title function_">substring</span>(pathWithQuery.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> path = parsedUrl.<span class="property">pathname</span></span><br><span class="line">    <span class="keyword">var</span> query = parsedUrl.<span class="property">query</span></span><br><span class="line">    <span class="keyword">var</span> method = request.<span class="property">method</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/******** main start ************/</span></span><br><span class="line">    <span class="comment">// 读取 session 文件,转化为对象</span></span><br><span class="line">    <span class="keyword">const</span> session = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./session.json&#x27;</span>).<span class="title function_">toString</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path === <span class="string">&#x27;/sign_in&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 读数据库</span></span><br><span class="line">        <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>))</span><br><span class="line">        <span class="keyword">const</span> array = []</span><br><span class="line">        <span class="comment">// 每次接受数据就添加进数组</span></span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            array.<span class="title function_">push</span>(chunk)</span><br><span class="line">        &#125;)</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 转化字符串</span></span><br><span class="line">            <span class="keyword">const</span> string = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(array).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// 在转化为对象</span></span><br><span class="line">            <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(string)</span><br><span class="line">            <span class="comment">// 找到符合的 user</span></span><br><span class="line">            <span class="keyword">const</span> user = userArray.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span> === obj.<span class="property">name</span> &amp;&amp; user.<span class="property">password</span> === obj.<span class="property">password</span>) <span class="comment">// 成功返回符合的对象，失败返回undefined</span></span><br><span class="line">            <span class="keyword">if</span> (user === <span class="literal">undefined</span>) &#123; <span class="comment">// 失败</span></span><br><span class="line">                response.<span class="property">statusCode</span> = <span class="number">400</span></span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-Type&#x27;</span>, <span class="string">&#x27;text/JSON; charset=UTF-8&#x27;</span>)</span><br><span class="line">                response.<span class="title function_">end</span>(<span class="string">`&#123;&quot;errorCode&quot;:4001&#125;`</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 成功</span></span><br><span class="line">                response.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">                <span class="comment">// 设置 Cookie</span></span><br><span class="line">                <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">                session[random] = &#123;</span><br><span class="line">                    <span class="attr">user_id</span>: user.<span class="property">id</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 写入数据</span></span><br><span class="line">                fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./session.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(session))</span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">`&#x27;session_id=<span class="subst">$&#123;random&#125;</span>; HttpOnly&#x27;`</span>)</span><br><span class="line">                response.<span class="title function_">end</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/home.html&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 Cookie</span></span><br><span class="line">        <span class="keyword">const</span> cookie = request.<span class="property">headers</span>[<span class="string">&#x27;cookie&#x27;</span>]</span><br><span class="line">        <span class="keyword">let</span> sessionId</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 读取 Cookie 中的 id 值</span></span><br><span class="line">            sessionId = cookie.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="title function_">indexOf</span>(<span class="string">&#x27;session_id=&#x27;</span>) &gt;= <span class="number">0</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (sessionId &amp;&amp; session[sessionId]) &#123;</span><br><span class="line">            <span class="comment">// 从 session 中读取对应的值</span></span><br><span class="line">            <span class="keyword">const</span> userId = session[sessionId].<span class="property">user_id</span></span><br><span class="line">            <span class="comment">// 读数据库</span></span><br><span class="line">            <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>))</span><br><span class="line">            <span class="comment">// 找到符合的 user</span></span><br><span class="line">            <span class="keyword">let</span> user = userArray.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> === userId)</span><br><span class="line">            <span class="keyword">const</span> homeHtml = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./public/home.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="keyword">let</span> string</span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                string = homeHtml.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;loginStatus&#125;&#125;&#x27;</span>, <span class="string">&#x27;已登录&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;user.name&#125;&#125;&#x27;</span>, user.<span class="property">name</span>)</span><br><span class="line">                response.<span class="title function_">write</span>(string)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 读取源文件内容</span></span><br><span class="line">            <span class="keyword">const</span> homeHtml = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./public/home.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// 替换文字</span></span><br><span class="line">            <span class="keyword">const</span> string = homeHtml.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;loginStatus&#125;&#125;&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;user.name&#125;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            response.<span class="title function_">write</span>(string)</span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/register&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>)</span><br><span class="line">        <span class="comment">// read database</span></span><br><span class="line">        <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>)) <span class="comment">// read database</span></span><br><span class="line">        <span class="keyword">const</span> array = []</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            array.<span class="title function_">push</span>(chunk)</span><br><span class="line">        &#125;)</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// convert string</span></span><br><span class="line">            <span class="keyword">const</span> string = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(array).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// convert obj</span></span><br><span class="line">            <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(string)</span><br><span class="line">            <span class="comment">// last user id</span></span><br><span class="line">            <span class="keyword">const</span> lastUser = userArray[userArray.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">            <span class="comment">// new user</span></span><br><span class="line">            <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">                <span class="attr">id</span>: lastUser ? lastUser.<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: obj.<span class="property">name</span>,</span><br><span class="line">                <span class="attr">password</span>: obj.<span class="property">password</span></span><br><span class="line">            &#125;</span><br><span class="line">            userArray.<span class="title function_">push</span>(newUser)</span><br><span class="line">            <span class="comment">// write data</span></span><br><span class="line">            fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userArray))</span><br><span class="line">        &#125;)</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">        <span class="keyword">let</span> content</span><br><span class="line">        <span class="comment">// setting index</span></span><br><span class="line">        <span class="keyword">const</span> filePath = path === <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : path</span><br><span class="line">        <span class="comment">// judge type</span></span><br><span class="line">        <span class="keyword">const</span> index = filePath.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> suffix = filePath.<span class="title function_">substring</span>(index)</span><br><span class="line">        <span class="keyword">const</span> fileType = &#123;</span><br><span class="line">            <span class="string">&#x27;.html&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;.css&#x27;</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;.js&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">`<span class="subst">$&#123;fileType[suffix] || <span class="string">&quot;text/html&quot;</span>&#125;</span>;charset=utf-8`</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            content = fs.<span class="title function_">readFileSync</span>(<span class="string">`./public<span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            content = <span class="string">&#x27;文件路径不存在&#x27;</span></span><br><span class="line">            response.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">write</span>(content)</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******** main end ************/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听 &#x27;</span> + port + <span class="string">&#x27; 成功！请输入下列地址访问\nhttp://localhost:&#x27;</span> + port)</span><br></pre></td></tr></table></figure>

<h2 id="三、主要思路"><a href="#三、主要思路" class="headerlink" title="三、主要思路"></a>三、主要思路</h2><h3 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h3><p>使用jQuery的ajax将数据发送请求 &#x2F;register 给后端，成功则跳转到 sign_in.html</p>
<blockquote>
<p>数据需要使用 JSON.stringify 转化为字符串在提交</p>
</blockquote>
<h3 id="register"><a href="#register" class="headerlink" title="&#x2F;register"></a>&#x2F;register</h3><p>读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进去。将数组转换为字符串，在转换为对象。<br>获取数据库中最小的 id 值，将数据组成新的对象，添加进入 数据库 中。</p>
<h3 id="sign-in-html"><a href="#sign-in-html" class="headerlink" title="sign_in.html"></a>sign_in.html</h3><p>使用ajax将数据发送请求 &#x2F;sign_in 给后端，成功则跳转 home.html</p>
<h3 id="sign-in"><a href="#sign-in" class="headerlink" title="&#x2F;sign_in"></a>&#x2F;sign_in</h3><p>读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进去。将数组转换为字符串，在转换为对象。<br>在读取后的数据库中，查找有没有符合条件的 user，成功返回读取后的对象，失败返回 undefined。<br>如果成功，设置随机数，将 随机数的值 与 user的id 绑定。并添加到 session.json 中。然后 setHeader，将cookie发送到浏览器。</p>
<h3 id="home"><a href="#home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h3><p>获取登入成功后 cookie 的值。读取 session 中对应的随机数。如果随机数和session对应的随机数值存在，就显示已登录，否则显示未登录</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用charles进行小程序抓包</title>
    <url>/2021/02/20/article/%E4%BD%BF%E7%94%A8charles%E8%BF%9B%E8%A1%8C%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>因公司需求，需要使用uni进行平台同步开发。其中字节跳动的真机调试就很烦人。<br>ios无法进行真机调试，及时用安卓进入调试也只能看到发送请求。响应你就别想看了。<br>以至于你想看每个请求的响应数据，都要用console出来。所以引出来今天这篇文章。<br>如何使用charles进行小程序抓包。</p>
<h2 id="2、下载"><a href="#2、下载" class="headerlink" title="2、下载"></a>2、下载</h2><p><a href="https://www.charlesproxy.com/latest-release/download.do">charles下载地址</a></p>
<h2 id="3、安装"><a href="#3、安装" class="headerlink" title="3、安装"></a>3、安装</h2><p>没什么好说的，无脑下一部即可。</p>
<p>Next &#x3D;&gt; 勾选 I accept the terms is the License Agreement &#x3D;&gt; Next &#x3D;&gt; Next &#x3D;&gt; Install &#x3D;&gt; Finish</p>
<h2 id="4、配置"><a href="#4、配置" class="headerlink" title="4、配置"></a>4、配置</h2><h3 id="4-1-前置准备"><a href="#4-1-前置准备" class="headerlink" title="4.1 前置准备"></a>4.1 前置准备</h3><ul>
<li>电脑打开了 <strong>Charles</strong> 软件</li>
<li>手机与电脑在同一个网段（你可以理解为用一个wifi）</li>
</ul>
<p>接着我们只需要打开手机，进入wifi详情页。设置代理转发到ip地址的8888端口即可。</p>
<p>下面以 <strong>Windows10</strong> + <strong>iphone11Pro</strong> 举例</p>
<ol>
<li>在Windows打开命令行（Ctrl+R，输入cmd回车），输入<code>ipconfig</code>回车</li>
<li>复制 <code>IPv4 Address</code> 的 <code>ip</code>地址</li>
<li>打开手机，连接你的WiFi。点击wifi进入详情页，滑动到底部。看到有个代理， 打开它。然后输入我们复制的<code>IPv4 Address</code>的ip地址，以及端口号<code>8888</code>，点击保存</li>
<li>手机点击保存后，如果你的输入正确，此时电脑会提示<code>Connection from 你的ip地址</code>的弹窗。我们点击<code>Allow</code>即可。</li>
</ol>
<h3 id="4-2-查看http包"><a href="#4-2-查看http包" class="headerlink" title="4.2 查看http包"></a>4.2 查看http包</h3><p>完成上面的前置操作后，我们只需保证电脑的软件启动中。并且手机与电脑保持在一个网段。我们手机访问的http的包就会被 <strong>Charles</strong> 抓到。</p>
<h3 id="4-3-查看https包"><a href="#4-3-查看https包" class="headerlink" title="4.3 查看https包"></a>4.3 查看https包</h3><p>完成上面的操作后，你只可以查看http的包，如果是https的包会显示unknow。此时就继续往下操作。</p>
<ol>
<li>在 <strong>Charles</strong> 菜单栏找到 <code>Help</code>。点击 <code>SSL Proxying</code>,点击 <code>Install Charles Root Certificate on a Mobile Device or Remote Browser</code>。</li>
<li>此时软件会弹出一个提示框，里面会显示你的端口号。<code>HTTP proxy on 你的ip地址:8888</code>,你可以核对一下你手机设置代理的时候是否与提示的ip地址一致。</li>
<li>确保一致后，打开手机。进入浏览器，输入地址 <code>chls.pro/ssl</code>。点击允许 。然后点击关闭即可安装证书。如果你的IOS系统为10或以上，需要到 <code>设置</code> 页面，进行安装证书。</li>
<li>在 <strong>Charles</strong> 菜单栏，选择 <code>Proxy</code>。选择 <code>SSL Proxying Settings</code>。在 <code>Include</code>处，点击 <code>Add</code>。Host和Port均输入 <code>*</code> 号。点击 <code>OK</code> 即可。</li>
<li>大功告成，你现在可以用手机访问一下  <code>https</code> 协议的网站看看抓包效果了。</li>
</ol>
<blockquote>
<p>如果在本文章遇到什么问题，可以联系微信 <code>gdgzyw</code> 交流。<br>如果想交朋友，我也肥肠欢淫。</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
        <category>抓包</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>charles</tag>
        <tag>小程序</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>使用原生js实现复制剪贴板</title>
    <url>/2021/12/28/article/%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
    <content><![CDATA[<p>在平时需求中，经常会遇到一些秘钥，或者一大串文章需要复制再或者百度网盘链接。此时我们可以提供一个按钮，让用户一键复制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">el.<span class="title function_">setAttribute</span>(<span class="string">&#x27;value&#x27;</span>, secret);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(el);</span><br><span class="line">el.<span class="title function_">select</span>();</span><br><span class="line"><span class="keyword">const</span> flag = <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&#x27;copy&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(el);</span><br><span class="line">flag &amp;&amp; <span class="title function_">alert</span>(<span class="string">&#x27;复制成功&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码，在不同框架放到，事件监听内即可。提示方式也可以用相应的组件进行替代。</p>
<p>简单解释一下思路：  </p>
<ul>
<li>创建一个input标签</li>
<li>把我们需要赋值的内容设置到属性中</li>
<li>调用选择方法，选中文本</li>
<li>接着执行浏览器的复制命令</li>
<li>复制成功后删除我们临时生成的节点</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>使用脚本文件辅助开发</title>
    <url>/2020/04/06/article/%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E8%BE%85%E5%8A%A9%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一、组合语句"><a href="#一、组合语句" class="headerlink" title="一、组合语句"></a>一、组合语句</h2><p>使用 <code>&amp;&amp;</code> 当上一条指令成功才执行下一条指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchu 1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;成功&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>;</code> ，同时执行两条指令，不管是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> 2.txt; <span class="built_in">echo</span> <span class="string">&#x27;我不管是否成功&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、使用脚本完成快捷操作"><a href="#二、使用脚本完成快捷操作" class="headerlink" title="二、使用脚本完成快捷操作"></a>二、使用脚本完成快捷操作</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><ul>
<li>创建脚本文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>打开脚本文件，你可以直接用记事本打开，或者Vim打开，这里使用VScode打开</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑文件，写入下面内容至脚本文件中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> a</span><br><span class="line"><span class="built_in">cd</span> a</span><br><span class="line"><span class="built_in">touch</span> index.html</span><br><span class="line"><span class="built_in">touch</span> style.css</span><br><span class="line"><span class="built_in">touch</span> main.js</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&lt;h1&gt;我是例子&lt;/h1&gt;&quot;</span> &gt;&gt; index.html</span><br></pre></td></tr></table></figure>
<ul>
<li>添加权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>使用脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./我是脚本</span><br></pre></td></tr></table></figure>

<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><ul>
<li>跟上面一样，升级为自定义参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 我是脚本2</span><br><span class="line">code 我是脚本2</span><br></pre></td></tr></table></figure>
<ul>
<li>稍微改一下，将原本指定的名字替换为 <code>$1</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">touch</span> index.html</span><br><span class="line"><span class="built_in">touch</span> style.css</span><br><span class="line"><span class="built_in">touch</span> main.js</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&lt;h1&gt;我是例子&lt;/h1&gt;&quot;</span> &gt;&gt; index.html</span><br></pre></td></tr></table></figure>
<ul>
<li>添加权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x 我是脚本2</span><br></pre></td></tr></table></figure>
<ul>
<li>运行脚本，升级后需要给参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./我是脚本2 aaa</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>另一种运行方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh 我是脚本</span><br></pre></td></tr></table></figure>

<ul>
<li>添加shebang，即可直接输入脚本名，运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>打开脚本文件后，在第一行添加内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li>保存退出后，就可以直接在当前目录下输入脚本名运行</li>
</ul>
<h3 id="二次优化"><a href="#二次优化" class="headerlink" title="二次优化"></a>二次优化</h3><ul>
<li>将脚本所在的路径，添加到环境变量 <code>PATH</code> 中，在任何位置可以直接输入该脚本名，直接运行</li>
<li>添加方法自行百度 <code>计算机系统 + 添加环境变量</code> 如 <code>Win10</code> 百度搜索 <code>Win10添加环境变量</code></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码习惯</title>
    <url>/2023/02/16/article/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>文件夹采用大驼峰命名 例如 <code>HelloWorld</code></p>
<p>组件名采用大驼峰命名 例如 <code>HelloWorld.tsx</code></p>
<p>入口文件统一命名为 <code>index.ts</code>, 统一导出</p>
<h1 id="Api-管理"><a href="#Api-管理" class="headerlink" title="Api 管理"></a>Api 管理</h1><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><p>在 <code>api/index.ts</code> 中统一导出</p>
<p>根据服务区分文件 <code>api/user.ts</code></p>
<p>接口函数名采用小驼峰命名 例如 <code>getUserInfoApi</code></p>
<p>函数入参命名</p>
<p>params 使用 <code>IGetUserInfoApiParams</code></p>
<p>data 使用 <code>IGetUserInfoApiData</code></p>
<p>query 使用 <code>IGetUserInfoApiQuery</code></p>
<p>返回值使用 <code>IGetUserInfoApiResult</code></p>
<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>请求钩子命名 use + 请求方式 + 接口路径 + Query, <code>useGetUserInfoQuery</code></p>
<h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; $API_NAME_CASE$ApiParams &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; $API_NAME$Api &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isSuccessApi &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> use$API_NAME_CASE$QueryQueryKey = <span class="string">&#x27;use$API_NAME_CASE$Query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">use$API_NAME_CASE$Query</span>(<span class="params"><span class="attr">options</span>?: &#123;</span></span><br><span class="line"><span class="params">  params?: $API_NAME_CASE$ApiParams;</span></span><br><span class="line"><span class="params">  options?: &#123;</span></span><br><span class="line"><span class="params">    enabled?: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  &#125;;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: response, ...rest &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">(<span class="params">&#123; queryKey &#125;</span>) =&gt;</span> $API_NAME$Api(queryKey[<span class="number">1</span>]),</span><br><span class="line">    <span class="attr">queryKey</span>: [use$API_NAME_CASE$QueryQueryKey, options?.<span class="property">params</span>] <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">    ...options?.<span class="property">options</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isSuccessApi</span>(response)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;, [response]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    response,</span><br><span class="line">    data,</span><br><span class="line">    ...rest,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMutation &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; $API_NAME$Api &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; queryClient &#125; <span class="keyword">from</span> <span class="string">&#x27;@/main&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useGet$GET_API_NAME$QueryQueryKey &#125; <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useGet$GET_API_NAME_CASE$Query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">use$API_NAME_CASE$Mutation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; mutateAsync, ...rest &#125; = <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: $API_NAME$Api,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">void</span> queryClient.<span class="title function_">invalidateQueries</span>(&#123;</span><br><span class="line">        <span class="attr">queryKey</span>: [useGet$GET_API_NAME_CASE$QueryQueryKey],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    mutateAsync,</span><br><span class="line">    &#123;</span><br><span class="line">      ...rest,</span><br><span class="line">    &#125;,</span><br><span class="line">  ] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>…待补充</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows使用hugo搭建个人博客</title>
    <url>/2020/02/07/article/%E5%9C%A8Windows%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="一、本文章食用须知"><a href="#一、本文章食用须知" class="headerlink" title="一、本文章食用须知"></a>一、本文章食用须知</h2><ol>
<li>能访问外网</li>
<li>有自己的github账号以及配置了本地git的服务</li>
<li>对终端操作有所了解</li>
<li>仔细看完每个字</li>
</ol>
<p>如果以上都有了解，就可以开始下面的搭建博客啦~</p>
<h2 id="二、下载hugo安装包"><a href="#二、下载hugo安装包" class="headerlink" title="二、下载hugo安装包"></a>二、下载hugo安装包</h2><p>链接：<a href="https://gohugo.io/">Hugo官网</a>、<a href="https://github.com/gohugoio/hugo/releases">安装包下载地址</a></p>
<h3 id="Windows用户"><a href="#Windows用户" class="headerlink" title="Windows用户"></a>Windows用户</h3><p>找到hugo_版本号_Windows-你的系统版本bit.zip下载下来</p>
<p>这里以hugo0.64版本为例：</p>
<p>我的电脑是Windows10-64位系统</p>
<p>就下载hugo_0.64.0_Windows-64bit.zip</p>
<h3 id="Mac用户"><a href="#Mac用户" class="headerlink" title="Mac用户"></a>Mac用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<h2 id="三、解压安装包"><a href="#三、解压安装包" class="headerlink" title="三、解压安装包"></a>三、解压安装包</h2><p>解压到你所需要放的目录。如：D:\Programme\hugo_0.64.0_Windows-64bit</p>
<p>配置hugo环境变量</p>
<p>复制你刚刚解压位置的路径，添加到环境变量中，这里以Win10为例。</p>
<p>此电脑【右击】 –&gt; 选择 属性 –&gt; 高级系统设置 –&gt; 环境变量 –&gt; 系统变量 –&gt; Path –&gt; 编辑 –&gt; 新建 –&gt; 粘贴你的路径D:\Programme\hugo_0.64.0_Windows-64bit –&gt; 确定</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291645555.png"></p>
<p>打开终端段输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<p>如果有提示Hugo字样则配置成功。</p>
<h2 id="四、开始配置博客"><a href="#四、开始配置博客" class="headerlink" title="四、开始配置博客"></a>四、开始配置博客</h2><p>回到终端，cd到你需要存放的目录位置，输入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new site github用户名小写.github.io-creator</span><br></pre></td></tr></table></figure>

<p>输入完后会在当前目录创建一个“github用户名小写.github.io-creator”的文件夹，cd进去，输入指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke</span><br></pre></td></tr></table></figure>



<p>输入完后它会下载一些东西，等它下完。下完后接着输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;theme = &quot;ananke&quot;&#x27;</span> &gt;&gt; config.toml</span><br></pre></td></tr></table></figure>

<p>输入完后即可创建你的一篇博客，内容可以先不写。创建指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new posts/第一篇博客的名称.md</span><br></pre></td></tr></table></figure>

<p>输入完后在你目录进入 content 文件夹，在进入 posts 文件夹，即可看到你刚刚创建的博客文章。编辑这个文件，将里面的“true”修改为“false”</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291645307.png"></p>
<p>保存关闭，回到终端。在根目录也就是“github用户名小写.github.io-creator”的目录，输入指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo server -D</span><br></pre></td></tr></table></figure>

<p>输入完后可以先不要操作，在浏览器输入 localhost:1313 可以预览本地博客。</p>
<h2 id="五、将本地博客上传到github"><a href="#五、将本地博客上传到github" class="headerlink" title="五、将本地博客上传到github"></a>五、将本地博客上传到github</h2><p>在github新建一个仓库，名字为“用户名.github.io”，然后回到终端进入 public目录，将目录的文件上传到该仓库。下面以我的用户名为例：</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291646140.png" alt="image.png"></p>
<p>输入完后点下面绿色的按钮就好了。我的创建过所以提示红色，你们直接点就好。</p>
<p>点完后会跳转到另一个界面，点击SSH,然后复制下面的指令，回终端public目录输入即可</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291646720.png" alt="image.png"></p>
<p>紧接着就是git的一些基础操作，回终端将public里的文件提交到这个仓库。下面提供一些基础指令做参考，具体去了解git的使用教程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git status</span><br><span class="line">git commit -v</span><br></pre></td></tr></table></figure>





<p>提交完后，回到github在刚刚仓库上面点击Settings</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291646281.png" alt="image.png"></p>
<p>往下拉找到GitHub Pages，下面显示的就是你的博客域名了，有买私人域名的可以自己绑定，这里就不说了。开始你的博客人生吧~</p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291647827.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>大数相加浅析</title>
    <url>/2021/08/16/article/%E5%A4%A7%E6%95%B0%E7%9B%B8%E5%8A%A0%E6%B5%85%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道当在浏览器输入 9999999999999999999999 + 9999999999999999999999 时，它的结果是一个科学计数法。往往我们不需要也看不懂科学计数法。所以需要实现一个函数来实现大数相加。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我们可以通过把一个很大的数字，拆分成一小部分一小部分的加起来。<br>通过字符串形式，我们手动模拟进位的操作<br>如果当他满 10 的时候，我们保留个位，将十位（也就是进位）保存起来<br>当下次计算的时候，我们加上进位  </p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addStrings</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> i = num1.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> j = num2.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> add = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> answer = []</span><br><span class="line">  <span class="keyword">while</span> (i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span> || add !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> val1 = i &gt;= <span class="number">0</span> ? num1.<span class="title function_">charAt</span>(i) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> val2 = j &gt;= <span class="number">0</span> ? num2.<span class="title function_">charAt</span>(j) - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> result = val1 + val2 + add</span><br><span class="line">    answer.<span class="title function_">push</span>(result % <span class="number">10</span>)</span><br><span class="line">    add = <span class="title class_">Math</span>.<span class="title function_">floor</span>(result / <span class="number">10</span>)</span><br><span class="line">    i -= <span class="number">1</span></span><br><span class="line">    j -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer.<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>大数相加</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在npm中发布自己的包</title>
    <url>/2020/07/14/article/%E5%A6%82%E4%BD%95%E5%9C%A8npm%E4%B8%AD%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8C%85/</url>
    <content><![CDATA[<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p><a href="https://www.npmjs.com/">npmjs官网</a></p>
<p>注册完成后保持登录状态，不要关闭网页。</p>
<h2 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h2><p>因为下载问题，你可能将npm的官方源切换为淘宝源。这里需要重新设置为官方源才能提交成功，使用nrm工具快速切换。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g nrm</span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这部分设置后，你使用npm安装速度会变慢。最后发包完成后在切换回去</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm use taobao</span><br></pre></td></tr></table></figure>

<h2 id="初始化包"><a href="#初始化包" class="headerlink" title="初始化包"></a>初始化包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>根据提示输入对应内容。</p>
<blockquote>
<p>package name &#x3D;&gt; 你要发布的包名<br>version &#x3D;&gt; 当前发布的版本号（如果你是第一次发布建议设置为0.0.1）<br>description &#x3D;&gt; 对你的包进行描述<br>keywords &#x3D;&gt; 关于你包的关键字<br>author &#x3D;&gt; 作者名（填写你注册的用户名）</p>
</blockquote>
<p>其他没提及的默认回车即可。</p>
<h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h2><p>添加你的发布账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>

<p>接着输入你的账号及密码。（这里也是需要将源切换为官方的npm源才可以成功）</p>
<p>添加结束后即可，发布你的一个包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后续发布可以到package.json文件中修改 “version” 的版本号在提交。<br>如果同一版本提交会报错</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>博客</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>如何&quot;放松&quot;的参与开源社区建设</title>
    <url>/2024/06/29/article/%E5%A6%82%E4%BD%95%22%E6%94%BE%E6%9D%BE%22%E7%9A%84%E5%8F%82%E4%B8%8E%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E5%BB%BA%E8%AE%BE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你是在因为害怕 github 的 commit 提交时间是在某个时间段, 并害怕被某些人发现.</p>
<p>恭喜你, 你可能跟我考虑的是一个问题.</p>
<p>通过下面的脚本(ChatGPT 提供), 将 commit 的时间调整至(18:00&#x2F;19:00) 后.</p>
<blockquote>
<p>建议 19:00, 18:00 左右的时间容易存在争议</p>
</blockquote>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测操作系统类型</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">date</span> --version &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># GNU date (Linux)</span></span><br><span class="line">    DATE_CMD=<span class="string">&quot;gnu&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># BSD date (macOS)</span></span><br><span class="line">    DATE_CMD=<span class="string">&quot;bsd&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取今天的日期</span></span><br><span class="line">TODAY=$(<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当天 19:00 的时间戳</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DATE_CMD</span>&quot;</span> = <span class="string">&quot;gnu&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># Linux: 使用 GNU date 的 -d 参数</span></span><br><span class="line">    NINETEEN_TIME=$(<span class="built_in">date</span> -d <span class="string">&quot;<span class="variable">$&#123;TODAY&#125;</span> 19:00:00&quot;</span> <span class="string">&quot;+%s&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment"># macOS: 使用 BSD date 的 -j 和 -f 参数</span></span><br><span class="line">    NINETEEN_TIME=$(<span class="built_in">date</span> -j -f <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span> <span class="string">&quot;<span class="variable">$&#123;TODAY&#125;</span> 19:00:00&quot;</span> <span class="string">&quot;+%s&quot;</span>)</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 Git 中的最后一次提交时间戳</span></span><br><span class="line">LAST_COMMIT_TIME=$(git <span class="built_in">log</span> -1 --format=<span class="string">&quot;%ct&quot;</span> 2&gt;/dev/null)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有提交记录，初始化 LAST_COMMIT_TIME 为 0</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$LAST_COMMIT_TIME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    LAST_COMMIT_TIME=0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交函数</span></span><br><span class="line"><span class="function"><span class="title">commit_with_adjusted_time</span></span>() &#123;</span><br><span class="line">    <span class="comment"># 获取当前时间戳</span></span><br><span class="line">    CURRENT_TIME=$(<span class="built_in">date</span> <span class="string">&quot;+%s&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果当前时间早于 19:00 或没有提交记录</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$CURRENT_TIME</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$NINETEEN_TIME</span>&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$LAST_COMMIT_TIME</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$NINETEEN_TIME</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 使用当天 19:00 的时间作为基准</span></span><br><span class="line">        COMMIT_TIME=<span class="variable">$NINETEEN_TIME</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 基于上一次提交时间递增 1 秒</span></span><br><span class="line">        COMMIT_TIME=$((<span class="variable">$LAST_COMMIT_TIME</span> + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新最后一次提交的时间</span></span><br><span class="line">    LAST_COMMIT_TIME=<span class="variable">$COMMIT_TIME</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化时间为 Git 可识别的格式</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DATE_CMD</span>&quot;</span> = <span class="string">&quot;gnu&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># Linux: 使用 GNU date 的 -d 参数</span></span><br><span class="line">        FORMATTED_TIME=$(<span class="built_in">date</span> -d <span class="string">&quot;@<span class="variable">$COMMIT_TIME</span>&quot;</span> <span class="string">&quot;+%Y-%m-%dT%H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># macOS: 使用 BSD date 的 -j 和 -f 参数</span></span><br><span class="line">        FORMATTED_TIME=$(<span class="built_in">date</span> -j -f <span class="string">&quot;%s&quot;</span> <span class="string">&quot;<span class="variable">$COMMIT_TIME</span>&quot;</span> <span class="string">&quot;+%Y-%m-%dT%H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置提交时间并提交代码</span></span><br><span class="line">    GIT_AUTHOR_DATE=<span class="variable">$FORMATTED_TIME</span> GIT_COMMITTER_DATE=<span class="variable">$FORMATTED_TIME</span> git commit -m <span class="string">&quot;<span class="variable">$1</span>&quot;</span> --<span class="built_in">date</span>=<span class="string">&quot;<span class="variable">$FORMATTED_TIME</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Commit created with time: <span class="variable">$FORMATTED_TIME</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查参数是否传入提交信息</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &lt;commit-message&gt;&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用提交函数</span></span><br><span class="line">commit_with_adjusted_time <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x commit.sh</span><br><span class="line">./commit.sh <span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>如何连接GitHub远程仓库</title>
    <url>/2020/02/12/article/%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ol>
<li>GitHub的账号</li>
<li>有类似bash的终端（输指令用）</li>
</ol>
<h1 id="生成ssh-key秘钥"><a href="#生成ssh-key秘钥" class="headerlink" title="生成ssh key秘钥"></a>生成ssh key秘钥</h1><p>官网的教程： <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>
<p>输入下面的指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C 你的邮箱地址</span><br></pre></td></tr></table></figure>



<p>输入完后一直敲回车键，知道出现类似泡泡的东西<br><img src="http://obsidian.easyhappy.top/avan/202506291905909.png" alt="image.png"></p>
<p>接着复制生成的路径，使用指令 <code>cd 路径</code> 和 <code>ls</code> 查看生成的两个文件<br><img src="http://obsidian.easyhappy.top/avan/202506291906683.png" alt="image.png"></p>
<p>其中 “id_rsa” 是私钥这个不要给别人看，“id_rsa.pub” 是公钥，我们需要查看这个文件的内容，可以使用 <code>cat id_rsa.pub</code> 指令查看该内容，回车后会出现一大串字符<br><img src="http://obsidian.easyhappy.top/avan/202506291906687.png" alt="image.png"></p>
<p>将上面的字符一字不漏的复制，打开GitHub的设置页面，找到 “SSH and GPG keys” 然后在又上放单击 “New SSH key”<br><img src="http://obsidian.easyhappy.top/avan/202506291906546.png" alt="image.png"></p>
<p>然后在 Title 中给秘钥起个名字，把刚刚复制的内容粘贴到 Key 文本框中，保存关闭即可<br><img src="http://obsidian.easyhappy.top/avan/202506291906603.png" alt="image.png"></p>
<p>回到终端输入指令，来接收github发来的公钥，如果显示 “Hi 你的github用户名” 则表示成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<p><img src="http://obsidian.easyhappy.top/avan/202506291907834.png" alt="image.png"></p>
<h1 id="至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可"><a href="#至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可" class="headerlink" title="至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可"></a>至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>学Vue3核心概念与面试官斗智斗勇（一） 收集触发依赖</title>
    <url>/2022/03/14/article/%E5%AD%A6Vue3%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%9D%A2%E8%AF%95%E5%AE%98%E6%96%97%E6%99%BA%E6%96%97%E5%8B%87%EF%BC%88%E4%B8%80%EF%BC%89%20%E6%94%B6%E9%9B%86%E8%A7%A6%E5%8F%91%E4%BE%9D%E8%B5%96/</url>
    <content><![CDATA[<blockquote>
<p>本文章依据阅读源码的理解进行编写。如果有什么错误的地方，欢迎指正交流学习。<br>最近也在帮助想入行前端的朋友进行学习，如果有需要交流学习，可以添加微信 <strong>gdgzyw</strong>。<br>聊天、学习、打游戏都阔以~</p>
</blockquote>
<p>学习源码最快的方式就是理解概念后，自己写一个简版的功能。所以我们得先搭一个环境，这里采用测试驱动的方式进行。</p>
<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>初始化 <code>package.json</code> 和安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init -y</span><br><span class="line">yarn add -D @babel/core @babel/preset-env @babel/preset-typescript @types/jest babel-jest jest</span><br></pre></td></tr></table></figure>

<p>添加 <code>scripts</code> 用于启动 <code>jest</code></p>
<p><strong>package.json</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>根目录创建 <code>babel.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [[<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;current&#x27;</span> &#125; &#125;], <span class="string">&#x27;@babel/preset-typescript&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建 <code>tsconfig.json</code> 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2016&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;es6&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;jest&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>至此我们的项目就初始化完成了。如果你需要用 <strong>git</strong> 来管理，可以自行 <code>git init</code>。</p>
<h2 id="编写测试用例"><a href="#编写测试用例" class="headerlink" title="编写测试用例"></a>编写测试用例</h2><p>创建 <code>src/reactivity/tests/effect.spec.ts</code> 文件</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;effect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;happy path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bank = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">money</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> myMoney;</span><br><span class="line">    <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      myMoney = bank.<span class="property">money</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">expect</span>(myMoney).<span class="title function_">toBe</span>(<span class="number">200</span>);</span><br><span class="line">    bank.<span class="property">money</span> = <span class="number">50</span>;</span><br><span class="line">    <span class="title function_">expect</span>(myMoney).<span class="title function_">toBe</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>创建 <code>scr/reactivity/tests/reactive.spec.ts</code></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;reactive&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;happy path&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> origin = &#123;<span class="attr">money</span>: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> bank = <span class="title function_">reactive</span>(origin);</span><br><span class="line">    <span class="title function_">expect</span>(bank).<span class="property">not</span>.<span class="title function_">toBe</span>(origin);</span><br><span class="line">    <span class="title function_">expect</span>(bank.<span class="property">money</span>).<span class="title function_">toBe</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>现在我们运行 <code>yarn test</code> 测试用例是跑不通的。对应的函数我们还没有创建。下面正式开始我们的编码环节。</p>
<h2 id="编写-reactive-函数"><a href="#编写-reactive-函数" class="headerlink" title="编写 reactive 函数"></a>编写 reactive 函数</h2><p>通过上面的测试用例，我们可以知道，我们接收一个对象的值，并且对他进行一个拦截。所以我们可以直接返回一个 proxy 的代理对象。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Reflect.get(target, key) 等同于 target[key]</p>
</blockquote>
<p>接着我们为了统一出口可以创建 <code>src/reactivity/index.ts</code> 文件</p>
<p><strong>index.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./reactive&#x27;</span></span><br></pre></td></tr></table></figure>

<p>接着我们去 <code>reactive.spec.ts</code> 中引入我们的函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;../index&#x27;</span></span><br></pre></td></tr></table></figure>

<p>跑一下测试 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">test</span> reactive</span><br></pre></td></tr></table></figure>

<p>提示 <code>PASS</code> 至此发现这个的单侧已经跑通。接着我们可以开始写另一个单测。</p>
<h2 id="编写-effect-函数"><a href="#编写-effect-函数" class="headerlink" title="编写 effect 函数"></a>编写 effect 函数</h2><p>一样的，我们观察一下测试用例的参数。<br>可以发现他接受一个回调，所以我们参数是一个回调函数。<br>接着我们思考一下如何将我们上一个 reactive 的函数与这个回调函数产生关联。   </p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/72aedf5acd77448f91cc5ca941dd9b5f~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<p>定义 tagetMap 变量，用于对象的分组。<br>定义 depsMap 变量，用于对象中每个 key 的依赖分组。<br>通过 reactive 定义对象，在 get 的时候，我们在 targetMap<br> 中将对象添加到 Map 中作为分类。接着创建 Set 用 key 作为分类保存到 Set 中。  </p>
<p>回顾我们的单侧流程，我们先定义了个 reactive 对象。<br>接着我们在 effect 函数中执行了回调函数，回调函数中我们会读取到 reactive 的值，从而触发了 get 操作。所以我们需要在 get 操作中进行依赖收集。</p>
<p>定义一个 ReactiveEffect 类，收集我们的回调函数</p>
<p><strong>src&#x2F;reactivity&#x2F;effect.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> activeEffect</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="attr">_fn</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_fn</span> = fn</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    activeEffect = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_fn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn)</span><br><span class="line">  _effect.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在初始化的时候，我们保存回调函数到 _fn 中，在我们执行 run 方法的时候。会触发我们的回调函数。</p>
</blockquote>
<p>定义一个 track 的函数，完成收集依赖这个操作</p>
<p><strong>src&#x2F;reactivity&#x2F;effect.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, depsMap)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!deps) &#123;</span><br><span class="line">    deps = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, deps)</span><br><span class="line">  &#125;</span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果此时我们需要设置 reactive 的值，我们会触发 set 操作。所以触发依赖的操作需要在 set 中进行。</p>
<p>定义 trigger 函数，触发所有依赖</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> dep <span class="keyword">of</span> deps) &#123;</span><br><span class="line">    dep.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到 reactive 文件，将 track 和 trigger 写到对应的操作中。</p>
<p><strong>src&#x2F;reactivity&#x2F;index.ts</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ...</span><br><span class="line">export * from &#x27;./effect&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>src&#x2F;reactivity&#x2F;reactive.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;target, trigger&#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value)</span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到我们的单侧，将这几个库引入</p>
<p><strong>src&#x2F;reactivtiy&#x2F;tests&#x2F;effect.spec.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;effect,reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;../index&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>至此我们收集依赖和触发依赖的核心逻辑已经实现。我们现在可以跑 <code>yarn test</code> 进行检验。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这篇文章是这个系列的开始，后续我会继续分享相关内容。慢慢完善我们对 vue3 的理解。<br>欢迎关注我，与我深入♂沟通。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>带你快速了解设计模式</title>
    <url>/2021/04/01/article/%E5%B8%A6%E4%BD%A0%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1、设计的原则"><a href="#1、设计的原则" class="headerlink" title="1、设计的原则"></a>1、设计的原则</h2><h3 id="1-1-单一职责原则"><a href="#1-1-单一职责原则" class="headerlink" title="1.1 单一职责原则"></a>1.1 单一职责原则</h3><p>每个类只需要负责自己的那部分，类的复杂度就会降低。</p>
<h3 id="1-2-开闭原则"><a href="#1-2-开闭原则" class="headerlink" title="1.2 开闭原则"></a>1.2 开闭原则</h3><p>对扩展开放，对修改关闭</p>
<h3 id="1-3-里氏替换原则"><a href="#1-3-里氏替换原则" class="headerlink" title="1.3 里氏替换原则"></a>1.3 里氏替换原则</h3><p>所有引用基类的地方必须能透明地使用其子类的对象。<br>换句话说父类的对象替换成子类来使用，而程序执行效果不会改变。</p>
<h3 id="1-4-迪米特法则"><a href="#1-4-迪米特法则" class="headerlink" title="1.4 迪米特法则"></a>1.4 迪米特法则</h3><p>迪米特法则（最少知识原则），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解，只和朋友通信，不和陌生人说话。</p>
<h3 id="1-5-接口隔离原则"><a href="#1-5-接口隔离原则" class="headerlink" title="1.5 接口隔离原则"></a>1.5 接口隔离原则</h3><p>多个特定的客户端接口要好于一个通用性的总接口。<br>尽可能将接口单独抽离，需要的时候将其使用。</p>
<h3 id="1-6-依赖倒置原则"><a href="#1-6-依赖倒置原则" class="headerlink" title="1.6 依赖倒置原则"></a>1.6 依赖倒置原则</h3><ol>
<li>上层模块不应该依赖底层模块，它们都应该依赖于抽象。</li>
<li>抽象不应该依赖于细节，细节应该依赖于抽象</li>
</ol>
<h2 id="2、什么是设计模式"><a href="#2、什么是设计模式" class="headerlink" title="2、什么是设计模式"></a>2、什么是设计模式</h2><p>设计模式是软件开发人员在软件开发过程中面临的一些具有代表性问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<h2 id="3、常见的设计模式"><a href="#3、常见的设计模式" class="headerlink" title="3、常见的设计模式"></a>3、常见的设计模式</h2><h3 id="3-1-单例模式"><a href="#3-1-单例模式" class="headerlink" title="3.1 单例模式"></a>3.1 单例模式</h3><h4 id="3-1-1-通过静态属性创建"><a href="#3-1-1-通过静态属性创建" class="headerlink" title="3.1.1 通过静态属性创建"></a>3.1.1 通过静态属性创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 定义静态属性，用于保存实例地址</span></span><br><span class="line">  <span class="keyword">static</span> instance = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果创建过，则返回原来的</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Person</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Person</span>.<span class="property">instance</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将实例保存起来</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="property">instance</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-1-2-通过函数创建"><a href="#3-1-2-通过函数创建" class="headerlink" title="3.1.2 通过函数创建"></a>3.1.2 通过函数创建</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通用的单例函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSingle</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> instance</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> <span class="title function_">fn</span>(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SinglePerson</span> = <span class="title function_">getSingle</span>(<span class="title class_">Person</span>)</span><br><span class="line"><span class="keyword">const</span> newPerson = <span class="keyword">new</span> <span class="title class_">SinglePerson</span>(<span class="string">&quot;梁又文&quot;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-1-3-应用场景"><a href="#3-1-3-应用场景" class="headerlink" title="3.1.3 应用场景"></a>3.1.3 应用场景</h4><p>window、document、store、jQuery、对话框等。</p>
<h3 id="3-2-工厂模式"><a href="#3-2-工厂模式" class="headerlink" title="3.2 工厂模式"></a>3.2 工厂模式</h3><p>数据 &#x3D;》 加工 &#x3D;》 返回需要的内容。</p>
<p>封装具体实例创建逻辑和过程，外部只需要根据不同条件返回不同的实例。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Factory</span> (<span class="params">type</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;实例1&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiLi1</span>()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;实例2&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiLi2</span>()</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有匹配&#x27;</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-3-装饰者模式"><a href="#3-3-装饰者模式" class="headerlink" title="3.3 装饰者模式"></a>3.3 装饰者模式</h3><p>Decorator 扩展一些额外信息（把功能增强）</p>
<h4 id="3-3-1-普通的装饰效果"><a href="#3-3-1-普通的装饰效果" class="headerlink" title="3.3.1 普通的装饰效果"></a>3.3.1 普通的装饰效果</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好呀&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Decorator</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// 谁调用我，我就执行谁</span></span><br><span class="line">  <span class="title function_">this</span>()</span><br><span class="line">  <span class="comment">// 并且我还要执行传进来的函数</span></span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lyw = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;梁又文&quot;</span>)</span><br><span class="line">lyw.<span class="property">sayHi</span>.<span class="title class_">Decorator</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我又加了个功能&quot;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="3-3-2-装饰者链"><a href="#3-3-2-装饰者链" class="headerlink" title="3.3.2 装饰者链"></a>3.3.2 装饰者链</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Decorator</span> = <span class="keyword">function</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">_this</span>()</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test1</span> = (<span class="params"></span>)=&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是1&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">test2</span> = (<span class="params"></span>)=&gt;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是2&quot;</span>)</span><br><span class="line">lyw.<span class="property">say</span>.<span class="title class_">Decorator</span>(test1).<span class="title class_">Decorator</span>(test2)()</span><br></pre></td></tr></table></figure>

<h3 id="3-4-观察者模式（EventHub）"><a href="#3-4-观察者模式（EventHub）" class="headerlink" title="3.4 观察者模式（EventHub）"></a>3.4 观察者模式（EventHub）</h3><p>观察者模式又叫自定义事件。<br>定义一个对象与其他对象之间的一种依赖关系，当对象发生某种变化的时候，依赖它的其它对象都会得到更新。解耦 、延迟执行、一对多的依赖关系。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 保存事件 </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handles</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加事件，监听、观察</span></span><br><span class="line">  <span class="title function_">addEvent</span> (eventName, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">handles</span>[eventName] === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">handles</span>[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handles</span>[eventName].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发</span></span><br><span class="line">  <span class="title function_">trigger</span> (eventName) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handles</span>[eventName].<span class="title function_">forEach</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">v</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除事件</span></span><br><span class="line">  <span class="title function_">removeEvent</span> (eventName, fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(eventName <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">handles</span>)) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">handles</span>[eventName].<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">handles</span>[eventName][i] === fn) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handles</span>[eventName].<span class="title function_">splice</span>(i, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-5-代理模式"><a href="#3-5-代理模式" class="headerlink" title="3.5 代理模式"></a>3.5 代理模式</h3><p>为其他对象提供一种代理以控制对这个对象的访问，类似于生活中的中介。</p>
<h4 id="3-5-1-示例1"><a href="#3-5-1-示例1" class="headerlink" title="3.5.1 示例1"></a>3.5.1 示例1</h4><p>找个中间商代理买房，中间人可以拿走20块钱的中介费用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  <span class="title function_">payMoney</span>(<span class="params">money</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;支付了&#x27;</span>, money)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyObj = &#123;</span><br><span class="line">  <span class="title function_">proxyPayMoney</span>(<span class="params">isProxy, money</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isProxy) &#123;</span><br><span class="line">      obj1.<span class="title function_">payMoney</span>(money - <span class="number">20</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      obj1.<span class="title function_">payMoney</span>(money)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> realMoney = <span class="number">100</span></span><br><span class="line">obj1.<span class="title function_">payMoney</span>(realMoney)</span><br><span class="line">proxyObj.<span class="title function_">proxyPayMoney</span>(<span class="literal">true</span>, realMoney)</span><br><span class="line">proxyObj.<span class="title function_">proxyPayMoney</span>(<span class="literal">false</span>, realMoney)</span><br></pre></td></tr></table></figure>

<h4 id="3-5-2-Proxy代理"><a href="#3-5-2-Proxy代理" class="headerlink" title="3.5.2 Proxy代理"></a>3.5.2 Proxy代理</h4><p>每次读取或者写入数据的时候，通过newObj进行代理，可以进行额外的操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;梁又文&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj2 = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj2, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, keyName</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取属性时触发&#x27;</span>, keyName)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> target[keyName]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, keyName, value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置属性时触发&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(keyName, value)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">    target[keyName] = value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj2.<span class="property">name</span>)</span><br><span class="line">newObj2.<span class="property">name</span> = <span class="string">&#x27;憨憨&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj2.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3-5-3-加载图片加载动画"><a href="#3-5-3-加载图片加载动画" class="headerlink" title="3.5.3 加载图片加载动画"></a>3.5.3 加载图片加载动画</h4><p>通过代理，实现在加载前显示加载动画，并且不改变原有功能</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建图片</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreateImg</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">img</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">img</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setSrc</span>(<span class="params">src</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">img</span>.<span class="property">src</span> = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> src = <span class="string">&#x27;需要加载的图片地址&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理图片</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProxyImg</span>(<span class="params">src</span>)&#123;</span><br><span class="line">    <span class="comment">// 创建图片</span></span><br><span class="line">    <span class="keyword">let</span> myImg = <span class="keyword">new</span> <span class="title class_">CreateImg</span>();</span><br><span class="line">    <span class="comment">// 创建加载图片</span></span><br><span class="line">    <span class="keyword">let</span> loadImg = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    <span class="comment">// 先设置加载到 loadImg 中</span></span><br><span class="line">    loadImg.<span class="property">src</span> = src;</span><br><span class="line">    <span class="comment">// 将目前显示改为加载的图片</span></span><br><span class="line">    myImg.<span class="title function_">setSrc</span>(<span class="string">&quot;./loading.jpg&quot;</span>);</span><br><span class="line">    <span class="comment">// 等待 loadImg 的图片加载结束后，设置给myImg</span></span><br><span class="line">    loadImg.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        myImg.<span class="title function_">setSrc</span>(<span class="variable language_">this</span>.<span class="property">src</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行代码</span></span><br><span class="line"><span class="title class_">ProxyImg</span>(src)</span><br></pre></td></tr></table></figure>

<h3 id="3-6-适配器模式"><a href="#3-6-适配器模式" class="headerlink" title="3.6 适配器模式"></a>3.6 适配器模式</h3><p>两个不兼容的接口之间的桥梁，将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
<h4 id="3-6-1-axios中服务端与浏览器的适配"><a href="#3-6-1-axios中服务端与浏览器的适配" class="headerlink" title="3.6.1 axios中服务端与浏览器的适配"></a>3.6.1 axios中服务端与浏览器的适配</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDefaultAdapter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> adapter</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    adapter = <span class="string">&#x27;浏览器&#x27;</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> process !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(process) === <span class="string">&#x27;[object process]&#x27;</span>) &#123;</span><br><span class="line">    adapter = <span class="string">&#x27;服务端&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> adapter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6-2-对响应数据进行加工（适配）"><a href="#3-6-2-对响应数据进行加工（适配）" class="headerlink" title="3.6.2 对响应数据进行加工（适配）"></a>3.6.2 对响应数据进行加工（适配）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟后端返回的数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;zhangsan&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;lisi&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;wangwu&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adaptor</span>(<span class="params">users</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; users.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = &#123; [users[i].<span class="property">name</span>]: users[i].<span class="property">age</span> &#125;</span><br><span class="line">    arr.<span class="title function_">push</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newArr = <span class="title function_">adaptor</span>(<span class="title function_">getUsers</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr)</span><br></pre></td></tr></table></figure>

<h3 id="3-7-混入模式"><a href="#3-7-混入模式" class="headerlink" title="3.7 混入模式"></a>3.7 混入模式</h3><p>混入模式（mixins），虽然可以进行混合合并。有两个明显的缺点：1. 原型污染 2. 不知道混入来源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student1</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">playGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打游戏&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span> &#123;</span><br><span class="line">  <span class="title function_">goSchool</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;上学&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">backHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;回家了&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">receivingClass, givingClass</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">arguments</span>[<span class="number">2</span>] !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      receivingClass.<span class="property"><span class="keyword">prototype</span></span>[<span class="variable language_">arguments</span>[i]] = givingClass.<span class="property"><span class="keyword">prototype</span></span>[<span class="variable language_">arguments</span>[i]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mixin</span>(<span class="title class_">Student1</span>, <span class="title class_">Student2</span>, <span class="string">&#x27;goSchool&#x27;</span>, <span class="string">&#x27;backHome&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> lyw = <span class="keyword">new</span> <span class="title class_">Student1</span>(<span class="string">&#x27;梁又文&#x27;</span>)</span><br><span class="line">lyw.<span class="title function_">playGame</span>()</span><br><span class="line">lyw.<span class="title function_">goSchool</span>()</span><br><span class="line">lyw.<span class="title function_">backHome</span>()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Windows快捷键</title>
    <url>/2020/02/12/article/%E5%B8%B8%E7%94%A8%E7%9A%84Windows%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="Win组合键"><a href="#Win组合键" class="headerlink" title="Win组合键"></a>Win组合键</h1><p>Win+D——显示&#x2F;隐藏桌面<br>Win+方向键——移动窗口<br>Alt+Tab——切换窗口<br>Alt+Shift+Tab——往后切换窗口<br>Win+Tab——不怎么用的切换窗口<br>Win+Ctrl+方向键——切换桌面</p>
<h1 id="Ctrl组合键"><a href="#Ctrl组合键" class="headerlink" title="Ctrl组合键"></a>Ctrl组合键</h1><p>Ctrl+A——全选<br>Ctrl+C——复制<br>Ctrl+V——粘贴<br>Ctrl+Z——撤销<br>Ctrl+Y——重做（与撤销相反）<br>Ctrl+R 或 F5——网页刷新<br>Ctrl+P——网页打印</p>
<h1 id="Chrome快捷键"><a href="#Chrome快捷键" class="headerlink" title="Chrome快捷键"></a>Chrome快捷键</h1><p>鼠标中键——打开或关闭<br>Ctrl+T——新开标签<br>Ctrl+Shift+T——撤销关闭<br>Ctrl+点击——新页面打开<br>Ctrl+W——关闭当前页面<br>Ctrl+L——地址输入栏<br>Ctrl+Shifit+I 或 F12——开发者工具<br>Ctrl+左右——前进后退<br>Atrl+回车——在新标签打开<br>Shift+回车——在新窗口打开<br>Ctrl+Shift+Delete——删除历史记录</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中git的常见操作</title>
    <url>/2020/08/04/article/%E5%BC%80%E5%8F%91%E4%B8%ADgit%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="设置了HTTPS需要切换为SSH"><a href="#设置了HTTPS需要切换为SSH" class="headerlink" title="设置了HTTPS需要切换为SSH"></a>设置了HTTPS需要切换为SSH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin 你的git的ssh地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="同时上传多个git仓库"><a href="#同时上传多个git仓库" class="headerlink" title="同时上传多个git仓库"></a>同时上传多个git仓库</h2><p>绑定对应仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add gitee 你的git的ssh地址</span><br><span class="line">git push -u gitee master</span><br><span class="line">git remote add github 你的git的ssh地址</span><br><span class="line">git push -u github master</span><br></pre></td></tr></table></figure>

<p>上传对仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h2 id="创建及切换分支"><a href="#创建及切换分支" class="headerlink" title="创建及切换分支"></a>创建及切换分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure>

<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git check master</span><br><span class="line">git merge 需要合并的分支</span><br><span class="line">git push 源名 master</span><br></pre></td></tr></table></figure>

<h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新远程分支列表</span><br><span class="line">git remote update origin --prune</span><br><span class="line"></span><br><span class="line">查看所有分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">删除远程分支</span><br><span class="line">git push origin ---delete 删除的分支名</span><br><span class="line"></span><br><span class="line">删除本地分支</span><br><span class="line">git branch -d 删除的分支名</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>异步、同步、Promise</title>
    <url>/2020/06/10/article/%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81Promise/</url>
    <content><![CDATA[<h2 id="一、同步"><a href="#一、同步" class="headerlink" title="一、同步"></a>一、同步</h2><p>当你执行时，能直接获得结果就是同步。</p>
<blockquote>
<p>当有个任务需要等待很久的时候，下一个任务将无法运行。大量浪费时间。</p>
</blockquote>
<h2 id="二、异步"><a href="#二、异步" class="headerlink" title="二、异步"></a>二、异步</h2><p>当一个函数不能直接直接拿到结果，可以先执行其他代码，等待获取结果后再返回，就是异步。</p>
<p>异步两种形式：</p>
<ul>
<li>轮询<br>定时的去询问他获取了数据没有</li>
<li>回调<br>等结果获取后，在回头调用</li>
</ul>
<blockquote>
<p>异步的好处：它可以用等待的时间去执行其他事情</p>
</blockquote>
<h3 id="1-回调"><a href="#1-回调" class="headerlink" title="1.回调"></a>1.回调</h3><p>写了个A函数，不立刻执行。交给B函数，回头调用。这就是回调。</p>
<blockquote>
<p>回调可以用于同步任务，并非只能异步任务</p>
<p>回调还可以将函数传给浏览器进行调用。如：request.onreadystatechange</p>
</blockquote>
<h3 id="2-获取异步的结果"><a href="#2-获取异步的结果" class="headerlink" title="2.获取异步的结果"></a>2.获取异步的结果</h3><p>当异步有两个结果时可以采用以下方法获取结果</p>
<p>方法一：回调接受两个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./文件.txt&#x27;</span>, <span class="function">(<span class="params">error, data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>);<span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>方法二：用两个回调接受</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/文件.json&#x27;</span>, <span class="function"><span class="params">data</span>=&gt;</span>&#123;&#125;, <span class="function"><span class="params">error</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>



<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/文件.json&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="function">()=&gt;</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>上面两种方法都有很大的缺陷</p>
<p>命名不规范，五花八门</p>
<p>容易出现回调地狱，很容易让人看不懂</p>
<p>很难对错误进行处理</p>
</blockquote>
<h2 id="三、判断同步-异步"><a href="#三、判断同步-异步" class="headerlink" title="三、判断同步&amp;异步"></a>三、判断同步&amp;异步</h2><p>有些函数默认就是异步：如</p>
<ul>
<li>setTimeout</li>
<li>AJAX（即XMLHttpRequest）</li>
<li>addEventListener</li>
</ul>
<blockquote>
<p>AJAX可以设置为同步，不过没什么作用。如：request.open(‘参数1’, ‘参数2’, false)</p>
</blockquote>
<h2 id="四、Promise"><a href="#四、Promise" class="headerlink" title="四、Promise"></a>四、Promise</h2><p>Promise可以有效解决异步对结果的处理。</p>
<blockquote>
<p>规范的命名及顺序</p>
<p>没有了回调地狱，可读性更好</p>
<p>方便捕获错误</p>
</blockquote>
<p>以AJAX封装为例，如果用正常的方法来获取结果，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax = <span class="function">(<span class="params">method, url, options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;success, fail&#125; = options <span class="comment">// 析构赋值</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    request.<span class="title function_">open</span>(method, url)</span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.<span class="property">readystate</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">// 成功调用success 失败调用fail</span></span><br><span class="line">            <span class="keyword">if</span>(request.<span class="property">status</span> &lt; <span class="number">400</span>)&#123;</span><br><span class="line">                success.<span class="title function_">call</span>(<span class="literal">null</span>, request.<span class="property">response</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">            fail.<span class="title function_">call</span>(<span class="literal">null</span>, request, request.<span class="property">status</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">respone</span>)&#123;&#125;, <span class="attr">fail</span>: <span class="function">(<span class="params">request, status</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>使用Promise的方法，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;&#125;, <span class="function">(<span class="params">request, status</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第一个参数是success 第二个参数是fail</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>ajax() 返回了含有 .then() 方法的对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax = <span class="function">(<span class="params">method, url, options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;success, fail&#125; = options</span><br><span class="line">        <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        request.<span class="title function_">open</span>(method, url)</span><br><span class="line">        request.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(request.<span class="property">status</span> &lt; <span class="number">400</span>)&#123;</span><br><span class="line">                resolve.<span class="title function_">call</span>(<span class="literal">null</span>, request.<span class="property">response</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">                reject.<span class="title function_">call</span>(<span class="literal">null</span>, request)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.<span class="title function_">send</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>核心代码 return new Promise((resolve, reject)&#x3D;&gt;{})</p>
<p>代码执行成功调用 resolve(result)</p>
<p>代码执行失败调用 reject(error)</p>
<p>.then(success, fail) 传入成功和失败的函数</p>
</blockquote>
<h2 id="五、AJAX库"><a href="#五、AJAX库" class="headerlink" title="五、AJAX库"></a>五、AJAX库</h2><ol>
<li>jQuery.ajax<br><a href="https://www.jquery123.com/">链接</a></li>
<li>Axios<br><a href="http://www.axios-js.com/">链接</a></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>当了 leader 后才发现的事情</title>
    <url>/2024/02/03/article/%E5%BD%93%E4%BA%86%20leader%20%E5%90%8E%E6%89%8D%E5%8F%91%E7%8E%B0%E7%9A%84%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<h2 id="原则1"><a href="#原则1" class="headerlink" title="原则1"></a>原则1</h2><p>反馈，一定要反馈！</p>
<p>我相信所有公司的 leader 基本上交代一个任务给下属的时候。他们内心都不放心的，因为如果下属做不好他们需要担责。所以我们就可以从这个点出发。</p>
<ol>
<li>打算怎么做</li>
<li>不打算做什么</li>
<li>做成什么样子</li>
<li>有什么风险</li>
</ol>
<h2 id="原则2"><a href="#原则2" class="headerlink" title="原则2"></a>原则2</h2><p>确认目标</p>
<ol>
<li>理解上司目标</li>
<li>表名自己目标</li>
<li>时常沟通目标</li>
</ol>
<p>定风向，推目标一致者</p>
<h2 id="原则3"><a href="#原则3" class="headerlink" title="原则3"></a>原则3</h2><p>强化人设</p>
<ol>
<li>在团队中的人设</li>
<li>在会议中的人设</li>
<li>在开发时的人设</li>
</ol>
<p>红脸与白脸<br>拆屋顶与开天窗</p>
<h2 id="反原则1"><a href="#反原则1" class="headerlink" title="反原则1"></a>反原则1</h2><p>毫无反馈</p>
<ol>
<li>做一半返工</li>
<li>还剩一天才求助</li>
<li>遇到难题就搜索</li>
</ol>
<h2 id="反原则2"><a href="#反原则2" class="headerlink" title="反原则2"></a>反原则2</h2><p>你做你的<br>我做我的</p>
<p>目标与团队不一致</p>
<h2 id="反原则3"><a href="#反原则3" class="headerlink" title="反原则3"></a>反原则3</h2><ol>
<li>讲一次不改</li>
<li>讲两次不改</li>
<li>讲三次还不改</li>
</ol>
<h2 id="反原则4"><a href="#反原则4" class="headerlink" title="反原则4"></a>反原则4</h2><ol>
<li>昨天活跃，今天消沉</li>
<li>上周加班，这周怠工</li>
</ol>
<p>事出反常必有妖<br>应该提前预警</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>管理</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>管理</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手Vim</title>
    <url>/2020/08/14/article/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BVim/</url>
    <content><![CDATA[<h2 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h2><p>i 在光标前输入<br>a 在光标后输入<br>shift+i 当前行最前面输入<br>shift+a 当前行最后面输入<br>o 在光标的下一行输入内容<br>shift+o 在光标上一行输入内容<br>s 删除光标的字符并进入输入模式<br>x 删除当前光标下的字符<br>d 数字 放向键 自定义在什么方向删除多少个字符&#x2F;行<br>dd 删除整行<br>p 粘贴<br>y 数字 方向键 自定义在什么方向复制多少个字符&#x2F;行<br>w 进入下一个单词的开头<br>c 删除当前光标的字符<br>c 数字 方向键 自定义在什么方向删除多少个字符&#x2F;行<br>c w 删除整个单词<br>c i w 删除你光标所在的单词<br>c i 字符 删除自定义内部的所有内容<br>d i 字符 删除（复制）自定义内部的所有内容<br>y i 字符 复制自定义内部的所有内容<br>f 查找模式<br>f 字符 查找自定义字符，并到指定位置<br>d f 字符 删除（复制）到自定义的字符位置<br>y f 字符 复制到自定义的字符位置<br>&#x2F; 搜索<br>ESC 返回指令模式<br>:w 保存<br>:q 退出<br>:wq 保存退出<br>:split 上下分屏<br>:vsplit 左右分屏<br>0 回到最开头</p>
<h2 id="配置vimrc文件"><a href="#配置vimrc文件" class="headerlink" title="配置vimrc文件"></a>配置vimrc文件</h2><p>在~根目录创建.vim文件夹</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> .<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">vim</span> vimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">noremap</span> 当前键位 映射键位</span><br><span class="line"><span class="keyword">map</span> 键位 指令</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> relativenumber</span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">set</span> wrap</span><br><span class="line"><span class="keyword">set</span> showcmd</span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line">exec <span class="string">&quot;nohlsearch&quot;</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="keyword">noremap</span> = <span class="symbol">&lt;LEADER&gt;</span><span class="symbol">&lt;CR&gt;</span> :<span class="keyword">nohlsearch</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span> s <span class="symbol">&lt;nop&gt;</span></span><br><span class="line"><span class="keyword">map</span> S :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> R :<span class="keyword">source</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>syntax on 打开语法高亮<br>set number 打开行号<br>set relativenumber 打开高亮行号<br>set cursorline 高亮当前行线<br>set wrap 换行<br>set showcmd 显示输入的命令<br>set wildmenu 显示命令菜单<br>set hlsearch 高亮你搜索的结果<br>exec “nohlsearch” 每次进入vim都自动清空搜索结果<br>set incsearch 边输入边搜索<br>set ignorecase 忽略大小写搜索<br>set smartcase 正常忽略大小写，全大写时精确搜索<br>noremap &#x3D; <LEADER><CR> :nohlsearch<CR> 设置空格+回车清空搜索结果<br>s 取消映射<br>S 保存<br>Q 退出<br>R 刷新配置文件</p>
<blockquote>
<p>所有使用set的属性，可以在属性名前面加个no关闭<br>hjkl是vim中的移动键，如果想快速移动可以自定义按键映射<code>行数+方向键</code></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解Grid布局</title>
    <url>/2020/12/25/article/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3Grid%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="1、如何让元素使用grid布局"><a href="#1、如何让元素使用grid布局" class="headerlink" title="1、如何让元素使用grid布局"></a>1、如何让元素使用grid布局</h2><p>给元素添加 grid 或 inline-grid 样式</p>
<h2 id="2、设置行和列"><a href="#2、设置行和列" class="headerlink" title="2、设置行和列"></a>2、设置行和列</h2><p>使用 grid-template-columns 设置每一列的宽度<br>使用 gird-template-rows 设置每一行的高度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：属性可以使用 repeat函数 进行书写。<br>如：分为8列，每列百分之12.5。repeat(8, 12.5%)</p>
</blockquote>
<h2 id="3、跨列"><a href="#3、跨列" class="headerlink" title="3、跨列"></a>3、跨列</h2><p>使用 grid-column-start 设置起点<br>使用 grid-coulmn-end 设置终点</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当为负数的时候，从后面开始往前数。最后一格 -1，倒数第二格 -2。</p>
</blockquote>
<h2 id="4、设置网格的大小比"><a href="#4、设置网格的大小比" class="headerlink" title="4、设置网格的大小比"></a>4、设置网格的大小比</h2><p>使用 span 给属性设置 跨域 的宽度</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-column-end</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、跨列的缩写"><a href="#5、跨列的缩写" class="headerlink" title="5、跨列的缩写"></a>5、跨列的缩写</h2><p>使用 grid-column 可以对 start 和 end 进行缩写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="comment">/* 从第 2 列开始，至第 4 列结束 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、跨行"><a href="#6、跨行" class="headerlink" title="6、跨行"></a>6、跨行</h2><p>使用 grid-row-start 设置起点<br>使用 grid-row-end 设置终点</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：当为负数的时候，从后面开始往前数。最后一格 -1，倒数第二格 -2。</p>
</blockquote>
<h2 id="7、跨行的缩写"><a href="#7、跨行的缩写" class="headerlink" title="7、跨行的缩写"></a>7、跨行的缩写</h2><p>使用 grid-row 可以对 start 和 end 进行缩写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>; <span class="comment">/* 从第 2 行开始，至第 4 行结束 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、跨行跨列合并缩写"><a href="#8、跨行跨列合并缩写" class="headerlink" title="8、跨行跨列合并缩写"></a>8、跨行跨列合并缩写</h2><p>使用 grid-area 可以对 行 和 列 的 开始 和 结尾 进行设置<br>grid-area: 行的开始 列的开始 行的结束 列的结束;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">2</span> / <span class="number">4</span> / -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、顺序"><a href="#9、顺序" class="headerlink" title="9、顺序"></a>9、顺序</h2><p>当网格中没有设置跨行跨列的属性时，网格默认按出现位置排列。可以使用 order 进行调整。</p>
<ul>
<li>正数 在0的后面，从小到大排列</li>
<li>0 默认</li>
<li>负数 在0的前面，从小到大排列</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="10、设置列显示百分比"><a href="#10、设置列显示百分比" class="headerlink" title="10、设置列显示百分比"></a>10、设置列显示百分比</h2><p>在开始的 grid-template-columns 设置后，再次修改属性，添加百分比</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    gird-template-<span class="attribute">columns</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：还可以使用 fr 单位，平均分配<br>grid-template-columns: 1fr 3fr; 第一列占宽度的1&#x2F;4，第二列占宽度的3&#x2F;4</p>
</blockquote>
<h2 id="11、设置行显示百分比"><a href="#11、设置行显示百分比" class="headerlink" title="11、设置行显示百分比"></a>11、设置行显示百分比</h2><p>在开始的 grid-template-rows 设置后，在进行修改属性，添加百分比</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    gird-template-rows: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：还可以使用 fr 单位，平均分配<br>grid-template-rows: 1fr 3fr; 第一行占宽度的1&#x2F;4，第二行占宽度的3&#x2F;4</p>
</blockquote>
<h2 id="12、列和行的显示百分比合并缩写"><a href="#12、列和行的显示百分比合并缩写" class="headerlink" title="12、列和行的显示百分比合并缩写"></a>12、列和行的显示百分比合并缩写</h2><p>grid-template 行显示 &#x2F; 列显示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    gird-template: <span class="number">1</span>fr <span class="number">3</span>fr / <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解HTML语言</title>
    <url>/2020/02/08/article/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3HTML%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="一、本文章食用须知"><a href="#一、本文章食用须知" class="headerlink" title="一、本文章食用须知"></a>一、本文章食用须知</h1><p>软件准备：IDE代码编辑器，如：VScode、Sublime Text等</p>
<p>VScode <a href="https://code.visualstudio.com/">链接</a></p>
<p>Sublime Text <a href="https://www.sublimetext.com/">链接</a></p>
<p>本文章适用于没学过HTML语言的，或者刚接触不久想更加了解的人群。</p>
<h1 id="二、HTML的发明者"><a href="#二、HTML的发明者" class="headerlink" title="二、HTML的发明者"></a>二、HTML的发明者</h1><p>Tim Berners-Lee（提姆·柏內茲-李）1955年6月8日-至今。</p>
<p>详情请看维基百科 <a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E">链接</a></p>
<p>李爵士做了些什么事情：</p>
<ol>
<li>编写了第一个浏览器</li>
<li>编写了第一个服务器</li>
<li>使用自己编写的浏览器访问自己编写的服务器</li>
<li>发明了WWW，以及HTML、HTTP、URL</li>
</ol>
<p>做这些事情为了什么：让每个人输入网址就能看到网页</p>
<h1 id="三、HTML起手代码"><a href="#三、HTML起手代码" class="headerlink" title="三、HTML起手代码"></a>三、HTML起手代码</h1><p>如果你安装的是VScode，只需要在VScode里面创建html后缀名的文件，输入 ! 然后按TAB键即可自动生成下列内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>    <span class="comment">&lt;!-- 声明是html5文本类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 使用的语言：en是英语 zh-CN是中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="comment">&lt;!-- 头部标签开始 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="comment">&lt;!-- 编码格式 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><span class="comment">&lt;!-- 防止缩放 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span><span class="comment">&lt;!-- 检查是否IE浏览器，自动调至最新 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="comment">&lt;!-- 网站的标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    <span class="comment">&lt;!-- 头部标签结束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="comment">&lt;!-- body标签开始，页面的代码基本上都写在里面--&gt;</span></span><br><span class="line">	内容</span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你是别的编辑器，或者没有这个插件，请手动输入上面内容。</p>
<h1 id="四、常用的章节标签"><a href="#四、常用的章节标签" class="headerlink" title="四、常用的章节标签"></a>四、常用的章节标签</h1><h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、章节标签"><a href="#2、章节标签" class="headerlink" title="2、章节标签"></a>2、章节标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、文章标签"><a href="#3、文章标签" class="headerlink" title="3、文章标签"></a>3、文章标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、段落标签"><a href="#4、段落标签" class="headerlink" title="4、段落标签"></a>4、段落标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5、头部标签"><a href="#5、头部标签" class="headerlink" title="5、头部标签"></a>5、头部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、脚部标签"><a href="#6、脚部标签" class="headerlink" title="6、脚部标签"></a>6、脚部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7、主要内容标签"><a href="#7、主要内容标签" class="headerlink" title="7、主要内容标签"></a>7、主要内容标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8、旁支标签"><a href="#8、旁支标签" class="headerlink" title="8、旁支标签"></a>8、旁支标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上都是一些比较常用的章节标签。</p>
<h1 id="五、全局属性"><a href="#五、全局属性" class="headerlink" title="五、全局属性"></a>五、全局属性</h1><p>class、contenteditable、hidden、id、style、tabindex、title等。</p>
<h1 id="六、常用的内容标签"><a href="#六、常用的内容标签" class="headerlink" title="六、常用的内容标签"></a>六、常用的内容标签</h1><h3 id="1、有序标签"><a href="#1、有序标签" class="headerlink" title="1、有序标签"></a>1、有序标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、无序标签"><a href="#2、无序标签" class="headerlink" title="2、无序标签"></a>2、无序标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4、链接标签"><a href="#4、链接标签" class="headerlink" title="4、链接标签"></a>4、链接标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5、代码标注标签"><a href="#5、代码标注标签" class="headerlink" title="5、代码标注标签"></a>5、代码标注标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="6、脚部标签-1"><a href="#6、脚部标签-1" class="headerlink" title="6、脚部标签"></a>6、脚部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7、水平分割线标签"><a href="#7、水平分割线标签" class="headerlink" title="7、水平分割线标签"></a>7、水平分割线标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="8、换行标签"><a href="#8、换行标签" class="headerlink" title="8、换行标签"></a>8、换行标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上都是一些比较常用的内容标签。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解fiex布局</title>
    <url>/2020/12/25/article/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3fiex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="1、如何让元素使用flex布局"><a href="#1、如何让元素使用flex布局" class="headerlink" title="1、如何让元素使用flex布局"></a>1、如何让元素使用flex布局</h2><p>给元素添加 flex 或 inline-flex 样式</p>
<ul>
<li>flex 在宽度不够使，直接换行显示</li>
<li>inline-flex 在宽度不够时，显示一半，剩下的下一行接着显示。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; <span class="comment">/* inline-flex */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当元素添加 flex 后，添加 flex 的元素称为 容器，我们可以通过添加属性控制其内部子元素的排列方式。</p>
<h2 id="2、改变元素流动方向"><a href="#2、改变元素流动方向" class="headerlink" title="2、改变元素流动方向"></a>2、改变元素流动方向</h2><p>给 flex 容器，添加 flex-direction 样式</p>
<ul>
<li>row 从左往右排列</li>
<li>row-reverse 从右往左排列</li>
<li>colum 从上往下排列</li>
<li>colum-reverse 从下往上排</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">flex-direction</span>: row; <span class="comment">/* row-reverse colum colum-reverse */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、元素是否换行"><a href="#3、元素是否换行" class="headerlink" title="3、元素是否换行"></a>3、元素是否换行</h2><p>flex 的子元素是默认不会换行，当一行的子元素过多时，他们会自适应的相互挤压。<br>给 flex 容器，添加 flex-wrap 样式，即可控制是否换行</p>
<ul>
<li>no-wrap 不换行（默认）</li>
<li>wrap 换行</li>
<li>wrap-reverse 倒叙换行（简单来说就是与wrap的顺序反了过来）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap; <span class="comment">/* no-wrap wrap-reverse */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4、元素水平对齐元素"><a href="#4、元素水平对齐元素" class="headerlink" title="4、元素水平对齐元素"></a>4、元素水平对齐元素</h2><p>给 flex 容器添加 justify-content 样式</p>
<ul>
<li>flex-start 元素和容器的左端对齐</li>
<li>flex-end 元素和容器的右端对齐</li>
<li>center 元素在容器里居中</li>
<li>space-between 元素之间保持相等的距离</li>
<li>space-around 元素周围保持相等的距离</li>
<li>space-evenly 在 around 基础上，全部空隙自适应</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">justify-content</span>: space-between; <span class="comment">/* flex-start flex-end center space-around space-evenly */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、元素纵轴的分布方式"><a href="#5、元素纵轴的分布方式" class="headerlink" title="5、元素纵轴的分布方式"></a>5、元素纵轴的分布方式</h2><p>给 flex 容器添加 align-items 样式</p>
<ul>
<li>flex-start 顶端对齐</li>
<li>flex-end 底端对齐</li>
<li>center 居中对齐</li>
<li>stretch 铺满</li>
<li>baseline 基线对齐（用不到，可以不用管）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">align-items</span>: flex-start; <span class="comment">/* flex-end center stretch baseline */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6、多行布局"><a href="#6、多行布局" class="headerlink" title="6、多行布局"></a>6、多行布局</h2><p>上面都是默认当行的情况下，现在是多行布局<br>给 flex 容器添加 align-content 样式</p>
<ul>
<li>flex-start 全部挤在顶端</li>
<li>flex-end 全部挤在底端</li>
<li>center 全部挤在中间</li>
<li>stretch 全部平均的铺满</li>
<li>space-between 分别上中下对齐</li>
<li>space-around 在上中下对齐的基础上，全部间隙相同</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">align-content</span>: stretch; <span class="comment">/* flex-start flex-end center stretch space-between space-around */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7、改变子元素排列的顺序"><a href="#7、改变子元素排列的顺序" class="headerlink" title="7、改变子元素排列的顺序"></a>7、改变子元素排列的顺序</h2><p>给 flex 容器内的，子元素盒子添加 order 样式<br>数字越小越靠前，越大越靠后</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    <span class="attribute">order</span>: -<span class="number">11</span>; <span class="comment">/* 负数 0 正数 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、控制子元素所占比"><a href="#8、控制子元素所占比" class="headerlink" title="8、控制子元素所占比"></a>8、控制子元素所占比</h2><p>给 flex 容器内的，子元素添加 flex-grow 样式<br>用数字表示每个子元素所在大小</p>
<p>例如：两边盒子各占4分之1，中间盒子占4分之2</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">child1 &#123;</span><br><span class="line">    <span class="attribute">flex</span>-frow: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">child2 &#123;</span><br><span class="line">    <span class="attribute">flex</span>-frow: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">child3 &#123;</span><br><span class="line">    <span class="attribute">flex</span>-frow: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、固定子元素所占比"><a href="#9、固定子元素所占比" class="headerlink" title="9、固定子元素所占比"></a>9、固定子元素所占比</h2><p>给 flex 容器内的，子元素添加 flex-shrink 样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解jQuery的使用方法</title>
    <url>/2020/02/29/article/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3jQuery%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>一、jQuery如何获取元素</li>
<li>二、jQuery的链式操作是怎么样的</li>
<li>三、jQuery如何创建元素</li>
<li>四、jQuery如何移动元素</li>
<li>五、jQuery如何修改元素</li>
</ul>
<h2 id="一、jQuery如何获取元素"><a href="#一、jQuery如何获取元素" class="headerlink" title="一、jQuery如何获取元素"></a>一、jQuery如何获取元素</h2><p>有两种方法</p>
<p>第一种使用CSS选择表达式方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择整个文档的元素</span></span><br><span class="line">$(<span class="variable language_">document</span>)	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择ID为myID的网页元素</span></span><br><span class="line">$(<span class="string">&#x27;#myId&#x27;</span>)	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择class为myClass的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div.myClass&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择name属性等于first的input元素</span></span><br><span class="line">$(<span class="string">&#x27;input[name=first]&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>第二种使用jQuery的表达式（<a href="https://api.jquery.com/category/selectors/">https://api.jquery.com/category/selectors/</a>）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择网页中第一个a元素</span></span><br><span class="line">$(<span class="string">&#x27;a:first&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择表格的奇数行</span></span><br><span class="line">$(<span class="string">&#x27;tr:odd&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择表单中的input元素</span></span><br><span class="line">$(<span class="string">&#x27;#myForm :input&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择可见的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div:visible&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择所有的div元素，除了前三个</span></span><br><span class="line">$(<span class="string">&#x27;div:gt(2)&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择当前处于动画状态的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div:animated&#x27;</span>) </span><br></pre></td></tr></table></figure>



<h2 id="二、jQuery的链式操作是怎么样的"><a href="#二、jQuery的链式操作是怎么样的" class="headerlink" title="二、jQuery的链式操作是怎么样的"></a>二、<font style="color:#262626;">jQuery的链式操作是怎么样的</font></h2><p><font style="color:#262626;">链式操作简单来说就是直接在前面语句后面接着使用 </font><code>&lt;font style=&quot;color:#262626;&quot;&gt;.&lt;/font&gt;</code> 来连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;h3&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>上面这句话等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择其中的h3元素</span></span><br><span class="line">$.<span class="title function_">find</span>(<span class="string">&#x27;h3&#x27;</span>) </span><br><span class="line"><span class="comment">// 选择第3个h3元素</span></span><br><span class="line">$.<span class="title function_">eq</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将它的内容改为Hello</span></span><br><span class="line">$.<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>) </span><br></pre></td></tr></table></figure>



<p>这么对比后是不是发现链式操作方便了很多</p>
<h2 id="三、jQuery如何创建元素"><a href="#三、jQuery如何创建元素" class="headerlink" title="三、jQuery如何创建元素"></a>三、jQuery如何创建元素</h2><p>在jQuery中创建元素只需要将html代码直接输入到参数内即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;&lt;div&gt;111&lt;/div&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;&lt;li class=&quot;new&quot;&gt;new list item&lt;/li&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li&gt;list item&lt;/li&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="四、jQuery如何移动元素"><a href="#四、jQuery如何移动元素" class="headerlink" title="四、jQuery如何移动元素"></a>四、<font style="color:#262626;">jQuery如何移动元素</font></h2><p><font style="color:#262626;">具体方法是 </font></p>
<p><font style="color:#262626;">选择元素+操作方法+目标元素</font></p>
<p>具体操作方法有以下几种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在现存元素的外部，从后面插入元素</span><br><span class="line">.<span class="title function_">insertAfter</span>()和.<span class="title function_">after</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的外部，从前面插入元素</span><br><span class="line">.<span class="title function_">insertBefore</span>()和.<span class="title function_">before</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的内部，从后面插入元素</span><br><span class="line">.<span class="title function_">appendTo</span>()和.<span class="title function_">append</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的内部，从前面插入元素</span><br><span class="line">.<span class="title function_">prependTo</span>()和.<span class="title function_">prepend</span>()</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<p>将div元素移动到p元素后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertAfter</span>($(<span class="string">&#x27;p&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="五、jQuery如何修改元素"><a href="#五、jQuery如何修改元素" class="headerlink" title="五、jQuery如何修改元素"></a><font style="color:#262626;">五、jQuery如何修改元素</font></h2><p><font style="color:#262626;">获取元素的值</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html()不带参数为取值</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">html</span>()</span><br></pre></td></tr></table></figure>



<p>向元素赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html()带参数为赋值</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>复制元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式为 需要复制的元素+.clone().appendTo+目标位置	</span></span><br><span class="line">$( <span class="string">&quot;.hello&quot;</span> ).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>( <span class="string">&quot;.goodbye&quot;</span> )</span><br></pre></td></tr></table></figure>



<p>删除元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在输入你要删除的元素节点+remove即可</span></span><br><span class="line">$( <span class="string">&quot;.hello&quot;</span> ).<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解什么是MVC</title>
    <url>/2020/03/15/article/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFMVC/</url>
    <content><![CDATA[<ul>
<li>MVC设计模式</li>
<li>简单认识EvenBus</li>
<li>表驱动编程</li>
<li>模块化</li>
</ul>
<h2 id="一、MVC设计模式"><a href="#一、MVC设计模式" class="headerlink" title="一、MVC设计模式"></a>一、MVC设计模式</h2><h3 id="1-为什么要有设计模式"><a href="#1-为什么要有设计模式" class="headerlink" title="1. 为什么要有设计模式"></a>1. 为什么要有设计模式</h3><p>代码重复太多，相同页面重复写等。MVC设计模式就是为了解决代码重复，优化代码结构。</p>
<h3 id="2-学MVC会有什么情况"><a href="#2-学MVC会有什么情况" class="headerlink" title="2. 学MVC会有什么情况"></a>2. 学MVC会有什么情况</h3><ul>
<li>会出现意大利面条式代码的情况，过于臃肿太长，代码重复率高，页面不整洁等。</li>
<li>你会变成类似外包式程序员，每天重复干着重复的事情，不懂得提升自己，不会封装，不会造轮子。</li>
</ul>
<h3 id="3-什么是MVC"><a href="#3-什么是MVC" class="headerlink" title="3. 什么是MVC"></a>3. 什么是MVC</h3><p>将平时全部堆在一起的代码，进行分类管理，细分成一段段小代码。再将代码分种类，分别放入对应M模块、V模块、C模块。方面自己和他人阅读、开发。</p>
<h4 id="M-——-Model（数据类型）负责操作所有数据"><a href="#M-——-Model（数据类型）负责操作所有数据" class="headerlink" title="M —— Model（数据类型）负责操作所有数据"></a>M —— Model（数据类型）负责操作所有数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据相关放入m中</span></span><br><span class="line"><span class="keyword">const</span> m = &#123;</span><br><span class="line">    数据<span class="number">1</span>,</span><br><span class="line">  数据<span class="number">2</span>,</span><br><span class="line">  数据<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="V-——-View（视图）负责所有UI页面"><a href="#V-——-View（视图）负责所有UI页面" class="headerlink" title="V —— View（视图）负责所有UI页面"></a>V —— View（视图）负责所有UI页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视图相关放入v中</span></span><br><span class="line"><span class="keyword">const</span> v = &#123;</span><br><span class="line">    html代码,</span><br><span class="line">    渲染等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="C-——-Controller（控制器）负责其他"><a href="#C-——-Controller（控制器）负责其他" class="headerlink" title="C —— Controller（控制器）负责其他"></a>C —— Controller（控制器）负责其他</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他全部放入c中</span></span><br><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">    事件,</span><br><span class="line">  添加,</span><br><span class="line">  修改等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、简单识EvenBus"><a href="#二、简单识EvenBus" class="headerlink" title="二、简单识EvenBus"></a>二、简单识EvenBus</h2><h3 id="什么是EvenBus"><a href="#什么是EvenBus" class="headerlink" title="- 什么是EvenBus"></a>- 什么是EvenBus</h3><p>EvenBus可以使用监听和触发事件，对所点实现通信。</p>
<h3 id="监听和触发的两个API"><a href="#监听和触发的两个API" class="headerlink" title="- 监听和触发的两个API"></a>- 监听和触发的两个API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送一个信息，用于给监听事件监听</span></span><br><span class="line">eventBus.<span class="title function_">trigger</span>(<span class="string">&#x27;我触发了&#x27;</span>)</span><br><span class="line"><span class="comment">// 监听一个信息，若监听到了则执行</span></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;我触发了&#x27;</span>, 执行语句)</span><br></pre></td></tr></table></figure>

<h3 id="EvenBus伪代码事例"><a href="#EvenBus伪代码事例" class="headerlink" title="- EvenBus伪代码事例"></a>- EvenBus伪代码事例</h3><p>声明eventBus</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventBus = $(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure>

<p>创建监听和触发事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">组件<span class="number">1</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  eventBus.<span class="title function_">trigger</span>(<span class="string">&#x27;hereTrigger&#x27;</span>)</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br><span class="line">组件<span class="number">2</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  eventBus.<span class="title function_">on</span>(<span class="string">&#x27;hereTrigger&#x27;</span>，()=&gt;&#123;</span><br><span class="line">    consolo.<span class="title function_">log</span>(<span class="string">&#x27;Receive message&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>eventBus.trigger执行后，会把hereTrigger发送出去。</p>
<p>如果evenBus.on收到了信息与hereTrigger一致，那么就会执行consolo.log。</p>
<p>如果eventBus.trigger没有执行，那么eventBus.on将不会执行。</p>
<h2 id="三、表驱动编程"><a href="#三、表驱动编程" class="headerlink" title="三、表驱动编程"></a>三、表驱动编程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="- 定义"></a>- 定义</h3><p>表驱动编程，又称之为表驱动、表驱动方法。 “表”是几乎所有数据结构课本都要讨论的非常有用的数据结构。表驱动方法出于特定的目的来使用表，程序员们经常谈到“表驱动”方法，但是课本中却从未提到过什么是”表驱动”方法。表驱动方法是一种使你可以在表中查找信息，而不必用很多的逻辑语句（if或Case）来把它们找出来的方法。事实上，任何信息都可以通过表来挑选。在简单的情况下，逻辑语句往往更简单而且更直接。但随着逻辑链的复杂，表就变得越来越富有吸引力了。</p>
<p>简单来说，将数据统计放在一个位置，需要获取里面数据的时候，像表一样，一一对应。</p>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="- 简单的例子"></a>- 简单的例子</h3><p>拿最常见的if语句来举例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(key = <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">    执行语句a </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key = <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">    执行语句b</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>...</span><br></pre></td></tr></table></figure>

<p>改为表驱动编程来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> table = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="title function_">action</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行语句a&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="title function_">action</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行语句b&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleTable</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> table[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">handleTable</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">action</span>()</span><br></pre></td></tr></table></figure>

<h2 id="四、模块化"><a href="#四、模块化" class="headerlink" title="四、模块化"></a>四、模块化</h2><p>所谓模块化，就是一种将复杂代码分解为更好的可管理模块的方式。MVC设计模式就是一种模块化的体现，将代码分门别类的进行管理。</p>
<h3 id="各自独立"><a href="#各自独立" class="headerlink" title="- 各自独立"></a>- 各自独立</h3><p>在平时写代码的时候，可以将不同功能的代码，单独一个文件来写，然后通过导包导入到主程序中，那么当其中一个出现故障的时候，并不会影响到其他的代码。</p>
<h3 id="分级启动"><a href="#分级启动" class="headerlink" title="- 分级启动"></a>- 分级启动</h3><p>当加载的时候，可以分开加载。如果加载较慢的时候，可以优先加载重要的模块。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>快速创建Vue项目</title>
    <url>/2020/07/14/article/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="安装-vuecli"><a href="#安装-vuecli" class="headerlink" title="安装@vuecli"></a>安装@vuecli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<p>创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure>

<p>根据喜好配置，以下为我的设置</p>
<p>Manually select features<br>Babel,CSS Pre-processors,Linter&#x2F;Formatter,Unit Testing<br>Lint and fix on commit<br>Jest</p>
<blockquote>
<p>没有提及的为默认选项</p>
</blockquote>
<h2 id="使用codesandbox创建好的项目文件"><a href="#使用codesandbox创建好的项目文件" class="headerlink" title="使用codesandbox创建好的项目文件"></a>使用codesandbox创建好的项目文件</h2><p>进入 <a href="codesandbox.io">官网</a> 接着创建一个vue项目，将项目导出来</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>创建好vue项目文件后就可以开始本地预览了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>快速学会Mackdown语法</title>
    <url>/2020/12/25/article/%E5%BF%AB%E9%80%9F%E5%AD%A6%E4%BC%9AMackdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1、命令"><a href="#1、命令" class="headerlink" title="1、命令"></a>1、命令</h2><h3 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h3><h4 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line">以此类推</span><br></pre></td></tr></table></figure>



<h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h3 id="1-2-换行"><a href="#1-2-换行" class="headerlink" title="1.2 换行"></a>1.2 换行</h3><p>一个回车或两个个回车</p>
<h3 id="1-3-链接"><a href="#1-3-链接" class="headerlink" title="1.3 链接"></a>1.3 链接</h3><h4 id="写法-1"><a href="#写法-1" class="headerlink" title="写法"></a>写法</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址</span>)</span><br></pre></td></tr></table></figure>



<h4 id="预览-1"><a href="#预览-1" class="headerlink" title="预览"></a>预览</h4><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接文字</a></p>
<h3 id="1-4-图片"><a href="#1-4-图片" class="headerlink" title="1.4 图片"></a>1.4 图片</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">图片地址</span>)</span><br></pre></td></tr></table></figure>



<h4 id="预览-2"><a href="#预览-2" class="headerlink" title="预览"></a>预览</h4><!-- 400*400 -->
<p><img src="https://picsum.photos/100/100"></p>
<h3 id="1-5-一行代码"><a href="#1-5-一行代码" class="headerlink" title="1.5 一行代码"></a>1.5 一行代码</h3><h4 id="写法-2"><a href="#写法-2" class="headerlink" title="写法"></a>写法</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`代码`</span></span><br></pre></td></tr></table></figure>



<h4 id="预览-3"><a href="#预览-3" class="headerlink" title="预览"></a>预览</h4><p><code>代码</code></p>
<h3 id="1-6-多行代码"><a href="#1-6-多行代码" class="headerlink" title="1.6 多行代码"></a>1.6 多行代码</h3><p>使用两个 &#96;&#96;&#96; 包起来。可以指定语言</p>
<h4 id="预览-4"><a href="#预览-4" class="headerlink" title="预览"></a>预览</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是JavaScript语言&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h3 id="1-7-引用"><a href="#1-7-引用" class="headerlink" title="1.7 引用"></a>1.7 引用</h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 引用的内容</span></span><br></pre></td></tr></table></figure>



<h4 id="预览-5"><a href="#预览-5" class="headerlink" title="预览"></a>预览</h4><blockquote>
<p>引用的内容</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序过程分析</title>
    <url>/2021/08/13/article/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="浅析过程"><a href="#浅析过程" class="headerlink" title="浅析过程"></a>浅析过程</h2><p>快速排序的原理是，通过定一种中间基准值。与这个基准值进行比较，即可区分成比该值大的一组，以及比该值小的一组。然后继续对区分好的数组进去取基准，在进行比较。直到该数组无法切分后，再将一层层向上合并，最终返回结果。</p>
<blockquote>
<p>时间复杂度为 O(nlogn)</p>
</blockquote>
<h2 id="代码实现思路"><a href="#代码实现思路" class="headerlink" title="代码实现思路"></a>代码实现思路</h2><ol>
<li>判断传进来的数组长度是否可以分割，也是用于终止递归的一个判断条件</li>
<li>对数组获取中间值，并抽离出来</li>
<li>定义两个数组，分别保存左右两边的数据集。对数组进行循环，比中间值大的存到right中，比中间值小的存到left中。</li>
<li>进行递归，分别在对left和right的数组的值，再次进行切割判断回到第一步</li>
<li>当所有数值都分割并比较结束后，在将值从下往上合并回来，并返回出去</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">quickSort</span> = arr =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(arr.<span class="property">length</span> &lt;= <span class="number">0</span>) <span class="keyword">return</span> arr</span><br><span class="line">  <span class="keyword">const</span> middleNumber = arr.<span class="title function_">splice</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>), <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> left = []</span><br><span class="line">  <span class="keyword">const</span> right = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; middleNumber) right.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    <span class="keyword">else</span> left.<span class="title function_">push</span>(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">quickSort</span>(left).<span class="title function_">concat</span>(middleNumber, <span class="title function_">quickSort</span>(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a5a5e2ecc1f498d9ea013b3f998a755~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<p>画的有点丑，以上均是个人理解。如果有哪些不对的地方欢迎指出~</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>数据Mock与后端联调</title>
    <url>/2021/01/30/article/%E6%95%B0%E6%8D%AEMock%E4%B8%8E%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>通常前端开发的时候，我们的页面已经开发完成。但是后端的接口不一定已经写完就了。这时候我们就可以自己去伪造一些符合规范的数据，用于前期的测试，等到后端接口完成的时候我们可以在进行一个接口联调。</p>
<h2 id="2、Mock数据的方法"><a href="#2、Mock数据的方法" class="headerlink" title="2、Mock数据的方法"></a>2、Mock数据的方法</h2><h3 id="2-1-自己手写一个简易服务器返回数据"><a href="#2-1-自己手写一个简易服务器返回数据" class="headerlink" title="2.1 自己手写一个简易服务器返回数据"></a>2.1 自己手写一个简易服务器返回数据</h3><p>对于我们前端来说，我们天生就会一个后端开发语言，nodejs即可实现。</p>
<p>我们只需要创建一个简易服务器，对请求路径进行判断，返回对应的mock数据。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pathObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">switch</span> (pathObj.<span class="property">pathname</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;/getWeather&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (pathObj.<span class="property">query</span>.<span class="property">city</span> === <span class="string">&#x27;beijing&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">city</span>: <span class="string">&#x27;beijing&#x27;</span>, <span class="attr">weather</span>: <span class="string">&#x27;sunny&#x27;</span>&#125;))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">city</span>: pathObj.<span class="property">query</span>.<span class="property">city</span>, <span class="attr">weather</span>: <span class="string">&#x27;unknown&#x27;</span>&#125;))</span><br><span class="line">      &#125;</span><br><span class="line">      braak</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> pathname = pathObj.<span class="property">pathname</span> === <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : pathObj.<span class="property">pathname</span></span><br><span class="line">        res.<span class="title function_">end</span>(fs.<span class="title function_">readFileSync</span>(__dirname + pathname))</span><br><span class="line">      &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面这个只是简单的返回，你完全可以使用Express等框架，搭建一个更好用的Mock服务器</p>
</blockquote>
<h3 id="2-2-使用Mock-js和Mock平台"><a href="#2-2-使用Mock-js和Mock平台" class="headerlink" title="2.2 使用Mock.js和Mock平台"></a>2.2 使用Mock.js和Mock平台</h3><h4 id="2-2-1-Mock-js"><a href="#2-2-1-Mock-js" class="headerlink" title="2.2.1 Mock.js"></a>2.2.1 Mock.js</h4><p>Mock.js可以快速通过模板生成数据。</p>
<p><a href="http://mockjs.com/examples.html">http://mockjs.com/examples.html</a></p>
<ol>
<li>常见用法</li>
</ol>
<p><code>@ctitle(3, 10)</code><br><code>@cparagraph</code><br><code>@cword</code><br><code>@cname</code><br><code>@integer(10, 100)</code><br><code>@float(20, 30, 2, 3)</code><br><code>@color</code><br><code>@date</code><br><code>@time</code><br><code>@now</code><br><code>@id</code><br><code>@url</code><br><code>@email</code><br><code>@image(&#39;200x100&#39;)</code></p>
<ol start="2">
<li>使用例子</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;statusCode| 1&#x27;</span>: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">  <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;@cword(4, 10)&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;data| 4&#x27;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="string">&#x27;@id&#x27;</span>,</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;@ctitle&#x27;</span>,</span><br><span class="line">      <span class="attr">author</span>: <span class="string">&#x27;@cname&#x27;</span>,</span><br><span class="line">      <span class="attr">createdAt</span>: <span class="string">&#x27;@datetime&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-Rap2"><a href="#2-2-2-Rap2" class="headerlink" title="2.2.2 Rap2"></a>2.2.2 Rap2</h4><p><a href="http://rap2.taobao.org/">http://rap2.taobao.org</a></p>
<blockquote>
<p>这个平台就是类似在线的服务器，加上Mock.js。实现通过他提供的接口，可以自定义返回相应的数据。</p>
</blockquote>
<h2 id="3、接口规范"><a href="#3、接口规范" class="headerlink" title="3、接口规范"></a>3、接口规范</h2><h3 id="3-1-接口约定"><a href="#3-1-接口约定" class="headerlink" title="3.1 接口约定"></a>3.1 接口约定</h3><p>约定好接口的路径是什么？<br>如<br><code>/auth/register</code></p>
<p>接口的提交类型是什么？<br>如<br><code>GET</code> 获取数据<br><code>POST</code> 提交或创建<br><code>PATCH</code> 修改数据，部分修改<br><code>DELETE</code> 删除数据<br><code>PUT</code> 修改数据，整体替换原有数据</p>
<p>参数类型&#x2F;格式<br>如<br><code>fromdata</code> 或者 <code>application/x-www-form-urlencoded</code></p>
<p>参数字段限制条件<br>返回成功的格式<br>返回失败的格式</p>
<h3 id="3-2-接口测试"><a href="#3-2-接口测试" class="headerlink" title="3.2 接口测试"></a>3.2 接口测试</h3><p>当后端给到你接口的时候，你可以使用命令行的 <code>curl</code> 语句，进行简单的测试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET 请求</span></span><br><span class="line">curl <span class="string">&quot;http://xxx.xxx.com/api/blog/getBlog?id=1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -d 提交的参数，默认是POST</span></span><br><span class="line">curl -d <span class="string">&quot;username=layouwen&amp;password=12345&quot;</span> <span class="string">&quot;http://xxx.xxx.com/api/user/login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -i 展示响应头</span></span><br><span class="line">curl -d <span class="string">&quot;username=layuouwen&amp;password=12345&quot;</span> <span class="string">&quot;http://xxx.xxx.com/api/user/login&quot;</span> -i</span><br><span class="line"></span><br><span class="line"><span class="comment">// -H 设置请求头</span></span><br><span class="line">curl -H <span class="string">&quot;Content-Type:application/json&quot;</span> -X <span class="variable constant_">POST</span> -d <span class="string">&#x27;&#123;&quot;user&quot;: &quot;layouwen&quot;, &quot;password&quot;: &quot;123456&quot;&#125;&#x27;</span> <span class="string">&quot;http://xxx.xxx.com/api/user/login&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -X 设置请求类型</span></span><br><span class="line">curl -d <span class="string">&quot;username=layouwen&amp;passowrd=bbb&quot;</span> -X <span class="variable constant_">POST</span> <span class="string">&quot;http://xxx.xxx.com/api/blog/list&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -b 请求带上cookie</span></span><br><span class="line">curl <span class="string">&quot;http://xxx.xxx.com/api/user/login&quot;</span> -b <span class="string">&quot;connect.sid=df1431 35f89a7sdf89gasdf2g#$@123.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>nodejs</tag>
        <tag>mock</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式概括</title>
    <url>/2020/10/04/article/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<h2 id="1、创建正则表达式"><a href="#1、创建正则表达式" class="headerlink" title="1、创建正则表达式"></a>1、创建正则表达式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">let</span> 变量名 = <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure>

<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表达式.<span class="title function_">test</span>(检测的字符串)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>符合返回true否则返回false</p>
</blockquote>
<h2 id="3、正则表达式的特殊字符"><a href="#3、正则表达式的特殊字符" class="headerlink" title="3、正则表达式的特殊字符"></a>3、正则表达式的特殊字符</h2><h3 id="3-1-边界符"><a href="#3-1-边界符" class="headerlink" title="3.1 边界符^$"></a>3.1 边界符^$</h3><p>^ 从这里开始</p>
<p>$ 到这里结束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc/</span><br><span class="line"></span><br><span class="line"><span class="regexp">/^abc$/</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-或者-（只包含其中一个）"><a href="#3-2-或者-（只包含其中一个）" class="headerlink" title="3.2 或者[]（只包含其中一个）"></a>3.2 或者[]（只包含其中一个）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[abc]$/</span><br></pre></td></tr></table></figure>

<h3 id="3-3-范围"><a href="#3-3-范围" class="headerlink" title="3.3 范围-"></a>3.3 范围-</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^a-z$/</span><br></pre></td></tr></table></figure>

<h3 id="3-4-取反"><a href="#3-4-取反" class="headerlink" title="3.4 取反[^]"></a>3.4 取反[^]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[^<span class="number">0</span>-<span class="number">9</span>]$/</span><br></pre></td></tr></table></figure>

<h2 id="4、量词符"><a href="#4、量词符" class="headerlink" title="4、量词符*+?{}"></a>4、量词符*+?{}</h2><ul>
<li>出现0次或很多次</li>
</ul>
<ul>
<li>出现1次或很多次</li>
</ul>
<p>？ 出现0次或者1次</p>
<p>{} 重复出现多次</p>
<p>{数字,} 大于多少次</p>
<p>{数字1, 数字2} 大于等于数字1，小于等于数字2</p>
<h2 id="5、预定义类"><a href="#5、预定义类" class="headerlink" title="5、预定义类"></a>5、预定义类</h2><p>\d 匹配0-9之间[0-9]</p>
<p>\D 匹配0-9以外的所有字符[^0-9]</p>
<p>\w 匹配所有字母、数字和下划线[A-Za-z0-9_]</p>
<p>\W 匹配字母、数字、下划线、以外的所有字符[^A-Za-z0-9_]</p>
<p>\s 匹配空格（换行符、制表符、空格等）[\t\r\n\v\f]</p>
<p>\S 匹配非空格的字符[^\t\r\n\v\f]</p>
<h2 id="6、替换"><a href="#6、替换" class="headerlink" title="6、替换"></a>6、替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(正则, 需要替换内容)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>快速入门Vue</title>
    <url>/2020/07/15/article/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Vue/</url>
    <content><![CDATA[<h2 id="Vue实例的options属性"><a href="#Vue实例的options属性" class="headerlink" title="Vue实例的options属性"></a>Vue实例的options属性</h2><h3 id="一、数据"><a href="#一、数据" class="headerlink" title="一、数据"></a>一、数据</h3><h4 id="data-内部数据"><a href="#data-内部数据" class="headerlink" title="data 内部数据"></a>data 内部数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对象形式</span><br><span class="line">data: &#123;</span><br><span class="line">    n: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">// 函数形式</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        n: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优先使用函数，因为如果调用多次，会出现对象被多次引用的问题</p>
<p>使用数据可以使用 this.数据名</p>
</blockquote>
<h4 id="props-外部数据"><a href="#props-外部数据" class="headerlink" title="props 外部数据"></a>props 外部数据</h4><p>接收外部数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &#123;&#123;外部数据名&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    porps: [&#x27;外部数据名&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>传外部数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;组件名 外部数据名=&quot;数据&quot;/&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果你传的是变量或方法，需要加上冒号</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;组件名 :外部数据名=&quot;变量名或方法名&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="propsData"><a href="#propsData" class="headerlink" title="propsData"></a>propsData</h4><h4 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h4><h4 id="methods-方法"><a href="#methods-方法" class="headerlink" title="methods 方法"></a>methods 方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    method: &#123;</span><br><span class="line">        函数名()&#123;</span><br><span class="line">            函数体</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="watch-监听"><a href="#watch-监听" class="headerlink" title="watch 监听"></a>watch 监听</h4><h3 id="二、DOM"><a href="#二、DOM" class="headerlink" title="二、DOM"></a>二、DOM</h3><h4 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el 挂载点"></a>el 挂载点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>执行后会将#app标签整个替换掉</p>
<blockquote>
<p>还可以使用 new Vue({}).$mount(#app) 来挂载</p>
</blockquote>
<h4 id="template-HTML"><a href="#template-HTML" class="headerlink" title="template HTML"></a>template HTML</h4><h4 id="render-非完整版的HTML"><a href="#render-非完整版的HTML" class="headerlink" title="render 非完整版的HTML"></a>render 非完整版的HTML</h4><h4 id="renderError-用不到"><a href="#renderError-用不到" class="headerlink" title="renderError 用不到"></a>renderError 用不到</h4><h3 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h3><p>beforeCreate 创建前</p>
<p>created 创建后</p>
<p>beforeMount 挂载前</p>
<p>mounted 挂载后</p>
<p>beforeUpdate 更新前</p>
<p>updated 更新后</p>
<p>activated</p>
<p>deactivated</p>
<p>beforeDestroy 销毁前</p>
<p>destroyed 销毁后</p>
<p>errorCaptured 用不到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">   beforeCreate()&#123;</span><br><span class="line">    console.log(&#x27;创建前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   created()&#123;</span><br><span class="line">    console.log(&#x27;创建后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeMount()&#123;</span><br><span class="line">    console.log(&#x27;挂载到页面前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   mount()&#123;</span><br><span class="line">    console.log(&#x27;挂载到页面后执行&#x27;)</span><br><span class="line">   &#125;，</span><br><span class="line">   beforeUpdate()&#123;</span><br><span class="line">    console.log(&#x27;数据更新前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   update()&#123;</span><br><span class="line">    console.log(&#x27;数据更新后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeDestroy()&#123;</span><br><span class="line">    console.log(&#x27;消亡前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   destroyed()&#123;</span><br><span class="line">    console.log(&#x27;消亡后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="四、资源"><a href="#四、资源" class="headerlink" title="四、资源"></a>四、资源</h3><h4 id="directives-指令"><a href="#directives-指令" class="headerlink" title="directives 指令"></a>directives 指令</h4><h4 id="filters-过滤器"><a href="#filters-过滤器" class="headerlink" title="filters 过滤器"></a>filters 过滤器</h4><h4 id="components-组件"><a href="#components-组件" class="headerlink" title="components 组件"></a>components 组件</h4><p>方法1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;组件名&#x27;,&#123;与Vue实例的属性一致&#125;)</span><br></pre></td></tr></table></figure>



<p>方法2</p>
<p>创建单文件组件，以 <code>.vue</code> 结尾的文件，在Vue实例中引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Demo from &#x27;./Demo&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    components: &#123;Demo&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>然后即可直接在HTML中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>推荐优先使用方法2</p>
</blockquote>
<h3 id="五、组合"><a href="#五、组合" class="headerlink" title="五、组合"></a>五、组合</h3><h4 id="parent-父"><a href="#parent-父" class="headerlink" title="parent 父"></a>parent 父</h4><h4 id="mixins-混入"><a href="#mixins-混入" class="headerlink" title="mixins 混入"></a>mixins 混入</h4><h4 id="extends-拓展"><a href="#extends-拓展" class="headerlink" title="extends 拓展"></a>extends 拓展</h4><h4 id="provide-提供"><a href="#provide-提供" class="headerlink" title="provide 提供"></a>provide 提供</h4><h4 id="inject-注入"><a href="#inject-注入" class="headerlink" title="inject 注入"></a>inject 注入</h4>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Vue完整版和运行版的区别</title>
    <url>/2020/03/18/article/%E6%B5%85%E6%9E%90Vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E8%BF%90%E8%A1%8C%E7%89%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>完整版和运行版的名字区别</li>
<li>tenplate和render的使用方法</li>
<li>使用codesandbox快速生成Vue项目</li>
<li>总结</li>
</ul>
<h2 id="一、完整版和运行版的名字区别"><a href="#一、完整版和运行版的名字区别" class="headerlink" title="一、完整版和运行版的名字区别"></a>一、完整版和运行版的名字区别</h2><p>可以去BootCDN里面引用，进去后直接搜索 <code>Vue</code> 即可。<br><a href="https://www.bootcdn.cn/">BootCnd官网</a><br>完整版的后缀是 —— vue.js<br>运行版的后缀多了个runtime —— vue.runtime.js<br>所有版本都有压缩版，压缩版功能一致，只是体积相对要小 —— 版本.min.js</p>
<h2 id="二、template和render的使用方法"><a href="#二、template和render的使用方法" class="headerlink" title="二、template和render的使用方法"></a>二、template和render的使用方法</h2><ul>
<li><p>template</p>
<p>完整版可以直接在HTML里面或者在template选项中直接写代码。它会自动解析</p>
<p>例如：</p>
<ol>
<li><p>在index.jhtml中添加一个id为app的标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接着添加script标签，引入完整版的js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.11/vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在main.js里，直接把html代码写入template选项中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;&#123;&#123;n&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Vue后，它会直接把n为0写入到app标签中</p>
</li>
</ol>
</li>
<li><p>render</p>
<p>运行版，需要将HTML标签写入render中，让render来写入html中</p>
<p>例如：</p>
<ol>
<li><p>在index.jhtml中添加一个id为app的标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接着添加script标签，引入运行版的js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.11/vue.runtime.min.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在main.js里，用render函数来创建标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Vue后，达到完整版一样的效果</p>
</li>
</ol>
</li>
</ul>
<h2 id="三、使用codesandbox快速生成Vue项目"><a href="#三、使用codesandbox快速生成Vue项目" class="headerlink" title="三、使用codesandbox快速生成Vue项目"></a>三、使用codesandbox快速生成Vue项目</h2><p>新手想学习Vue的时候，可以借助codesandbox来进行快速的搭建Vue项目。省去自己安装和配置的时间。当然开发的时候，还是自己在电脑中一步一步配置好。</p>
<p><a href="https://codesandbox.io/">Codesandbox官网</a></p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="- 搭建过程"></a>- 搭建过程</h3><ol>
<li><p>点击上面链接，进入官网</p>
</li>
<li><p>建议不用注册，注册后好像是限制项目数量。点击Create Sandbox</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb94562ff101~tplv-t2oaga2asx-image.image" alt="2.png"></p>
</li>
<li><p>接着点击Vue即可创建</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb9456448812~tplv-t2oaga2asx-image.image" alt="3.png"></p>
</li>
<li><p>创建完后就可以开始编辑代码，在旁边还有即时预览的窗口</p>
</li>
<li><p>写完导出，点击File——Export to ZIP</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb94599251f4~tplv-t2oaga2asx-image.image" alt="5.png"></p>
</li>
<li><p>导出后，解压下载好的压缩包，就是个本地文件了</p>
</li>
</ol>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Vue完整版</th>
<th align="left">Vue非完整版</th>
<th align="left">评价</th>
</tr>
</thead>
<tbody><tr>
<td align="left">特点</td>
<td align="left">有compiler</td>
<td align="left">没有compiler</td>
<td align="left">compiler占40%体积</td>
</tr>
<tr>
<td align="left">视图</td>
<td align="left">写在HTML里或者写在template选项</td>
<td align="left">写在render函数里用h来创建标签</td>
<td align="left">h是尤雨溪写好传给render的</td>
</tr>
<tr>
<td align="left">cdn引入</td>
<td align="left">vue.js</td>
<td align="left">vue.runtime.js</td>
<td align="left">文件名不同，生成环境后缀为.min.js</td>
</tr>
<tr>
<td align="left">webpack 引入</td>
<td align="left">需要配置alias</td>
<td align="left">默认使用此版</td>
<td align="left">尤雨溪配置</td>
</tr>
<tr>
<td align="left">@vue&#x2F;cli 引入</td>
<td align="left">需要额外配置</td>
<td align="left">默认使用此版</td>
<td align="left">尤雨溪、蒋豪群配置</td>
</tr>
</tbody></table>
<p>最佳使用的方法：</p>
<p>​	使用非完整版，配合vue-loader和vue文件</p>
<p>思路：</p>
<ol>
<li>保证用户体验，用户下载的JS文件体积更小，但只支持h函数</li>
<li>保证开发体验，开发者可以直接在vue文件里写HTML标签，而不写h函数</li>
<li>麻烦的代码让loader去写，vue-loader把vue文件里面的HTML转换为h函数</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈ES6后的TDZ时间死区</title>
    <url>/2021/01/27/article/%E6%B5%85%E8%B0%88ES6%E5%90%8E%E7%9A%84TDZ%E6%97%B6%E9%97%B4%E6%AD%BB%E5%8C%BA/</url>
    <content><![CDATA[<h2 id="1、const、let和var"><a href="#1、const、let和var" class="headerlink" title="1、const、let和var"></a>1、const、let和var</h2><p>在es6新特特性这，let和const可以达到局部作用域的效果。</p>
<h3 id="1-1-var"><a href="#1-1-var" class="headerlink" title="1.1 var"></a>1.1 var</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">var</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<p>大家在网上听的最多的就是var会进行变量提升，事实也是如此。上面例子中，函数外部声明变量a赋值为4。当调用函数时，内部的变量a会提到log前提前声明，并且默认赋值为undefined。然后才log。如下图</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">4</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="literal">undefined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<p>所以你们看到的结果为undifind，同理下面例子也是如此</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure>

<p>上面例子会先变量声明赋值为undefined，然后在将4赋值给变量b</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">b = <span class="number">4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure>

<h3 id="1-2-let-const"><a href="#1-2-let-const" class="headerlink" title="1.2 let&#x2F;const"></a>1.2 let&#x2F;const</h3><p>在let中，很多人在面试中都会回答到。他与var最大的区别是不会变量提升，其实不然。可以看下面这个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>()</span><br></pre></td></tr></table></figure>

<p>按照大多数人的了解，这个结果不会变量提升，所以应该输入外部的1才对。但是结果却是报错，下面看看分析。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  a = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在调用say函数的时候，他发现在局部作用域（函数内部）里有一个变量声明，它依旧会将其变量提升，只是这次与var的区别不太一样，var在提升的同时，他会进行一个赋值为undefined，但是let只是单纯的变量提升。所以你会发现这个是报错的。</p>
<blockquote>
<p>const 也是一样的道理，只是在const中不能对变量进行更改。</p>
</blockquote>
<h2 id="2、TDZ时间死区"><a href="#2、TDZ时间死区" class="headerlink" title="2、TDZ时间死区"></a>2、TDZ时间死区</h2><p>其实刚刚我们已经接触到了时间死区，只是你没有发现。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">520</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">say</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 时间死区开始</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="comment">// 时间死区结束</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">520</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面例子中，因为我们下方使用let对a进行变量声明后，造成的变量提升，导致我们无法对a进行修改。这个位置就是我们说的时间死区。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>tdz</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止移动端页面随手指滑动</title>
    <url>/2020/05/16/article/%E7%A6%81%E6%AD%A2%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E9%9A%8F%E6%89%8B%E6%8C%87%E6%BB%91%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>在你使用 Wechat 或 QQ 自带的浏览器打开网页时，你会发现向上滑动时页面正常，但你向下滑动时会出现软件自带的功能，这时我们想禁止页面移动来固定页面，可以使用下面代码实现</p>
<h2 id="二、解决代码"><a href="#二、解决代码" class="headerlink" title="二、解决代码"></a>二、解决代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mo = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>; <span class="comment">// 隐藏滚动条</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, mo, &#123;</span><br><span class="line">        <span class="attr">passive</span>: <span class="literal">false</span></span><br><span class="line">    &#125;); <span class="comment">//禁止页面滑动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接默认不让滑动</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许滑动</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span>=<span class="string">&#x27;&#x27;</span>; <span class="comment">// 显示滚动条</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,mo,&#123;<span class="attr">passive</span>:<span class="literal">false</span>&#125;);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、实际应用"><a href="#三、实际应用" class="headerlink" title="三、实际应用"></a>三、实际应用</h2><h3 id="Art-Time-艺术时间"><a href="#Art-Time-艺术时间" class="headerlink" title="Art-Time 艺术时间"></a>Art-Time 艺术时间</h3><p>简易画板，可用于日常涂鸦，计算，草稿等</p>
<p><a href="https://layouwen.github.io/Art-Time/index.html">https://layouwen.github.io/Art-Time/index.html</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现Vuex了解其实现原理</title>
    <url>/2021/07/09/article/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0Vuex%E4%BA%86%E8%A7%A3%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本篇文章循序渐进带大家实现Vuex的主要功能，阅读前需要对vue的使用有基本的认识，学习过class了解其基本概念。</p>
<p>下面我们就开始吧</p>
<h3 id="最终代码链接"><a href="#最终代码链接" class="headerlink" title="最终代码链接"></a>最终代码链接</h3><p><a href="https://github.com/Layouwen/vuex-study">github链接</a></p>
<h2 id="2、准备测试数据"><a href="#2、准备测试数据" class="headerlink" title="2、准备测试数据"></a>2、准备测试数据</h2><p>我们可以使用VueCli搭建一个Vuex的项目。这里简单的说一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你使用 yarn</span></span><br><span class="line">yarn global add @vue/cll</span><br><span class="line"><span class="comment"># 如果你使用 npm</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 创建 Vue2 项目</span></span><br><span class="line">vue create vue-study</span><br></pre></td></tr></table></figure>

<p>安装完后，直接启动该服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-study</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure>

<p>接着我们可以先使用官方的 <strong>Vuex</strong> 先跑一个测试例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vuex</span><br></pre></td></tr></table></figure>

<p>编写文件 store&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">changeName</span>(<span class="params">state, newName</span>) &#123;</span><br><span class="line">      state.<span class="property">name</span> = newName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">changeAge</span>(<span class="params">state, newAge</span>) &#123;</span><br><span class="line">      state.<span class="property">age</span> = newAge</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">changeAge</span>(<span class="params">store, newAge</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        store.<span class="title function_">commit</span>(<span class="string">&#x27;changeAge&#x27;</span>, newAge)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">info</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span> + state.<span class="property">name</span> + <span class="string">&#x27;，今年&#x27;</span> + state.<span class="property">age</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>编辑 <strong>main.js</strong> 将 <strong>store</strong> 添加到 Vue 选项中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 <strong>App.vue</strong> 中显示我们的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;名字: &#123;&#123; $store.state.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;$store.commit(&#x27;changeName&#x27;, &#x27;Avan&#x27;)&quot;&gt;</span><br><span class="line">        commit changeName</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;span&gt;年龄： &#123;&#123; $store.state.age &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;button @click=&quot;$store.dispatch(&#x27;changeAge&#x27;, 21)&quot;&gt;</span><br><span class="line">        commit changeName</span><br><span class="line">      &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123;$store.getters.info&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<p>现在我们就可以看到我们的数据了</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/38cf646b2ccf436e9af969aaba6cd925~tplv-k3u1fbpfcp-watermark.image" alt="01.png"></p>
<p>下面我就开始实现自己的 <strong>Vuex</strong> 插件</p>
<h2 id="3、实现插件注册"><a href="#3、实现插件注册" class="headerlink" title="3、实现插件注册"></a>3、实现插件注册</h2><p>我们使用 <strong>Vuex</strong> 的时候是通过 use 进行注册，说明 <strong>Vuex</strong> 是一个插件。需要实现一个install方法</p>
<p>创建一个新文件实现我们自己的 Vuex</p>
<p>创建一个 Store 类，以及编写一个 install 方法，并定义一个变量保存 Vue，并在 this 中写一下假数据，</p>
<p>src&#x2F;avuex.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用于保存 Vue</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 核心代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = &#123;</span><br><span class="line">      <span class="attr">info</span>: <span class="string">&#x27;我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">name</span> + <span class="string">&#x27;，今年&#x27;</span> + <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">age</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册插件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span> = _Vue</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span>) <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$store</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">store</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; <span class="title class_">Store</span>, install &#125;</span><br></pre></td></tr></table></figure>

<p>在 store&#x2F;index.js 使用我们自己的 **avuex.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import Vuex from &#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;../avuex&#x27;</span></span><br></pre></td></tr></table></figure>

<p>回到页面，看看是否正常显示。如果显示成功了，证明插件成功注册</p>
<blockquote>
<p>在 Vue.use(Vuex) 时，Vue会自动调用 install 方案。<br>使用mixin，将我们在Vue选项中的store实例，挂载到原型上<br>我们就可以在Vue实例中，通过 this.$store 使用</p>
</blockquote>
<h2 id="4、实现state"><a href="#4、实现state" class="headerlink" title="4、实现state"></a>4、实现state</h2><p>我们在 <strong>store&#x2F;index</strong> 中 new Store 的时候，传入了我们的初始化数据，我们需要将这些数据挂载到 store 实例中</p>
<p>avuex.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = options.<span class="property">state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$mutations</span> = options.<span class="property">mutations</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$actions</span> = options.<span class="property">actions</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = options.<span class="property">getters</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在发现，我们页面显示的数据有点问题，原因是我们getter是一个计算属性，应该返回的时候函数的结果。这里我们先放一下，先实现一下state的响应数据，有几套方案，比如使用Vue的工具函数，<code>Vue.util.defineReactive</code> 或者直接使用new Vue创建一个响应式data。我们这里采用后者。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_vm</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">$$state</span>: options.<span class="property">state</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$mutations</span> = options.<span class="property">mutations</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$actions</span> = options.<span class="property">actions</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = options.<span class="property">getters</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">state</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_vm</span>.<span class="property">$data</span>.<span class="property">$$state</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在回到页面发现正常显示</p>
<blockquote>
<p>通过 new Vue创建响应式对象复制给 _vm 接着通过 get 当使用 this.state 的时候。我们获取 _vm.$data.$$state 的数据，也就是我们通过new Vue 创建出来的响应式 state</p>
</blockquote>
<h2 id="5、实现commit"><a href="#5、实现commit" class="headerlink" title="5、实现commit"></a>5、实现commit</h2><p>在 <strong>Vuex</strong> 中，我们修改数据是通过 <code>this.$store.commit(&#39;mutations对应的名称&#39;, 需要的数据)</code> 来进行数据的变更。所以我们需要在 Store 实例中实现一个 commit 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">commit</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="variable language_">this</span>.<span class="property">$mutations</span>[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;mutation does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">entry</span>(<span class="variable language_">this</span>.<span class="property">state</span>, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到页面。此时我们已经可以使用 commit changeName 修改 state.name 页面并响应了修改</p>
<blockquote>
<p>在调用 commit 时会传入 type 和 payload 两个参数<br>通过type查找我们在new Store中传进来的 mutations 是否有对应的函数<br>有的话将 state 和 payload 传过去</p>
</blockquote>
<h2 id="6、实现dispatch"><a href="#6、实现dispatch" class="headerlink" title="6、实现dispatch"></a>6、实现dispatch</h2><p>一般同步时，使用 commit 进行数据的修改，在异步操作时，将代码写到 actions 中。使用 dispatch 进行修改。所以我们现在实现一个 dispatch 来使用 actions 中的方法。实现方法同 commit。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(<span class="params">type, payload</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="variable language_">this</span>.<span class="property">$actions</span>[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;action does not exist&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">entry</span>(<span class="variable language_">this</span>, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时回到页面，我们也可以正常使用 dispatch changeAge</p>
<blockquote>
<p>实现原理同 commit 一致<br>在action参数接收中，第一个参数是store实例，所以我们需要把this传过去</p>
</blockquote>
<h2 id="7、绑定commit和dispatch中的this"><a href="#7、绑定commit和dispatch中的this" class="headerlink" title="7、绑定commit和dispatch中的this"></a>7、绑定commit和dispatch中的this</h2><p>在平时使用 commit 和 dispatch 中，难免会出现 this 指向丢失的情况。为了方便使用者使用。我们在 Store 的构造方法中将 this 绑定死 store 实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">commit</span> = <span class="variable language_">this</span>.<span class="property">commit</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dispatch</span> = <span class="variable language_">this</span>.<span class="property">dispatch</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="8、实现getters"><a href="#8、实现getters" class="headerlink" title="8、实现getters"></a>8、实现getters</h2><p>我们可以借用 Vue 实例上的 computed 计算属性实现 getter，使用 <code>Object.defineProperty</code> 实现当我们访问 this.$store.getter 的时候，访问的是我们 Vue 实例中的 computed。所以我们得将 getters 选项映射出一个新的 computed 变量接收，因为 computed 的函数不可以接收参数，所以我们通过高阶函数，返回我们 getters 中函数的返回结果。再将这个映射出来的 computed 变量，赋值到Vue实例中的computed。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Store</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getters</span> = &#123;&#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_wrapperGetters</span> = options.<span class="property">getters</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">_wrapperGetters</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> store = <span class="variable language_">this</span></span><br><span class="line">      computed[key] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> store.<span class="property">_wrapperGetters</span>[key](store.<span class="property">state</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(store.<span class="property">getters</span>, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> store.<span class="property">_vm</span>[key]</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_vm</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">$$state</span>: options.<span class="property">state</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      computed,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回到页面，我们已经能正常使用 getters.info。当 name 或者 age 改变的时候，会自动进行响应</p>
<h2 id="End-最终效果"><a href="#End-最终效果" class="headerlink" title="End 最终效果"></a>End 最终效果</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39828d6cf3124168a75d05d4b948c809~tplv-k3u1fbpfcp-zoom-1.image" alt="02"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>简单了解 URL</title>
    <url>/2020/05/11/article/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%20URL/</url>
    <content><![CDATA[<h2 id="一、URL"><a href="#一、URL" class="headerlink" title="一、URL"></a>一、URL</h2><p>统一资源定位符（Uniform Resource Locator，缩写为 URL）<br>或称 统一资源定位器、定位地址、URL地址，俗称网页地址或简称网址，如同网络上的门牌定位到固定的地址。</p>
<h3 id="URL组成部分"><a href="#URL组成部分" class="headerlink" title="URL组成部分"></a>URL组成部分</h3><p>一个标准的 URL地址，可包含以下组成部分<br>协议 + 域名 + 端口 + 资源层级路径 + 查询参数 + 锚点</p>
<p>如：<br><a href="https://liangyouwen.com/index?name=wen#name">https://liangyouwen.com/index?name=wen#name</a></p>
<ul>
<li>https 协议部分</li>
<li>liangyouwen.com 协议部分</li>
<li>&#x2F;index 资源层级部分，文件所在路径</li>
<li>?name&#x3D;wen 查询参数部分，本地将此参数发送给服务器进行处理</li>
<li>#name 锚点部分，不发送给服务器，用于浏览器解析，定位锚地</li>
</ul>
<h2 id="二、IP地址"><a href="#二、IP地址" class="headerlink" title="二、IP地址"></a>二、IP地址</h2><p>ip地址（Internet Protocol Address，简称 IP Address，又或者 IP）<br>当设备连接网络，设备将被分配一个IP地址，用作标识。通过IP地址，设备间可以互相通讯，如果没有IP地址，我们将无法知道哪个设备是发送方，无法知道哪个是接收方。</p>
<h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p>可以使用 ping 命令，查看与该 IP地址 的连通情况。<br>在 命令行 或 终端 输入<br>格式为：ping IP地址&#x2F;域名<br>如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="三、DNS域名"><a href="#三、DNS域名" class="headerlink" title="三、DNS域名"></a>三、DNS域名</h2><p>域名系统（Domain Name System，缩写为 DNS）<br>是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p>
<h3 id="1-域名作用"><a href="#1-域名作用" class="headerlink" title="1. 域名作用"></a>1. 域名作用</h3><p>组要作用是用于将 IP地址，转换为更方便记忆的 名字。也就是 域名重定向，比如输入 baidu.com 或 qq.com 等。域名系统会将输入的域名解析为指定的 IP地址。</p>
<blockquote>
<p>一个域名可以对应多个IP，称为 负载均衡<br>一个IP可以对应多个域名，称为 共享主机</p>
</blockquote>
<h3 id="2-nslookup命令"><a href="#2-nslookup命令" class="headerlink" title="2. nslookup命令"></a>2. nslookup命令</h3><p>使用 nslookup 命令可以查看该域名所拥有的 IP地址。<br>在 命令行 或 终端 输入<br>格式为：nslookup 域名<br>如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nslookup baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="3-域名层次"><a href="#3-域名层次" class="headerlink" title="3. 域名层次"></a>3. 域名层次</h3><p>域名分多个层次，从右往左依次递增。</p>
<p>如： baidu.com</p>
<ul>
<li>com 为顶级域名，顶级域名分为很多种：gov政府、net网络、edu教育机构、com商业等等</li>
<li>baidu 为二级域名</li>
<li>依次递增</li>
</ul>
<blockquote>
<p>多数公司为了使自己网站容易记，都会使用 二级域名。</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>简单实现VueRouter了解其实现原理</title>
    <url>/2021/07/12/article/%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0VueRouter%E4%BA%86%E8%A7%A3%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本篇文章循序渐进带大家实现VueRouter的实现原理，阅读前需要对vue的使用有基本的认识，学习过class了解其基本概念。</p>
<p>实现注意点:</p>
<ul>
<li>如何注册插件</li>
<li>实现router-view和router-link两个组件</li>
<li>如何根据当前路由显示对应组件</li>
<li>路由切换时如何更新组件</li>
<li>嵌套路由如何实现</li>
</ul>
<p>带着这些问题下面我们就开始一步一步的实现</p>
<h3 id="最终代码链接"><a href="#最终代码链接" class="headerlink" title="最终代码链接"></a>最终代码链接</h3><p><a href="https://github.com/Layouwen/vue-router-study">github 链接</a></p>
<h2 id="2、准备测试数据"><a href="#2、准备测试数据" class="headerlink" title="2、准备测试数据"></a>2、准备测试数据</h2><p>我们可以使用VueCli搭建一个VueRouter的项目。这里简单的说一下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果你使用 yarn</span></span><br><span class="line">yarn global add @vue/cll</span><br><span class="line"><span class="comment"># 如果你使用 npm</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># 创建 Vue2 项目</span></span><br><span class="line">vue create vue-router-study</span><br></pre></td></tr></table></figure>

<p>安装完后，直接启动该服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue-router-study</span><br><span class="line">yarn serve</span><br></pre></td></tr></table></figure>

<p>接着我们可以先使用官方的 <strong>vue-router</strong> 先跑一个测试例子</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router</span><br></pre></td></tr></table></figure>

<p>编写文件 router&#x2F;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HelloWorld.vue&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>),</span><br><span class="line">      <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/a/b&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>) &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>编辑 <strong>main.js</strong> 将 <strong>router</strong> 添加到 Vue 选项中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在 <strong>App.vue</strong> 中显示我们的数据</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/a&quot;</span>&gt;</span>a页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/a/b&quot;</span>&gt;</span>b页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ...</span><br></pre></td></tr></table></figure>

<p>创建两个组件 <strong>A.vue</strong> 和 <strong>B.vue</strong></p>
<p>components&#x2F;A.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是A组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>componets&#x2F;B.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是B页面</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;B&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在回到页面看看效果</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ed4b7b972d1a4d5fa548b293b694b0f4~tplv-k3u1fbpfcp-watermark.image" alt="01.gif"></p>
<p>下面我就开始实现自己的 <strong>vue-router</strong> 插件</p>
<h2 id="3、实现插件注册"><a href="#3、实现插件注册" class="headerlink" title="3、实现插件注册"></a>3、实现插件注册</h2><p>我们使用 <strong>VueRouter</strong> 的时候是通过 use 进行注册，说明 <strong>VueRouter</strong> 是一个插件。需要实现一个install方法</p>
<p>创建一个新文件实现我们自己的 VueRouter</p>
<p>创建一个 VueRouter 类，以及编写一个 install 方法，并定义一个变量保存 Vue</p>
<p>src&#x2F;avue-router.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="title class_">Vue</span> = _Vue</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span>) <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$router</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">router</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">VueRouter</span></span><br></pre></td></tr></table></figure>

<p>在 router&#x2F;index.js 使用我们自己的 <strong>avue-router.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;../avue-router&#x27;</span></span><br></pre></td></tr></table></figure>

<p>回到页面，看看是否正常显示。如果显示成功了，证明插件成功注册</p>
<blockquote>
<p>在 Vue.use(VueRouter) 时，Vue会自动调用 install 方案。<br>使用mixin，将我们在Vue选项中的router实例，挂载到原型上<br>我们就可以在Vue实例中，通过 this.$router 获得实例数据</p>
</blockquote>
<h2 id="4、实现-router-link-组件"><a href="#4、实现-router-link-组件" class="headerlink" title="4、实现 router-link 组件"></a>4、实现 router-link 组件</h2><p>通过 Vue 挂载全局组件，并将 props 拼接到 href 中，将默认插槽的值填充进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">      <span class="attr">to</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">require</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">attrs</span>: &#123;</span><br><span class="line">            <span class="attr">href</span>: <span class="string">&#x27;#&#x27;</span> + <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$slots</span>.<span class="property">default</span></span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在回到页面，router-link 已经正常显示。</p>
<h2 id="5、实现-router-view-组件"><a href="#5、实现-router-view-组件" class="headerlink" title="5、实现 router-view 组件"></a>5、实现 router-view 组件</h2><p>需要声明一个响应式的变量 current 保存当前的 hash 路径。router-view 组件根据这个路径匹配 routes 表中对应的组件，显示出来。并监听 hashchange 在路径更新的时候，更新 current 的路径。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存实例时候配置项</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$options</span> = options</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">util</span>.<span class="title function_">defineReactive</span>(<span class="variable language_">this</span>, <span class="string">&#x27;current&#x27;</span>, <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    <span class="title function_">addEventListener</span>(<span class="string">&#x27;hashchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onHashChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">    <span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="variable language_">this</span>.<span class="property">onHashChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onHashChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = <span class="keyword">function</span>(<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">const</span> route = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">$options</span>.<span class="property">routes</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">route</span> =&gt;</span> route.<span class="property">path</span> === <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">current</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (route) component = route.<span class="property">component</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(component)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为此刻我们没有实现嵌套路由，所以需要先把 <code>A.vue</code> 中的 <code>router-view</code> 注释掉，否则会造成死循环</p>
<p>components&#x2F;A.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我是A组件</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- &lt;router-view&gt;&lt;/router-view&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>现在回到页面，我们发现可以使用 <code>router-link</code> 切换页面了。</p>
<h3 id="5-1-实现嵌套路由"><a href="#5-1-实现嵌套路由" class="headerlink" title="5.1 实现嵌套路由"></a>5.1 实现嵌套路由</h3><p>我们参考一下官方的写法</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0fd2fcd775b845d4bb08293605be7a2d~tplv-k3u1fbpfcp-zoom-1.image" alt="02.jpg"></p>
<p>可以看出，他给每个 router-view 组件定义了个 depth 的变量确定它的深度，并且有个 <code>matched</code> 数组，记录当前路径的对应路由数组。</p>
<p>比如我们现在的 hash 地址为 <code>/a/b</code> 那 <code>matched</code> 应该为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> matched = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/A.vue&#x27;</span>),</span><br><span class="line">    <span class="attr">children</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/a/b&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>) &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/a/b&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/B.vue&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>现在我们在 <code>VueRouter</code> 类中实现 <code>matched</code> 方法。通过递归 route 表。收集当前路径的所有 route 数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VueRouter</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">match</span> (routes) &#123;</span><br><span class="line">    routes = routes || <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">routes</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> route <span class="keyword">of</span> routes) &#123;</span><br><span class="line">      <span class="comment">// 如果为根目录，push 一个 route 进去后，直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (route.<span class="property">path</span> === <span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">current</span> === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">matched</span>.<span class="title function_">push</span>(route)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果不为根目录，则判断当前 current 所包含的所有 route，并收集起来</span></span><br><span class="line">      <span class="keyword">if</span> (route.<span class="property">path</span> !== <span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">current</span>.<span class="title function_">indexOf</span>(route.<span class="property">path</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">matched</span>.<span class="title function_">push</span>(route)</span><br><span class="line">        <span class="keyword">if</span> (route.<span class="property">children</span>) <span class="variable language_">this</span>.<span class="title function_">match</span>(route.<span class="property">children</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着我们要改写 <code>route-view</code> 组件。在每个 <code>route-view</code> 组件中添加 <code>routerView</code> 的属性，以此判断是否为 <code>router-view</code> 组件。从当前实例出发，向上循环，计算出当前组件，是在第几层。保存该值到 <code>depth</code> 变量中。然后再根据 <code>matched</code> 表选择对应层数的 <code>route</code> 获取该表的 <code>component</code> 显示即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">VueRouter</span>.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">_Vue</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">render</span> (h) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$vnode</span>.<span class="property">data</span>.<span class="property">routerView</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">      <span class="keyword">let</span> parent = <span class="variable language_">this</span>.<span class="property">$parent</span></span><br><span class="line">      <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">        <span class="keyword">const</span> vnodeData = parent.<span class="property">$vnode</span> &amp;&amp; parent.<span class="property">$vnode</span>.<span class="property">data</span></span><br><span class="line">        <span class="keyword">if</span> (vnodeData &amp;&amp; vnodeData.<span class="property">routerView</span>) &#123;</span><br><span class="line">          depth++</span><br><span class="line">        &#125;</span><br><span class="line">        parent = parent.<span class="property">$parent</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">const</span> route = <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">matched</span>[depth]</span><br><span class="line">      <span class="keyword">if</span> (route) component = route.<span class="property">component</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">h</span>(component)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们可以解开 <code>components/A.vue</code> 中 <code>router-view</code> 中的注释。显示正常~</p>
<h2 id="End-最终效果"><a href="#End-最终效果" class="headerlink" title="End 最终效果"></a>End 最终效果</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab75f71083d94724a73251531cec38d3~tplv-k3u1fbpfcp-zoom-1.image" alt="03"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>简单了解常见http状态码的意思</title>
    <url>/2021/07/06/article/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%E5%B8%B8%E8%A7%81http%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E6%84%8F%E6%80%9D/</url>
    <content><![CDATA[<h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>在日在开发中，前端需要通过后端接口请求数据。在响应中存在标识该资源的状态的状态码。虽然该状态码可以随意修改，但是为了规范化，我们还是需要了解一下常见的状态码意思。</p>
<h4 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h4><ul>
<li>200 成功，表示请求被服务端正确处理</li>
<li>204 No Content，表示请求成功，但响应中不含有主体部分</li>
<li>205 Reset Content，同 204 一样，但是要求请求方重置内容</li>
<li>206 Partial Content，进行范围请求</li>
</ul>
<h4 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h4><ul>
<li>301 moved permanently，永久性重定向，表示资源被分配的新的 URL</li>
<li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li>
<li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li>
<li>304 not modified，表示服务器允许访问资源，但因请求未满足条件</li>
<li>307 temporary redirect，临时重定向，同 302 类似，但期望客户端保持请求方法不变向新的地址发出请求</li>
</ul>
<h4 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h4><ul>
<li>400 bad request，请求报文存在语法错误</li>
<li>401 unauthorized，表示该请求需要 HTTP 认证信息</li>
<li>403 forbidden，表示对请求资源的访问被拒绝</li>
<li>404 not found，表示在服务器没有找到请求的资源</li>
</ul>
<h4 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h4><ul>
<li>500 internal server error，表示服务端在执行请求时发生了错误</li>
<li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</li>
<li>503 service unavailable，表明服务器暂时处于超负荷或正在停机维护，无法处理请求</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>算法入门及简单练习——栈</title>
    <url>/2021/08/25/article/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E5%8F%8A%E7%AE%80%E5%8D%95%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%94%E6%A0%88/</url>
    <content><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>先进后出（后进先出）</p>
<ul>
<li>push 添加一个元素到栈顶</li>
<li>pop 弹出栈顶的元素</li>
<li>top 返回栈顶的元素</li>
<li>isEmpty 判断是否为空</li>
<li>size 返回栈里元素的个数</li>
<li>clear 清空栈</li>
</ul>
<p>使用js的数组实现一个栈</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Stack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> items = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从栈顶添加元素，压栈</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    items.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 弹出</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>() &amp;&amp; items.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈顶元素</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">top</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>() &amp;&amp; items[items.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否为空</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回栈里的大小</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空栈</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">clear</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    items.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断括号是否合法"><a href="#判断括号是否合法" class="headerlink" title="判断括号是否合法"></a>判断括号是否合法</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>遍历字符串，当遇到 <code>(</code> 时，添加一个记号到栈中，表示这是第一对括号的开头。<br>当遇到 <code>)</code> 时，我们从栈中取出一个记号，表示该括号为一组。<br>中途如果遇到 <code>）</code> 无法pop的时候，则表示缺少了 <code>(</code>。直接返回 false。<br>遍历结束后，我们判断栈的长度。如果栈空，则表示所有括号都抵消掉返回 true。如果长度不为 0，则表示其中缺少了 <code>)</code>。返回 false。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;(12)(323)()123(1))&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;()(123123)&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isLegal</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i] === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">      items.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] === <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (items.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">else</span> items.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> items.<span class="title function_">isEmpty</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isLegal</span>(str1), <span class="title function_">isLegal</span>(str2))</span><br></pre></td></tr></table></figure>

<h3 id="计算逆波兰表达式（后缀运算）"><a href="#计算逆波兰表达式（后缀运算）" class="headerlink" title="计算逆波兰表达式（后缀运算）"></a>计算逆波兰表达式（后缀运算）</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>遍历该数组表达式，将所有数字添加到栈中。<br>当遇到运算符时，从栈中取出两个数字进行拼接，使用eval进行计算，并将结果重新压栈。继续循环<br>循环结束后，如果表达式正确会剩下最后一个数值，我们只需要从栈中取出来返回即可</p>
<h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4+13/5</span></span><br><span class="line"><span class="keyword">const</span> exp1 = [<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> exp2 = [<span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-11&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calcExp</span>(<span class="params">exp</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; exp.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = exp[i]</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>].<span class="title function_">indexOf</span>(item) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> value1 = stack.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="keyword">const</span> value2 = stack.<span class="title function_">pop</span>()</span><br><span class="line">      <span class="keyword">const</span> expStr = value2 + item + value1</span><br><span class="line">      stack.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(<span class="built_in">eval</span>(expStr)).<span class="title function_">toString</span>())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> stack.<span class="title function_">pop</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcExp</span>(exp1))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calcExp</span>(exp2))</span><br></pre></td></tr></table></figure>

<h3 id="实现一个有min方法的栈"><a href="#实现一个有min方法的栈" class="headerlink" title="实现一个有min方法的栈"></a>实现一个有min方法的栈</h3><p>实现一个栈，除了常见的push，pop方法以外，提供一个min方法，返回栈里最小值。要求时间复杂度为 O(1)</p>
<h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>定义两个栈，一个正常存数据和操作，下文简称栈。另一个存每次的进栈时的最小值，下文简称min栈。<br>当每次push的时候，将值正常添加到栈中。我们判断min栈中，如果为空或者min栈顶的数据比添加的值大，那么我们进行压栈。此时min栈顶就是此次操作中的最小值。<br>每次pop的时候，栈和min栈正常操作即可。min栈pop一个元素后的栈顶。因为每次push我们都会往min栈中压入该状态的最小值。此时取栈顶的值，依旧是该栈中的最小值。</p>
<h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MinStack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  <span class="keyword">const</span> minStack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">push</span> = <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    stack.<span class="title function_">push</span>(item)</span><br><span class="line">    <span class="keyword">if</span> (minStack.<span class="title function_">isEmpty</span>() || minStack.<span class="title function_">top</span>() &gt; item) &#123;</span><br><span class="line">      minStack.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      minStack.<span class="title function_">push</span>(minStack.<span class="title function_">top</span>())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stack.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    stack.<span class="title function_">pop</span>()</span><br><span class="line">    minStack.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">min</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> minStack.<span class="title function_">top</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> minStack = <span class="keyword">new</span> <span class="title class_">MinStack</span>()</span><br><span class="line"></span><br><span class="line">minStack.<span class="title function_">push</span>(<span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minStack.<span class="title function_">min</span>()) <span class="comment">// 3</span></span><br><span class="line">minStack.<span class="title function_">push</span>(<span class="number">2</span>) <span class="comment">// [3,2]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minStack.<span class="title function_">min</span>()) <span class="comment">// 2</span></span><br><span class="line">minStack.<span class="title function_">push</span>(<span class="number">5</span>) <span class="comment">// [3,2,5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minStack.<span class="title function_">min</span>()) <span class="comment">// 2</span></span><br><span class="line">minStack.<span class="title function_">push</span>(-<span class="number">1</span>) <span class="comment">// [3,2,5,-1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minStack.<span class="title function_">min</span>()) <span class="comment">// -1</span></span><br><span class="line">minStack.<span class="title function_">pop</span>() <span class="comment">// [3,2,5]</span></span><br><span class="line">minStack.<span class="title function_">pop</span>() <span class="comment">// [3,2]</span></span><br><span class="line">minStack.<span class="title function_">pop</span>() <span class="comment">// [3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(minStack.<span class="title function_">min</span>()) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="中序表达式转后缀表达式"><a href="#中序表达式转后缀表达式" class="headerlink" title="中序表达式转后缀表达式"></a>中序表达式转后缀表达式</h3><h4 id="思虑"><a href="#思虑" class="headerlink" title="思虑"></a>思虑</h4><p>定义一个栈和一个 list 数组。<br>循环表达式元素。<br>如果为数字，直接添加到 list 中。<br>如果为左括号，则压栈。<br>如果为右括号，则循环栈元素，并以此弹出栈顶元素到 list 中，直到遇到左括号结束循环。并弹出左括号。<br>如果为运算符，则判断当时的栈是否为空栈。如果空栈，则将运算符直接添加到空栈中。如果不为空栈则循环该栈，将栈顶的运算符优先级大于等于当前运算符的一次弹出，并添加到 list。直到找到优先级小于当前运算符为止。<br>将当前运算符压栈。<br>循环结束后，将栈中剩下的元素，依次弹出栈顶元素并添加到 list 中。<br>并返回 list 结果。</p>
<h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> priorityMap = &#123;</span><br><span class="line">  <span class="string">&#x27;+&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;-&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&#x27;*&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&#x27;/&#x27;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infixExpToPostfixExp</span>(<span class="params">exp</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> list = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; exp.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = exp[i]</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(item)) &#123;</span><br><span class="line">      list.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">      stack.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">while</span> (stack.<span class="title function_">top</span>() !== <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        list.<span class="title function_">push</span>(stack.<span class="title function_">pop</span>())</span><br><span class="line">      &#125;</span><br><span class="line">      stack.<span class="title function_">pop</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (!stack.<span class="title function_">isEmpty</span>() &amp;&amp; [<span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;/&#x27;</span>].<span class="title function_">indexOf</span>(stack.<span class="title function_">top</span>()) !== -<span class="number">1</span> &amp;&amp; priorityMap[stack.<span class="title function_">top</span>()] &gt;= priorityMap[item]) &#123;</span><br><span class="line">        list.<span class="title function_">push</span>(stack.<span class="title function_">pop</span>())</span><br><span class="line">      &#125;</span><br><span class="line">      stack.<span class="title function_">push</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(!stack.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">    list.<span class="title function_">push</span>(stack.<span class="title function_">pop</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test1 = [<span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;3&#x27;</span>] <span class="comment">// 12+3</span></span><br><span class="line"><span class="keyword">const</span> test2 = [<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;2&#x27;</span>] <span class="comment">// 2-3+2</span></span><br><span class="line"><span class="keyword">const</span> test3 = [<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;)&#x27;</span>] <span class="comment">// (1+(4+5+3)-3)+(9+8)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">infixExpToPostfixExp</span>(test1))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">infixExpToPostfixExp</span>(test2))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">infixExpToPostfixExp</span>(test3))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>简单配置VScode及常用快捷键</title>
    <url>/2020/02/12/article/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AEVScode%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h1><p>官网链接：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<h1 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h1><p>无脑下一部就好了<br>中有个步骤需要选择，如果看的懂就自己选，如果看不懂，就全选</p>
<h1 id="配置VScode"><a href="#配置VScode" class="headerlink" title="配置VScode"></a>配置VScode</h1><p>一、汉化<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 Chinese，找到自己需要的语言点击Install安装，安装完重启即可<br><img src="http://obsidian.easyhappy.top/avan/202506291707770.png" alt="image.png"></p>
<p>二、配置</p>
<ol>
<li><p>调整字体<br>文件——首选项——设置，搜索设置输入“字体”<br>在 <code>Font Size</code> 属性修改字体大小<br><img src="http://obsidian.easyhappy.top/avan/202506291707328.png" alt="image.png"></p>
</li>
<li><p>自动保存<br>搜索设置输入“auto save”<br>将 <code>Auto Save</code> 属性的值修改为 <code>onFocusChange</code><br><img src="http://obsidian.easyhappy.top/avan/202506291708891.png" alt="image.png"></p>
</li>
</ol>
<p>3.自动格式化（适合新手，会格式化他人的代码，慎用）<br>搜索设置输入“format on save”<br>勾选 <code>Format On Save</code> 属性的选项<br><img src="http://obsidian.easyhappy.top/avan/202506291708460.png" alt="image.png"></p>
<h1 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h1><h2 id="设置fira-code字体和设置字体连字"><a href="#设置fira-code字体和设置字体连字" class="headerlink" title="设置fira code字体和设置字体连字"></a>设置fira code字体和设置字体连字</h2><ol>
<li>下载字体安装包 <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/26500787/88777d80-a7f1-11e9-95ae-146629eb2946?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20200210/us-east-1/s3/aws4_request&X-Amz-Date=20200210T070105Z&X-Amz-Expires=300&X-Amz-Signature=a6c29f774fc63b8dd76f2e2ab74fa657fe1f160da08d25b6daecc3b98876ec2f&X-Amz-SignedHeaders=host&actor_id=60692794&response-content-disposition=attachment;%20filename=FiraCode_1.207.zip&response-content-type=application/octet-stream">字体github链接</a></li>
<li>解压到电脑，进入 otf 文件夹，<code>Ctrl + A</code>全选，右击安装</li>
</ol>
<p><img src="http://obsidian.easyhappy.top/avan/202506291708422.png" alt="image.png"></p>
<ol start="3">
<li>进入首选项，搜索设置输入“字体”<br>在属性前面输入 “fira font, ” 注意有个逗号，或者直接复制我的</li>
</ol>
<p><code>Fira Code,Consolas, &#39;Courier New&#39;, monospace</code><br>    点击 <code>Font Ligatures</code> 属性下的编辑，进入json文件，在中键位置复制粘贴这行指令</p>
<p><code>&quot;editor.fontLigatures&quot;: true,</code> 然后 <code>Ctrl + S</code> 保存退出<br><img src="http://obsidian.easyhappy.top/avan/202506291710637.png" alt="image.png"></p>
<p><img src="http://obsidian.easyhappy.top/avan/202506291711331.png" alt="image.png"></p>
<h1 id="VScode插件"><a href="#VScode插件" class="headerlink" title="VScode插件"></a>VScode插件</h1><ol>
<li><p>Code Spell Checker（检查有没有拼错单词）<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 “Code Spell Checker”，点击 Install 安装即可<br><img src="http://obsidian.easyhappy.top/avan/202506291711762.png" alt="image.png"></p>
</li>
<li><p>Git Easy（方便git操作）<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 “Git Easy”，点击 Install 安装即可</p>
</li>
</ol>
<h1 id="Vscode简单的快捷键"><a href="#Vscode简单的快捷键" class="headerlink" title="Vscode简单的快捷键"></a>Vscode简单的快捷键</h1><p><code>Ctrl + P</code>  找文件</p>
<p><code>Ctrl + Shift + P</code>  输入命令</p>
<p><code>Alt + 鼠标单击</code>  多位置输入</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>算法入门及简单练习——队列</title>
    <url>/2021/08/27/article/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8%E5%8F%8A%E7%AE%80%E5%8D%95%E7%BB%83%E4%B9%A0%E2%80%94%E2%80%94%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cfce30f574b64d0fb6aeda8448d6e763~tplv-k3u1fbpfcp-zoom-1.image" alt="队列.jpg"></p>
<h3 id="什么是队列"><a href="#什么是队列" class="headerlink" title="什么是队列"></a>什么是队列</h3><p>队列是一种特殊的线性表，只允许在队列的头部删除节点，在末尾添加新的元素。</p>
<blockquote>
<p>在我们现实生活中，超市排队结账就是一个典型的例子。<br>第一个排队的结账后，从队列头部离开。想要结账的需要在队尾进来等待。</p>
</blockquote>
<h3 id="常见的方法"><a href="#常见的方法" class="headerlink" title="常见的方法"></a>常见的方法</h3><ul>
<li>enqueue 从队列尾部添加一个元素（我也结账了，过来排队）</li>
<li>dequeue 从队列头部删除一个元素（我结账好了，离开队伍）</li>
<li>head 返回头部元素（我看看谁排在了最前面）</li>
<li>size 返回队列的大小（有多少个人在排队呢？）</li>
<li>clear 清空队列（11点啦，够钟关门了。全部人离开队伍）</li>
<li>isEmpty 判断队列是否为空（我看看有没有人在排队）</li>
<li>tail 返回队尾元素（我看看现在谁在最后面）</li>
</ul>
<h3 id="实现队列的逻辑"><a href="#实现队列的逻辑" class="headerlink" title="实现队列的逻辑"></a>实现队列的逻辑</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Queue</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> items = []</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">enqueue</span> = <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">    items.<span class="title function_">push</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dequeue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="title function_">shift</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">head</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items[items.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">size</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">clear</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    items.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> items.<span class="property">length</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="简单练习"><a href="#简单练习" class="headerlink" title="简单练习"></a>简单练习</h3><h4 id="1、约瑟夫环"><a href="#1、约瑟夫环" class="headerlink" title="1、约瑟夫环"></a>1、约瑟夫环</h4><h5 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h5><p>一个数组a[100]存放0~99。要求每隔两个数删掉一个数，到末尾时循环值开头继续进行，求最后一个被删掉的数。</p>
<h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>我们分析一下，每隔两个删除一个元素，即删除第三个元素。<br>因为题意循环结束后，需从头再来过。<br>由此我们可以借用队列的形式，将数据全部存到队列中。<br>通过循环该队列，并定义index记录当前的位置。当index为3的倍数的时候，我们删除该元素，否则我们将该元素从新加到队头。以此循环下去，直至队列中只剩下一个元素为止。<br>最后我们返回队头的元素，就是我们最后的结果。</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> test1 = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> test2 = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) test2.<span class="title function_">push</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">delRing</span>(<span class="params">arrList</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arrList.<span class="property">length</span>; i++) queue.<span class="title function_">enqueue</span>(arrList[i])</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (queue.<span class="title function_">size</span>() !== <span class="number">1</span>) &#123;</span><br><span class="line">    index++</span><br><span class="line">    <span class="keyword">const</span> takeItem = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">    <span class="keyword">if</span> (index % <span class="number">3</span> !== <span class="number">0</span>) queue.<span class="title function_">enqueue</span>(takeItem)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue.<span class="title function_">head</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">delRing</span>(test1))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">delRing</span>(test2))</span><br></pre></td></tr></table></figure>

<h4 id="2、斐波那契数列"><a href="#2、斐波那契数列" class="headerlink" title="2、斐波那契数列"></a>2、斐波那契数列</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e6cb38568b14918a43994b12a608889~tplv-k3u1fbpfcp-zoom-1.image" alt="斐波那契数列.jpg"></p>
<h5 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h5><p>该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。求第 n 个时的结果。</p>
<h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>该题有很多总解法，这里为了主题，所以采用队列的方式进行解题。<br>因为我们已知前两个是 0 和 1 开始。<br>我们从2开始进行计算，因为我们知道2是0 + 1 &#x3D; 1。<br>所以我们直接往队列里面添加两个 1，队头表示位置 1 的值，队尾表示位置 2 的值。<br>接着我们根据参数循环，因为我们忽略了 0 和 1 所以循环次数为 n - 2。并且定义 index 用于记录当前循环的次数。<br>每次循环我们取出队头的值，在与队列中剩下的值进行相加，得出下一位的值。再将该值重新添加到队尾。<br>以此循环，直到循环结束后，我们的队列中会有两个值，队尾的值就是我们最终的结果。<br>将队尾的数值返回即可。</p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index &lt; n - <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> delQueue = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">    queue.<span class="title function_">enqueue</span>(delQueue + queue.<span class="title function_">head</span>())</span><br><span class="line">    index++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queue.<span class="title function_">tail</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、用队列实现栈"><a href="#3、用队列实现栈" class="headerlink" title="3、用队列实现栈"></a>3、用队列实现栈</h4><p>通过使用队列实现栈的3个基本操作，push、pop、top。</p>
<h5 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h5><p>我们定义两个队列 queue1 和 queue2，并定义两个变量 dataQueue 和 emptyQueue。<br>定义 initQueue 方法，可以将空队列保存到 emptyQueue 变量中。将存放数据的队列保存到 dataQueue 中。<br>当我们 push、pop、top 的时候都需要执行一遍 initQueue 方法。<br>push 的时候，我们就是往 dataQueue 中添加我们的数据即可。<br>pop 的时候，我们需要有将队尾的元素删除，但是队列只能从队头出去。我们可以先把 dataQueue 中的数据依次 dequeue 并添加到 emptyQueue 中，直到 dataQueue 的 size 为 1 时，就说明到达了队尾。此时我们在 dequeue 这个元素即可。删除后，dataQueue 为空。在下次 initQueue 后，dataQueue 原本的地址将指向 emptyQueue，反之。</p>
<h5 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">QueueStack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue1 = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="keyword">const</span> queue2 = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  <span class="keyword">let</span> dataQueue = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> emptyQueue = <span class="literal">null</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">initQueue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (queue1.<span class="title function_">isEmpty</span>() &amp;&amp; queue2.<span class="title function_">isEmpty</span>() || queue2.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      dataQueue = queue1</span><br><span class="line">      emptyQueue = queue2</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dataQueue = queue2</span><br><span class="line">      emptyQueue = queue1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="title function_">initQueue</span>()</span><br><span class="line">    dataQueue.<span class="title function_">enqueue</span>(item)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pop</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">initQueue</span>()</span><br><span class="line">    <span class="keyword">while</span> (dataQueue.<span class="property">size</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      emptyQueue.<span class="title function_">enqueue</span>(dataQueue.<span class="title function_">dequeue</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataQueue.<span class="title function_">dequeue</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">top</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">initQueue</span>()</span><br><span class="line">    <span class="keyword">return</span> dataQueue.<span class="title function_">tail</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、杨辉三角形"><a href="#4、杨辉三角形" class="headerlink" title="4、杨辉三角形"></a>4、杨辉三角形</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51131bac4e9c4620a08ca79ab57c07dd~tplv-k3u1fbpfcp-zoom-1.image" alt="杨辉三角.jpg"></p>
<h5 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h5><p>我们定义一个队列，用于存放 n - 1 行的元素，以及第 n 行的元素。<br>例如现在循环到第二行，我们队列中应该有 [1, 1, 1]。<br>再循环的时候，我们观察可得，每一行的个数等于其行数。<br>所以这里我们可以通过 for 语句控制输出结果个数为当前循环的行数，只输出 n -1 行的数据。剩下当前 n 行的数据保留，用于下次计算。<br>每次只输出上一行的数据。<br>但是因为我们每一行计算，最后一个元素是漏了的，所以我们直接在末尾添加一个 1 即可。</p>
<h5 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printYangHui</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> output = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">let</span> preValue = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> cur = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">      output += cur + <span class="string">&quot; &quot;</span></span><br><span class="line">      <span class="keyword">const</span> next = cur + preValue</span><br><span class="line">      preValue = cur</span><br><span class="line">      queue.<span class="title function_">enqueue</span>(next)</span><br><span class="line">    &#125;</span><br><span class="line">    queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种实现方式基本一样，可以通过标记进行区分。遇到 0 的时候则终止输出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printYangHui</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">  queue.<span class="title function_">enqueue</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> output = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> preValue = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cur = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">      <span class="keyword">if</span> (cur === <span class="number">0</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(<span class="number">1</span>)</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        output += cur + <span class="string">&quot; &quot;</span></span><br><span class="line">        queue.<span class="title function_">enqueue</span>(cur + preValue)</span><br><span class="line">        preValue = cur</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(output)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟DOM 和 DOM diff</title>
    <url>/2020/09/13/article/%E8%99%9A%E6%8B%9FDOM%20%E5%92%8C%20DOM%20diff/</url>
    <content><![CDATA[<h2 id="一、什么是虚拟DOM"><a href="#一、什么是虚拟DOM" class="headerlink" title="一、什么是虚拟DOM"></a>一、什么是虚拟DOM</h2><p>一个能表示DOM树的对象，通常含有标签名、标签上的属性、事件监听和子元素们，以及其他属性</p>
<h2 id="二、虚拟DOM有什么优点"><a href="#二、虚拟DOM有什么优点" class="headerlink" title="二、虚拟DOM有什么优点"></a>二、虚拟DOM有什么优点</h2><h3 id="1-减少DOM操作"><a href="#1-减少DOM操作" class="headerlink" title="1. 减少DOM操作"></a>1. 减少DOM操作</h3><ul>
<li>虚拟DOM可以将多次操作合并为一次操作。</li>
<li>虚拟DOM借助DOM diff 可以将多余的操作省略</li>
</ul>
<h3 id="2-跨平台"><a href="#2-跨平台" class="headerlink" title="2. 跨平台"></a>2. 跨平台</h3><ul>
<li>虚拟DOM不仅可以变成DOM，还可以变成小程序、iOS应用，因为虚拟DOM本质是JS对象</li>
</ul>
<h2 id="三、虚拟DOM有什么缺点"><a href="#三、虚拟DOM有什么缺点" class="headerlink" title="三、虚拟DOM有什么缺点"></a>三、虚拟DOM有什么缺点</h2><p>需要额外的创建函数，如createElement 或 h，但可以通过 JSX 来简化成 XML 语法</p>
<h2 id="四、虚拟DOM是什么样子"><a href="#四、虚拟DOM是什么样子" class="headerlink" title="四、虚拟DOM是什么样子"></a>四、虚拟DOM是什么样子</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">type</span>: <span class="string">&#x27;span&#x27;</span>, ...&#125;,</span><br><span class="line">      &#123;<span class="attr">type</span>: <span class="string">&#x27;span&#x27;</span>, ...&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">onClick</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ref</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">on</span>: &#123;</span><br><span class="line">      <span class="attr">click</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;<span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ...&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ...&#125;</span><br><span class="line">  ],</span><br><span class="line">  ... </span><br></pre></td></tr></table></figure>

<h2 id="五、如何创建虚拟DOM"><a href="#五、如何创建虚拟DOM" class="headerlink" title="五、如何创建虚拟DOM"></a>五、如何创建虚拟DOM</h2><h3 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">className</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">onClick</span>: <span class="function">()=&gt;</span>&#123;&#125;, [</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span1&#x27;</span>),</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span2&#x27;</span>)</span><br><span class="line">]&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [<span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span1&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span2&#x27;</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;red&quot;</span> onClick=<span class="string">&quot;&#123;fn&#125;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-Template"><a href="#Vue-Template" class="headerlink" title="Vue Template"></a>Vue Template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;red&quot; @click=&quot;fn&quot;&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="六、什么是DOM-diff"><a href="#六、什么是DOM-diff" class="headerlink" title="六、什么是DOM diff"></a>六、什么是DOM diff</h2><p>DOM diff其实就是一个函数，它会对比 oldNode 与 newNode 的区别。从而减少不必要的渲染。但是DOM diff会有bug。造成页面渲染的误操作，可以使用key来辅助diff的对比。从而消除bug。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>vue</tag>
        <tag>vdom</tag>
        <tag>dom-diff</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域CORS、JSONP、服务器中转</title>
    <url>/2020/06/11/article/%E8%B7%A8%E5%9F%9FCORS%E3%80%81JSONP%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E8%BD%AC/</url>
    <content><![CDATA[<h2 id="1、同源策略"><a href="#1、同源策略" class="headerlink" title="1、同源策略"></a>1、同源策略</h2><p>当两个服务器的 源 不完全相同的时候，无法获取另一个的数据。不同的页面，无法相互访问数据。</p>
<h3 id="1-1-获取网站的源"><a href="#1-1-获取网站的源" class="headerlink" title="1.1 获取网站的源"></a>1.1 获取网站的源</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">origin</span></span><br><span class="line">或</span><br><span class="line">location.<span class="property">origin</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-判断源是否相同"><a href="#1-2-判断源是否相同" class="headerlink" title="1.2 判断源是否相同"></a>1.2 判断源是否相同</h3><p>源 &#x3D; 协议 + 域名 + 端口号</p>
<blockquote>
<p>当协议、域名、端口号（完全一致）才是同源，否者都为不同源</p>
<p><a href="http://baidu.com/">http://baidu.com</a> 与 <a href="http://www.baidu.com/">http://www.baidu.com</a> 不同源</p>
<p><a href="http://baidu.com/">http://baidu.com</a> 与 <a href="http://qq.com/">http://qq.com</a> 不同源</p>
</blockquote>
<h2 id="2、跨域"><a href="#2、跨域" class="headerlink" title="2、跨域"></a>2、跨域</h2><p>为了解决同源策略无法相互访问数据</p>
<p>其中两种跨域的方法：CORS、JSONP</p>
<h3 id="2-1-CORS"><a href="#2-1-CORS" class="headerlink" title="2.1 CORS"></a>2.1 CORS</h3><p>在后端设置响应头，提前声明允许谁获取数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;允许的源地址，例如（http://baidu.com）&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优点：操作简单</p>
<p>缺点：不兼容IE 6 7 8 9</p>
</blockquote>
<h3 id="2-2-JSONP"><a href="#2-2-JSONP" class="headerlink" title="2.2 JSONP"></a>2.2 JSONP</h3><p>将数据写入到JS文件中，利用引用JS文件，将数据保存到window上。最后再利用window来获取JS保存的数据。</p>
<blockquote>
<p>优点：兼容IE、可以跨域</p>
<p>缺点：因为是通过js的script获取的，所以他不支持post，只可以发get请求。以及没有AJAX那样获取精确的状态码等数据。</p>
</blockquote>
<h3 id="2-3-服务器中转"><a href="#2-3-服务器中转" class="headerlink" title="2.3 服务器中转"></a>2.3 服务器中转</h3><p>使用自己的服务器作为中转站，将需要请求的地址，发送给服务端。服务端不存在跨域问题，可以直接请求数据。返回给我们自己。</p>
<p>中转服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (urlObj.<span class="property">pathname</span> === <span class="string">&#x27;/bridge&#x27;</span>) &#123;</span><br><span class="line">    http.<span class="title function_">get</span>(urlObj.<span class="property">query</span>.<span class="property">url</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> text += data)</span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>(text)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>



<p>浏览器正常请求即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:8080/bridge?url=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br></pre></td></tr></table></figure>



<h2 id="3、JSONP封装"><a href="#3、JSONP封装" class="headerlink" title="3、JSONP封装"></a>3、JSONP封装</h2><h3 id="3-1-方案1"><a href="#3-1-方案1" class="headerlink" title="3.1 方案1"></a>3.1 方案1</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> random = <span class="string">&#x27;JSONCallbackName&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">        <span class="variable language_">window</span>[random] = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;random&#125;</span>`</span></span><br><span class="line">        script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            script.<span class="title function_">remove</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&#x27;访问数据的文件地址&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="3-2-方案2"><a href="#3-2-方案2" class="headerlink" title="3.2 方案2"></a>3.2 方案2</h3><p>服务端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (urlObj.<span class="property">pathname</span> === <span class="string">&#x27;/getWeather&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123; <span class="attr">city</span>: <span class="string">&#x27;guangzhou&#x27;</span>, <span class="attr">weather</span>: <span class="string">&#x27;sunny&#x27;</span> &#125;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;urlObj.query.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>



<p>客户端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__jsonp__</span> = <span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">resolve</span>(data)</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> query = <span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;a[<span class="number">0</span>]&#125;</span>=<span class="subst">$&#123;a[<span class="number">1</span>]&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = url + <span class="string">&#x27;?callback=__jsonp__&amp;&#x27;</span> + query</span><br><span class="line">    script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;加载失败&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&#x27;http://api.layouwen.com/getWeather.php&#x27;</span>, &#123; <span class="attr">city</span>: <span class="string">&#x27;广州&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>通过JBTools设置命令行启动IDE</title>
    <url>/2022/02/14/article/%E9%80%9A%E8%BF%87JBTools%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8IDE/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>想通过类似vscode一样，可以通过在命令行输入 <code>code 目录</code> 直接启动 vscode 到对应目录。</p>
<p>想实现这个问题，只需要把对应的ide的快捷启动放置 <code>/usr/local/bin</code> 目录下。那么你在终端中可以直接识别到该执行程序。</p>
<h2 id="设置终端启动"><a href="#设置终端启动" class="headerlink" title="设置终端启动"></a>设置终端启动</h2><ol>
<li>打开 tools，点击设置</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc915a179fff42f4956c4a45b508f85a~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<ol start="2">
<li>开启生成脚本，并指定生成目录</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88c9d48535e0430a845e07603511a822~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<blockquote>
<p>如果你是 windows 可以生成后，先去环境变量确认是否已经自动添加了。确认后但还是没生效，只需要重启一下就可以了</p>
</blockquote>
<ol start="3">
<li>现在就可以在命令行进行使用</li>
</ol>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af871f486a114393bfe66b5f39d30980~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>工具</category>
        <category>jetbrain</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>工具</tag>
        <tag>jetbrain</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Docker提示unsupported console settings, you just need to disable the legacy</title>
    <url>/2022/06/29/article/%E8%A7%A3%E5%86%B3Docker%E6%8F%90%E7%A4%BAunsupported%20console%20settings,%20you%20just%20need%20to%20disable%20the%20legacy/</url>
    <content><![CDATA[<p>第一步：<code>Win + R</code> 调出窗口</p>
<p>第二步：输入 <code>cmd</code> 回车，打开命令行</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69c3b01aaeee41b489ae207df80a5506~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p>
<p>第三步：在菜单栏右键点击 <code>Properties</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92b3ca09b5864254b0bed6d7e7711dfe~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p>
<p>第四步：取消 <code>Use legacy console（requires relaunch. affects all consoles）</code></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c33e5f97c3394618bb64e3b2b362fe6c~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p>
<p>第五步：重启计算机，重新打开docker即可</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>速览JavaScript字符串、数组、对象、MathAPI</title>
    <url>/2021/03/28/article/%E9%80%9F%E8%A7%88JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E3%80%81%E5%AF%B9%E8%B1%A1%E3%80%81MathAPI/</url>
    <content><![CDATA[<h2 id="1、字符串"><a href="#1、字符串" class="headerlink" title="1、字符串"></a>1、字符串</h2><h3 id="1-1-获取字符串的对应下标数值"><a href="#1-1-获取字符串的对应下标数值" class="headerlink" title="1.1 获取字符串的对应下标数值"></a>1.1 获取字符串的对应下标数值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;abc123ABC&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">1</span>])  <span class="comment">// 输出结果为：b</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">chatAt</span>(<span class="number">1</span>))  <span class="comment">// 输出结果为：b</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-获取字符串的长度"><a href="#1-2-获取字符串的长度" class="headerlink" title="1.2 获取字符串的长度"></a>1.2 获取字符串的长度</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)  <span class="comment">// 长度为：6</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-获取字符串的Unicode的编码"><a href="#1-3-获取字符串的Unicode的编码" class="headerlink" title="1.3 获取字符串的Unicode的编码"></a>1.3 获取字符串的Unicode的编码</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">0</span>))  <span class="comment">// unicode编码为：20013</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果不指定下标，默认获取0</p>
</blockquote>
<h3 id="1-4-Unicode的编码转字符串"><a href="#1-4-Unicode的编码转字符串" class="headerlink" title="1.4 Unicode的编码转字符串"></a>1.4 Unicode的编码转字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">25105</span>, <span class="number">29233</span>, <span class="number">20320</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(arr[<span class="number">0</span>], arr[<span class="number">1</span>], arr[<span class="number">2</span>]))  <span class="comment">// 输出结果为：我爱你</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-查找是否有对应字符串"><a href="#1-5-查找是否有对应字符串" class="headerlink" title="1.5 查找是否有对应字符串"></a>1.5 查找是否有对应字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;layouwen = layouwen&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;l&#x27;</span>))  <span class="comment">// 找到返回下标 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">4</span>)  <span class="comment">// 从下标 4 开始查找 返回下标 11</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;s&#x27;</span>))  <span class="comment">// 找不到返回 -1</span></span><br></pre></td></tr></table></figure>

<h3 id="1-6-从后往前查找最后一个索引"><a href="#1-6-从后往前查找最后一个索引" class="headerlink" title="1.6 从后往前查找最后一个索引"></a>1.6 从后往前查找最后一个索引</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello word&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>))  <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">8</span>))  <span class="comment">// 7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>))  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-7-截取字符串"><a href="#1-7-截取字符串" class="headerlink" title="1.7 截取字符串"></a>1.7 截取字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;12345678&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">1</span>))  <span class="comment">// 从下标 0 开始，截取到倒数第一个字符串 之前 </span></span><br><span class="line"><span class="comment">// 1234567</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">subString</span>(<span class="number">1</span>, str.<span class="property">length</span> - <span class="number">1</span>))  <span class="comment">// 234567</span></span><br></pre></td></tr></table></figure>

<h3 id="1-8-分割字符串为数组"><a href="#1-8-分割字符串为数组" class="headerlink" title="1.8 分割字符串为数组"></a>1.8 分割字符串为数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;la-you-wen&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>())  <span class="comment">// [&#x27;la-you-wen&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>))  <span class="comment">// [&#x27;la&#x27;, &#x27;you&#x27;, &#x27;wen&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>) <span class="comment">// 只分割一个 [&#x27;la&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="1-9-连接字符串"><a href="#1-9-连接字符串" class="headerlink" title="1.9 连接字符串"></a>1.9 连接字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;la&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;you&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str3 = <span class="string">&#x27;wen&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">concat</span>(str2, str3))  <span class="comment">// layouwen</span></span><br></pre></td></tr></table></figure>

<h3 id="1-10-大小写转换"><a href="#1-10-大小写转换" class="headerlink" title="1.10 大小写转换"></a>1.10 大小写转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&#x27;DEF&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">toUpperCase</span>())  <span class="comment">// ABC</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2.<span class="title function_">toLowerCase</span>())  <span class="comment">// def</span></span><br></pre></td></tr></table></figure>

<h3 id="1-11-去除首位空格"><a href="#1-11-去除首位空格" class="headerlink" title="1.11 去除首位空格"></a>1.11 去除首位空格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;    123    4     &#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trim</span>())  <span class="comment">// 123    4</span></span><br></pre></td></tr></table></figure>

<h2 id="2、数组"><a href="#2、数组" class="headerlink" title="2、数组"></a>2、数组</h2><h3 id="2-1-末尾添加"><a href="#2-1-末尾添加" class="headerlink" title="2.1 末尾添加"></a>2.1 末尾添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">push</span>(<span class="number">4</span>, <span class="number">5</span>))  <span class="comment">// 返回添加后数组的长度 结果为：5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-末尾删除"><a href="#2-2-末尾删除" class="headerlink" title="2.2 末尾删除"></a>2.2 末尾删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">pop</span>())  <span class="comment">// 返回删除的值 结果为：2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [4, 6]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-开头添加"><a href="#2-3-开头添加" class="headerlink" title="2.3 开头添加"></a>2.3 开头添加</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">unshift</span>(<span class="number">1</span>))  <span class="comment">// 返回添加后数组长度 结果为：4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [1, 4, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-4-开头删除"><a href="#2-4-开头删除" class="headerlink" title="2.4 开头删除"></a>2.4 开头删除</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>())  <span class="comment">// 返回删除的值 结果为：7</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [5, 2]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5-添加、删除、替换"><a href="#2-5-添加、删除、替换" class="headerlink" title="2.5 添加、删除、替换"></a>2.5 添加、删除、替换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">arr1.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)  <span class="comment">// [1, 4, 5, 6, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>))  <span class="comment">// 从下标 1 开始，删除 2 个，并返回删除的内容 结果为：[2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)  <span class="comment">// [1]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>))  <span class="comment">// 从下标 1 开始，删除 3 个，然后添加 a b c 结果为： [2, 3, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)  <span class="comment">// [1, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-6-排序"><a href="#2-6-排序" class="headerlink" title="2.6 排序"></a>2.6 排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>)=&gt;</span>a-b)  <span class="comment">// a - b 升序  b - a 是降序</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure>

<h3 id="2-7-数组拼接"><a href="#2-7-数组拼接" class="headerlink" title="2.7 数组拼接"></a>2.7 数组拼接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2, arr3))  <span class="comment">// 返回拼接后的数组</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, &quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)  <span class="comment">//  [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-8-数组转字符串"><a href="#2-8-数组转字符串" class="headerlink" title="2.8 数组转字符串"></a>2.8 数组转字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;word&#x27;</span>, <span class="string">&#x27;你好&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>))  <span class="comment">// 返回拼接后的字符串</span></span><br><span class="line"><span class="comment">// hello,word,你好</span></span><br></pre></td></tr></table></figure>

<h3 id="2-9-数组反转"><a href="#2-9-数组反转" class="headerlink" title="2.9 数组反转"></a>2.9 数组反转</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reverse</span>())  <span class="comment">// 返回颠倒后的数组</span></span><br><span class="line"><span class="comment">// [0, 4, 5, 6, 7, 3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// 原数组也会被改变 [0, 4, 5, 6, 7, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-10-从前往后查找数组时候存在值"><a href="#2-10-从前往后查找数组时候存在值" class="headerlink" title="2.10 从前往后查找数组时候存在值"></a>2.10 从前往后查找数组时候存在值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">3</span>))  <span class="comment">// 从下标 3 开始查找</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, -<span class="number">1</span>))  <span class="comment">// 从倒数第 1 个开始找</span></span><br><span class="line"><span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<h3 id="2-11-从后往前查找数组时候存在值"><a href="#2-11-从后往前查找数组时候存在值" class="headerlink" title="2.11 从后往前查找数组时候存在值"></a>2.11 从后往前查找数组时候存在值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>))  <span class="comment">// 从下标 2 开始向左查找</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;a&#x27;</span>, -<span class="number">1</span>))  <span class="comment">// 从倒数第 1 个开始向左找</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="2-12-数组切割"><a href="#2-12-数组切割" class="headerlink" title="2.12 数组切割"></a>2.12 数组切割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>))  <span class="comment">// [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(-<span class="number">3</span>, <span class="number">1</span>))  <span class="comment">// []</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">slice</span>(-<span class="number">3</span>, -<span class="number">1</span>))  <span class="comment">// [&#x27;c&#x27;, &#x27;a&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;a&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-13-遍历数组"><a href="#2-13-遍历数组" class="headerlink" title="2.13 遍历数组"></a>2.13 遍历数组</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demoArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> thisArr = [<span class="string">&#x27;我是改变this&#x27;</span>, <span class="string">&#x27;的数组&#x27;</span>]</span><br><span class="line">demoArr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value, index, arr</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;,thisArr)  <span class="comment">// 改变回调中的 this 指向</span></span><br><span class="line">demoArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index, arr</span>)=&gt;</span>&#123;  <span class="comment">// 箭头函数因为本身没有 this 所以第二个参数无效</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-14-数组过滤"><a href="#2-14-数组过滤" class="headerlink" title="2.14 数组过滤"></a>2.14 数组过滤</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demoArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> thisArr = [<span class="string">&#x27;我是改变this&#x27;</span>, <span class="string">&#x27;的数组&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr1 = demoArr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">value, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> value !== <span class="string">&#x27;c&#x27;</span> <span class="comment">// 将所有为 true 的结果返回出去</span></span><br><span class="line">&#125;, thisArr) <span class="comment">// 改变回调中的 this 指向</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是新数组：&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr1)  <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;a&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是原数组：&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demoArr)  <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;]</span></span><br><span class="line"><span class="keyword">const</span> newArr2 = demoArr.<span class="title function_">filter</span>(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 箭头函数因为本身没有 this 所以第二个参数无效</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">  <span class="keyword">return</span> value === <span class="string">&#x27;c&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2)  <span class="comment">// [&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-15-数组加工"><a href="#2-15-数组加工" class="headerlink" title="2.15 数组加工"></a>2.15 数组加工</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demoArr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> thisArr = [<span class="string">&#x27;我是改变this&#x27;</span>, <span class="string">&#x27;的数组&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> newArr = demoArr.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, arr)</span><br><span class="line">  <span class="keyword">return</span> (item += <span class="string">&#x27;嗯？&#x27;</span>) <span class="comment">// 将结果添加到新的数组中，返回出去</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr) <span class="comment">// [&quot;a嗯？&quot;, &quot;b嗯？&quot;, &quot;c嗯？&quot;, &quot;a嗯？&quot;, &quot;d嗯？&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(demoArr) <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;a&quot;, &quot;d&quot;]</span></span><br><span class="line">demoArr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// [&#x27;我是改变this&#x27;, &#x27;的数组&#x27;]</span></span><br><span class="line">&#125;, thisArr)</span><br></pre></td></tr></table></figure>

<h3 id="2-16-数据集合加工"><a href="#2-16-数据集合加工" class="headerlink" title="2.16 数据集合加工"></a>2.16 数据集合加工</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> demoArr = [<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">const</span> result = demoArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum, value, index</span>) =&gt;</span> &#123; <span class="comment">// sum 上一次的结果</span></span><br><span class="line">  <span class="keyword">return</span> sum + value</span><br><span class="line">&#125;, <span class="number">1000</span>) <span class="comment">// 初始值，如果不传默认为数组第一位</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// 1040</span></span><br></pre></td></tr></table></figure>

<h3 id="2-17-某一个为真返回真"><a href="#2-17-某一个为真返回真" class="headerlink" title="2.17 某一个为真返回真"></a>2.17 某一个为真返回真</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> falsyArr1 = [<span class="literal">false</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> falsyArr2 = [<span class="literal">false</span>, <span class="literal">undefined</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> status1 = falsyArr1.<span class="title function_">some</span>(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">  <span class="keyword">return</span> value <span class="comment">// 只要有一个为 真值 则返回 true，否则返回 false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> status2 = falsyArr2.<span class="title function_">some</span>(<span class="function"><span class="params">value</span> =&gt;</span> value)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status1, status2) <span class="comment">// true false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-18-所有为真才返回真"><a href="#2-18-所有为真才返回真" class="headerlink" title="2.18 所有为真才返回真"></a>2.18 所有为真才返回真</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> falsyArr1 = [<span class="number">1</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> falsyArr2 = [<span class="string">&#x27;a&#x27;</span>, <span class="literal">true</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">const</span> status1 = falsyArr1.<span class="title function_">every</span>(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value, index, arr)</span><br><span class="line">  <span class="keyword">return</span> value <span class="comment">// 全部都为 真值 则返回 true，否则返回 false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> status2 = falsyArr2.<span class="title function_">every</span>(<span class="function"><span class="params">value</span> =&gt;</span> value)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(status1, status2) <span class="comment">// false true</span></span><br></pre></td></tr></table></figure>

<h2 id="3、对象"><a href="#3、对象" class="headerlink" title="3、对象"></a>3、对象</h2><h3 id="3-1-获取所有key值"><a href="#3-1-获取所有key值" class="headerlink" title="3.1 获取所有key值"></a>3.1 获取所有key值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) <span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-获取所有value值"><a href="#3-2-获取所有value值" class="headerlink" title="3.2 获取所有value值"></a>3.2 获取所有value值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(obj)) <span class="comment">// [&quot;layouwen&quot;, &quot;21&quot;]</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-删除某一项键值对"><a href="#3-3-删除某一项键值对" class="headerlink" title="3.3 删除某一项键值对"></a>3.3 删除某一项键值对</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;21&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">age</span> <span class="comment">// 连带键值对删除</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123;name: &quot;layouwen&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、JSON"><a href="#4、JSON" class="headerlink" title="4、JSON"></a>4、JSON</h2><h3 id="4-1-转JSON"><a href="#4-1-转JSON" class="headerlink" title="4.1 转JSON"></a>4.1 转JSON</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;layouwen&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)) <span class="comment">// &#123;&quot;name&quot;:&quot;layouwen&quot;,&quot;age&quot;:21&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-转实例"><a href="#4-2-转实例" class="headerlink" title="4.2 转实例"></a>4.2 转实例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> objJSON = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;yqq&quot;, &quot;age&quot;: 30&#125;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(objJSON)) <span class="comment">// &#123;name: &quot;yqq&quot;, age: 30&#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>字符串中的 key 必须用 双引号</p>
</blockquote>
<h2 id="5、Math"><a href="#5、Math" class="headerlink" title="5、Math"></a>5、Math</h2><h3 id="5-1-圆周率"><a href="#5-1-圆周率" class="headerlink" title="5.1 圆周率"></a>5.1 圆周率</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="property">PI</span>) <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-取整"><a href="#5-2-取整" class="headerlink" title="5.2 取整"></a>5.2 取整</h3><h4 id="5-2-1-向上取整"><a href="#5-2-1-向上取整" class="headerlink" title="5.2.1 向上取整"></a>5.2.1 向上取整</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.3</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-2-向下取整"><a href="#5-2-2-向下取整" class="headerlink" title="5.2.2 向下取整"></a>5.2.2 向下取整</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.3</span>)) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h4 id="5-2-3-四舍五入"><a href="#5-2-3-四舍五入" class="headerlink" title="5.2.3 四舍五入"></a>5.2.3 四舍五入</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.4</span>)) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.5</span>)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-随机数"><a href="#5-3-随机数" class="headerlink" title="5.3 随机数"></a>5.3 随机数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()) <span class="comment">// 随机 0 - 1 之间的数字</span></span><br></pre></td></tr></table></figure>

<h3 id="5-4-最大值"><a href="#5-4-最大值" class="headerlink" title="5.4 最大值"></a>5.4 最大值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">5</span>, -<span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>)) <span class="comment">// 9</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(...arr)) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5-最小值"><a href="#5-5-最小值" class="headerlink" title="5.5 最小值"></a>5.5 最小值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">5</span>, -<span class="number">1</span>, <span class="number">9</span>, <span class="number">4</span>)) <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(...arr)) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6-绝对值"><a href="#5-6-绝对值" class="headerlink" title="5.6 绝对值"></a>5.6 绝对值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">10</span>))</span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>计数排序过程分析</title>
    <url>/2021/08/13/article/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="浅析过程"><a href="#浅析过程" class="headerlink" title="浅析过程"></a>浅析过程</h2><p>计数排序的原理是通过统计给定数组中，每个值出现的次数，最后通过统计后对应值出现的次数，从小到大返回一个新的数组。</p>
<h2 id="代码实现思路"><a href="#代码实现思路" class="headerlink" title="代码实现思路"></a>代码实现思路</h2><ol>
<li>需要先计算出最大值及最小值获得该数组的区间，并通过大减小计算该数组最大可能长度，因为数组下标是从0开始，所以需要得出结果后加1。</li>
<li>定义一个空数组，用于统计出现次数。循环给定数值，通过 <code>值 - 偏移量 = 下标</code> 的公式，对空数组对应下标进行统计次数。</li>
<li>定义一个新数组用于保存排序后的结果。接着循环用于统计的数组，通过判断次数，并通过公式反推 <code>下标 + 偏移量 = 值</code> 将值添加到数组中。最终返回结果。</li>
</ol>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">countSort</span> = (<span class="params">arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> max = min = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max) max = arr[i]</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; min) min = arr[i]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> helper = <span class="keyword">new</span> <span class="title class_">Array</span>(max - min + <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> countValue = helper[arr[i] - min]</span><br><span class="line">    helper[arr[i] - min] = countValue ? countValue + <span class="number">1</span> : <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; helper.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(helper[i])&#123;</span><br><span class="line">      result.<span class="title function_">push</span>(i + min)</span><br><span class="line">      helper[i] -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e0291c97e9ff4b329575c92972b4bc1f~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<p>画的有点丑，以上均是个人理解。如果有哪些不对的地方欢迎指出~</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>算法</tag>
        <tag>计数排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令行快捷键</title>
    <url>/2023/01/23/summary/Linux%E7%B3%BB%E7%BB%9F/Linux%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Ctrl L —— 清屏  </p>
<p>Ctrl M —— 等于回车  </p>
<p>Ctrl C —— 中断执行程序  </p>
<p>Ctrl P —— 上一条命令  </p>
<p>Ctrl N —— 下一条命令  </p>
<p>Ctrl R —— 根据字符串找历史命令</p>
<p>Ctrl A —— 移动到首行</p>
<p>Ctrl E —— 移动到末尾</p>
<p>Ctrl B —— 光标后退</p>
<p>Ctrl F —— 光标前进</p>
<p>Alt F —— 前进一个单词</p>
<p>Alt B —— 后退一个单词</p>
<p>Ctrl H —— 删除前一个单词</p>
<p>Ctrl D —— 删除当前光标的字符串</p>
<p>Ctrl K —— 删除光标后的所有字符</p>
<p>Ctrl U —— 清空当前输入的字符串</p>
<p>Ctrl W —— 删除光标前的单词</p>
<p>Ctrl Y —— 粘贴删除的内容</p>
<p>Ctrl X Ctrl E —— 用默认编辑器编辑命令，保存则执行</p>
<p>Ctrl Z —— 放到后台执行</p>
<p>Shift Insert —— 粘贴</p>
<p>Ctrl PackUp —— 向上翻页</p>
<p>Ctrl PageDown —— 向下翻页</p>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 系统装机配置指北</title>
    <url>/2024/12/11/summary/Mac%E7%B3%BB%E7%BB%9F/Mac%E7%B3%BB%E7%BB%9F%E8%A3%85%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>允许任何来源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> spctl --master-disable</span><br></pre></td></tr></table></figure>

<p><a href="https://www.efcloud.cc/">下载梯子</a></p>
<p>终端配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>复制 .zshrc 文件</p>
<p><a href="https://github.com/Layouwen/config-backup/blob/master/mac/.zshrc">https://github.com/Layouwen/config-backup/blob/master/mac/.zshrc</a></p>
<blockquote>
<p>用户名和一些文件路径需要替换一下</p>
</blockquote>
<p>spaceship 主题需要执行下面的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/spaceship-prompt/spaceship-prompt.git <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt&quot;</span> --depth=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship-prompt/spaceship.zsh-theme&quot;</span> <span class="string">&quot;<span class="variable">$ZSH_CUSTOM</span>/themes/spaceship.zsh-theme&quot;</span></span><br></pre></td></tr></table></figure>

<p>安装 bun</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://bun.sh/install | bash</span><br></pre></td></tr></table></figure>

<p>下载 brew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果需要使用清华国内源，先设置环境变量，在 <code>brew update</code></p>
<p>设置按键时长</p>
<p><img src="http://obsidian.easyhappy.top/avan/20230301005456.png"></p>
<p>设置三脂拖拽</p>
<p><img src="http://obsidian.easyhappy.top/obsidian/20230617133802.png"></p>
<p>开启轻点触发</p>
<p><img src="http://obsidian.easyhappy.top/obsidian/20230617133842.png"></p>
<p>设置 F1-F12 为默认键</p>
<p><img src="http://obsidian.easyhappy.top/obsidian/20230617204437.png"></p>
<p>设置显示秒</p>
<p><img src="http://obsidian.easyhappy.top/obsidian/20230618082251.png"></p>
<h2 id="无法按住持续连按"><a href="#无法按住持续连按" class="headerlink" title="无法按住持续连按"></a>无法按住持续连按</h2><h3 id="关闭-ApplePressAndHoldEnabled"><a href="#关闭-ApplePressAndHoldEnabled" class="headerlink" title="关闭 ApplePressAndHoldEnabled"></a>关闭 ApplePressAndHoldEnabled</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">defaults write com.jetbrains.WebStorm ApplePressAndHoldEnabled -bool <span class="literal">false</span> <span class="comment"># webstorm</span></span><br><span class="line">defaults write com.jetbrains.intellij ApplePressAndHoldEnabled -bool <span class="literal">false</span> <span class="comment"># idea</span></span><br><span class="line">defaults write com.runningwithcrayons.Alfred ApplePressAndHoldEnabled -bool <span class="literal">false</span> <span class="comment"># Alfred</span></span><br><span class="line"></span><br><span class="line">defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool <span class="literal">false</span>              <span class="comment"># For VS Code</span></span><br><span class="line">defaults write com.microsoft.VSCodeInsiders ApplePressAndHoldEnabled -bool <span class="literal">false</span>      <span class="comment"># For VS Code Insider</span></span><br><span class="line">defaults write com.visualstudio.code.oss ApplePressAndHoldEnabled -bool <span class="literal">false</span>         <span class="comment"># For VS Codium</span></span><br><span class="line">defaults write com.microsoft.VSCodeExploration ApplePressAndHoldEnabled -bool <span class="literal">false</span>   <span class="comment"># For VS Codium Exploration users</span></span><br><span class="line"></span><br><span class="line">defaults write -g ApplePressAndHoldEnabled -bool <span class="literal">false</span> <span class="comment"># 全局设置</span></span><br><span class="line"></span><br><span class="line">defaults delete -g ApplePressAndHoldEnabled                                           <span class="comment"># If necessary, reset global default</span></span><br></pre></td></tr></table></figure>

<h1 id="brew相关"><a href="#brew相关" class="headerlink" title="brew相关"></a>brew相关</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install \</span><br><span class="line">cowsay \</span><br><span class="line">zplug \</span><br><span class="line">trash \</span><br><span class="line">neofetch \</span><br><span class="line">scc \</span><br><span class="line">duf \</span><br><span class="line">diff-so-fancy \</span><br><span class="line">lolcat \</span><br><span class="line">fzf \</span><br><span class="line">figlet \</span><br><span class="line">tmux \</span><br><span class="line">graphicsmagick \</span><br><span class="line">cmatrix \</span><br><span class="line">ctop</span><br><span class="line"></span><br><span class="line"><span class="comment"># ripgrep \</span></span><br><span class="line"><span class="comment"># bat \</span></span><br><span class="line"><span class="comment"># tldr \</span></span><br><span class="line"><span class="comment"># thefuck \</span></span><br><span class="line"><span class="comment"># nvm \</span></span><br></pre></td></tr></table></figure>

<ul>
<li>scc 更好的统计代码量</li>
<li>duf 更好的 diff</li>
<li>diff-so-fancy diff 后的 grep 过滤管道</li>
<li>fzf 全局查看文件</li>
<li>figlet 输出字符英文画</li>
<li>lolcat 彩色输出管道</li>
<li>cmatrix 没什么用的终端屏保</li>
<li>graphicsmagick 图片处理工具转换压缩等</li>
<li>10.15.x 支持不太友好<ul>
<li>tldr 更好的查看 -h</li>
<li>bat 更好的 cat 替代</li>
<li>ripgrep 更好的 grep</li>
</ul>
</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>nvm 安装完后，需要创建 <code>~/.nvm</code> 以及更新 <code>~/.zshrc</code> 的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install --cask \</span><br><span class="line">iterm2 \</span><br><span class="line">bob \</span><br><span class="line">mqttx \</span><br><span class="line">firefox \</span><br><span class="line">postman \</span><br><span class="line">nutstore \</span><br><span class="line">soapui \</span><br><span class="line">jetbrains-toolbox \</span><br><span class="line">iina \</span><br><span class="line">adrive \</span><br><span class="line">baidunetdisk \</span><br><span class="line">apifox \</span><br><span class="line">wechatwebdevtools \</span><br><span class="line">visual-studio-code \</span><br><span class="line">ticktick \</span><br><span class="line">snipaste \</span><br><span class="line">wechat \</span><br><span class="line">qq \</span><br><span class="line">telegram \</span><br><span class="line">sourcetree \</span><br><span class="line">sunloginclient \</span><br><span class="line">wechatwork \</span><br><span class="line">feishu \</span><br><span class="line">discord \</span><br><span class="line">tencent-lemon \</span><br><span class="line">neteasemusic \</span><br><span class="line">picgo \</span><br><span class="line">macdown \</span><br><span class="line">1password \</span><br><span class="line">drawio \</span><br><span class="line">microsoft-edge \</span><br><span class="line">mongodb-compass \</span><br><span class="line">chatbox \</span><br><span class="line">steam \</span><br><span class="line">google-chrome \</span><br><span class="line">notion \</span><br><span class="line">notion-calendar \</span><br><span class="line">tencent-meeting \</span><br><span class="line">josm \</span><br><span class="line">hbuilderx \</span><br><span class="line">font-jetbrains-mono \</span><br><span class="line">sublime-text \</span><br><span class="line">thunder \</span><br><span class="line">obsidian</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版</span></span><br><span class="line">brew install --cask \</span><br><span class="line">docker \</span><br><span class="line">proxyman \</span><br><span class="line">todesk \</span><br><span class="line">dingtalk \</span><br><span class="line">arc \</span><br><span class="line">obs \</span><br><span class="line"></span><br><span class="line"><span class="comment"># spotify \</span></span><br><span class="line"><span class="comment"># background-music \</span></span><br><span class="line"><span class="comment"># warp \</span></span><br><span class="line"><span class="comment"># youdaonote \</span></span><br></pre></td></tr></table></figure>

<h1 id="特殊版本软件"><a href="#特殊版本软件" class="headerlink" title="特殊版本软件"></a>特殊版本软件</h1><p>[[软件推荐]]</p>
<h1 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h1><p>[[Git#git 基本配置]]</p>
<h1 id="配置-vim"><a href="#配置-vim" class="headerlink" title="配置 vim"></a>配置 vim</h1><p>[[Vim配置文件]]</p>
<h1 id="Nvm"><a href="#Nvm" class="headerlink" title="Nvm"></a>Nvm</h1><p>[[Nvm]]</p>
<h1 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h1><p>[[配置]]</p>
<h1 id="npm-global-package"><a href="#npm-global-package" class="headerlink" title="npm global package"></a>npm global package</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm i -g git-open \</span><br><span class="line">yarn \</span><br><span class="line">serve \</span><br><span class="line">http-server \</span><br><span class="line">pnpm \</span><br><span class="line">nrm \</span><br><span class="line">ts-node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与 windows 同步 [[Windows系统装机配置指北#npm global package]]</p>
</blockquote>
<h1 id="配置-iterm2"><a href="#配置-iterm2" class="headerlink" title="配置 iterm2"></a>配置 iterm2</h1><p>分屏进入上一个目录</p>
<p><img src="http://obsidian.easyhappy.top/avan/20230630210705.png"></p>
<h1 id="配置-Alfred"><a href="#配置-Alfred" class="headerlink" title="配置 Alfred"></a>配置 Alfred</h1><p>[[Alfred 5]]</p>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Mac系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS 安装指定系统版本</title>
    <url>/2025/01/23/summary/Mac%E7%B3%BB%E7%BB%9F/%E5%AE%89%E8%A3%85%E6%8C%87%E5%AE%9A%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<ol>
<li>进入 Apple 官网查看相关版本的链接<br> <a href="https://support.apple.com/zh-cn/102662https://support.apple.com/zh-cn/102662">https://support.apple.com/zh-cn/102662https://support.apple.com/zh-cn/102662</a></li>
<li>进入 App Store 下载对应系统并更新</li>
</ol>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Mac系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>系统常用命令</title>
    <url>/2023/01/23/summary/Mac%E7%B3%BB%E7%BB%9F/%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="提示应用文件已经损坏"><a href="#提示应用文件已经损坏" class="headerlink" title="提示应用文件已经损坏"></a>提示应用文件已经损坏</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> spctl --master-disable</span><br><span class="line"></span><br><span class="line"><span class="comment"># react-confettisudo xattr -cr 拖入文件</span></span><br><span class="line"><span class="built_in">sudo</span> xattr -r -d com.apple.quarantine 拖入文件</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Mac系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Terminal 中的 GitBash 中文乱码</title>
    <url>/2023/01/07/summary/Windows%E7%B3%BB%E7%BB%9F/Terminal%20%E4%B8%AD%E7%9A%84%20GitBash%20%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h1 id="打开-GitBash-设置-chartset"><a href="#打开-GitBash-设置-chartset" class="headerlink" title="打开 GitBash 设置 chartset"></a>打开 GitBash 设置 chartset</h1><p><img src="http://cdn.easyhappy.top/obsidian/20230123152200.png"></p>
<h1 id="在-Terminal-中设置环境变量指定语言"><a href="#在-Terminal-中设置环境变量指定语言" class="headerlink" title="在 Terminal 中设置环境变量指定语言"></a>在 Terminal 中设置环境变量指定语言</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=<span class="string">&#x27;zh_CN.UTF-8&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>Windows系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Utools 配置</title>
    <url>/2022/01/23/summary/Windows%E7%B3%BB%E7%BB%9F/Utools%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h2><p>关键字 —— winman</p>
<h2 id="Hoppscotch"><a href="#Hoppscotch" class="headerlink" title="Hoppscotch"></a>Hoppscotch</h2><p>快捷调试工具</p>
<h2 id="程序员手册"><a href="#程序员手册" class="headerlink" title="程序员手册"></a>程序员手册</h2><p>linxu命令 —— linux<br>js文档 —— jswd<br>jQuery文档 —— jq<br>docker文档 —— doc<br>uToolsApi —— uto</p>
<h2 id="变量命令方式兼大小写转换"><a href="#变量命令方式兼大小写转换" class="headerlink" title="变量命令方式兼大小写转换"></a>变量命令方式兼大小写转换</h2><p>直接输入文字</p>
<h2 id="tinypng压缩图片"><a href="#tinypng压缩图片" class="headerlink" title="tinypng压缩图片"></a>tinypng压缩图片</h2><p>关键字 —— tin</p>
<h2 id="npm包实时搜索"><a href="#npm包实时搜索" class="headerlink" title="npm包实时搜索"></a>npm包实时搜索</h2><p>关键字 —— npm</p>
<h2 id="emoji搜索"><a href="#emoji搜索" class="headerlink" title="emoji搜索"></a>emoji搜索</h2><p>关键字 —— em</p>
<h2 id="hosts切换"><a href="#hosts切换" class="headerlink" title="hosts切换"></a>hosts切换</h2><p>关键字 —— host</p>
<h2 id="Chrome历史记录搜索"><a href="#Chrome历史记录搜索" class="headerlink" title="Chrome历史记录搜索"></a>Chrome历史记录搜索</h2><p>关键字 —— ch</p>
<h2 id="Github助手"><a href="#Github助手" class="headerlink" title="Github助手"></a>Github助手</h2><p>设置查询用户 —— gitu<br>查询用户的仓库 —— gith<br>查询用户的start —— gits<br>查询所有仓库 —— gitr</p>
<h2 id="浏览器书签搜索"><a href="#浏览器书签搜索" class="headerlink" title="浏览器书签搜索"></a>浏览器书签搜索</h2><p>关键字 —— bo</p>
<h2 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h2><p>选中文件鼠标中间</p>
<h2 id="计算稿纸"><a href="#计算稿纸" class="headerlink" title="计算稿纸"></a>计算稿纸</h2><p>直接输入带运算符</p>
<h2 id="OCR-图片转文字"><a href="#OCR-图片转文字" class="headerlink" title="OCR-图片转文字"></a>OCR-图片转文字</h2><p>鼠标中键</p>
<h2 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h2><p>关键字 —— clip</p>
<h2 id="聚合翻译"><a href="#聚合翻译" class="headerlink" title="聚合翻译"></a>聚合翻译</h2><p>关键字 —— fanyi</p>
<h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>关键字 —— find</p>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Windows系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>utools</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 系统相关配置</title>
    <url>/2022/01/23/summary/Windows%E7%B3%BB%E7%BB%9F/Windows%20%E7%B3%BB%E7%BB%9F%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="powershell-7"><a href="#powershell-7" class="headerlink" title="powershell 7"></a>powershell 7</h1><p>安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget search Microsoft.PowerShell</span><br><span class="line">winget install <span class="literal">--id</span> Microsoft.Powershell.Preview <span class="literal">--source</span> winget</span><br></pre></td></tr></table></figure>

<p>在 store 安装 terminal preview</p>
<p>将 powershell 7(pwsh) 设置为默认</p>
<h1 id="键盘配置"><a href="#键盘配置" class="headerlink" title="键盘配置"></a>键盘配置</h1><p><img src="https://pic1.zhimg.com/80/v2-4ccb797ee77be7ab8ac6d82adc041650_1440w.png" alt="image"></p>
<h1 id="PowerToys"><a href="#PowerToys" class="headerlink" title="PowerToys"></a>PowerToys</h1><p><img src="https://pic4.zhimg.com/80/v2-70373d883052a1b490cff1efe175c49b_1440w.png" alt="image"></p>
<p><img src="https://pica.zhimg.com/80/v2-8228e137955ffe0ae189d95375c158b0_1440w.png" alt="image"></p>
<h1 id="使用-WSL-方案"><a href="#使用-WSL-方案" class="headerlink" title="使用 WSL 方案"></a>使用 WSL 方案</h1><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><h3 id="设置默认终端为-wsl-的-ubuntu"><a href="#设置默认终端为-wsl-的-ubuntu" class="headerlink" title="设置默认终端为 wsl 的 ubuntu"></a>设置默认终端为 wsl 的 ubuntu</h3><p>直接在 terminal 的 setting json 中找到对应 uuid 填入</p>
<h3 id="在终端开启代理"><a href="#在终端开启代理" class="headerlink" title="在终端开启代理"></a>在终端开启代理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">touch</span> openproxy.sh</span><br><span class="line">vim openproxy.sh</span><br></pre></td></tr></table></figure>

<p>填入下面内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">&quot;http://127.0.0.1:10887&quot;</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">&quot;http://127.0.0.1:10887&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;already open proxy with 127.0.0.1:10887</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>127.0.0.1 如果是在虚拟机，需要填入vpn开启的 ip 地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> closeproxy.sh</span><br><span class="line">vim closeproxy.sh</span><br></pre></td></tr></table></figure>

<p>填入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unset</span> http_proxy</span><br><span class="line"><span class="built_in">unset</span> https_proxy</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;already close proxy&quot;</span></span><br></pre></td></tr></table></figure>

<p>添加别名，在 <code>.bashrc</code> <code>.zshrc</code> 你使用的终端添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim .bashrc</span><br></pre></td></tr></table></figure>

<p>加入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> openproxy=<span class="string">&quot;source ~/.command/openproxy.sh&quot;</span></span><br><span class="line"><span class="built_in">alias</span> closeproxy=<span class="string">&quot;source ~/.command/closeproxy.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>也可以直接</p>
<p><strong>.zshrc</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> openproxy=<span class="string">&quot;export http_proxy=&#x27;http://192.168.0.103:21882&#x27;; export https_proxy=&#x27;http://192.168.0.103:21882&#x27;&quot;</span></span><br><span class="line"><span class="built_in">alias</span> closeproxy=<span class="string">&quot;unset http_proxy; unset https_proxy&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line">openproxy</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">closeproxy</span><br></pre></td></tr></table></figure>

<h3 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install zsh</span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>zplun 用于安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zplug/init.zsh</span><br><span class="line"></span><br><span class="line">zplug <span class="string">&quot;zsh-users/zsh-syntax-highlighting&quot;</span>, defer:2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! zplug check --verbose; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Install? [y/N]: &quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">read</span> -q; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span>; zplug install</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">zplug load --verbose</span><br></pre></td></tr></table></figure>

<p>编辑 .zshrc 文件，参考 </p>
<blockquote>
<p>sudo apt install cowsay</p>
</blockquote>
<h3 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h3><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | zsh</span><br></pre></td></tr></table></figure>

<h1 id="使用-Git-Bash-方案"><a href="#使用-Git-Bash-方案" class="headerlink" title="使用 Git Bash 方案"></a>使用 Git Bash 方案</h1><p>安装 Windows 包管理工具，打开 powershell <code>非管理员模式</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br><span class="line">irm get.scoop.sh | iex</span><br></pre></td></tr></table></figure>

<p>安装常用包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lazygit</span></span><br><span class="line">scoop bucket add extras</span><br><span class="line">scoop install lazygit</span><br><span class="line"></span><br><span class="line"><span class="comment"># neofetch</span></span><br><span class="line">scoop install neofetch</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>Windows系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 知识点</title>
    <url>/2023/01/23/summary/npm/npm%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="防止意外发布代码"><a href="#防止意外发布代码" class="headerlink" title="防止意外发布代码"></a>防止意外发布代码</h1><p><code>package.json</code> 中 <code>&quot;private&quot;: true</code> 可以防止意外发布代码 <code>npm public</code>。主要应用于一些业务代码，如前端、后端页面代码。</p>
<h1 id="指定仓库源"><a href="#指定仓库源" class="headerlink" title="指定仓库源"></a>指定仓库源</h1><blockquote>
<p>packages.aliyun.com&#x2F;6247b3d254d03ae1449d&#x2F;npm&#x2F;npm-registry&#x2F; 是仓库源地址</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">registry=https://packages.aliyun.com/6247b3d254d03ae1449d/npm/npm-registry/</span><br></pre></td></tr></table></figure>

<h1 id="token"><a href="#token" class="headerlink" title="token"></a>token</h1><h2 id="创建token"><a href="#创建token" class="headerlink" title="创建token"></a>创建token</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create token</span><br></pre></td></tr></table></figure>

<h2 id="使用token授权"><a href="#使用token授权" class="headerlink" title="使用token授权"></a>使用token授权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//packages.aliyun.com/6247b3d254d03ae1449d/npm/npm-registry/:_authToken=b7a28d1d-f7f3-4383-b896-3e92616cd</span><br></pre></td></tr></table></figure>

<h2 id="通过token进行login"><a href="#通过token进行login" class="headerlink" title="通过token进行login"></a>通过token进行login</h2><p>create token</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nrm add 源名字 源地址</span><br><span class="line">$ nrm use 源名字</span><br><span class="line">$ npm login</span><br><span class="line">用户名</span><br><span class="line">密码</span><br><span class="line">邮箱</span><br><span class="line">$ npm token create</span><br><span class="line">密码</span><br></pre></td></tr></table></figure>

<p>use token <code>.nrmrc</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//源域名/:_authToken=你创建的token</span><br><span class="line">registry = &quot;源地址/&quot;</span><br></pre></td></tr></table></figure>

<h1 id="单独为某些依赖设置安装源"><a href="#单独为某些依赖设置安装源" class="headerlink" title="单独为某些依赖设置安装源"></a>单独为某些依赖设置安装源</h1><p>example：以@avan开头的依赖包，走<a href="https://npm.avan.com/">https://npm.avan.com</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> @avan:registry=https://npm.avan.com</span><br></pre></td></tr></table></figure>

<h1 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm adduser --registry 需要注册的地址</span><br><span class="line">$ 账号名</span><br><span class="line">$ 密码</span><br><span class="line">$ 邮箱</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 系统装机配置指北</title>
    <url>/2023/01/23/summary/Windows%E7%B3%BB%E7%BB%9F/Windows%20%E7%B3%BB%E7%BB%9F%E8%A3%85%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><p>安装 scoop 包管理</p>
<blockquote>
<p>不在推荐改目录</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改目錄</span></span><br><span class="line"><span class="comment"># [environment]::setEnvironmentVariable(&#x27;SCOOP&#x27;,&#x27;d:\software\scoop&#x27;,&#x27;User&#x27;)</span></span><br><span class="line"><span class="comment"># $env:SCOOP=&#x27;d:\software\scoop&#x27;</span></span><br><span class="line"><span class="built_in">iex</span> (<span class="built_in">new-object</span> net.webclient).downloadstring(<span class="string">&#x27;https://get.scoop.sh&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<p>添加 bucket 源</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop bucket add extras</span><br><span class="line">scoop bucket add main</span><br><span class="line">scoop bucket add versions</span><br><span class="line">scoop bucket add nonportable</span><br></pre></td></tr></table></figure>

<p>安装命令行工具</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install `</span><br><span class="line">main/vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时不使用</span></span><br><span class="line"><span class="comment"># main/nvm `</span></span><br><span class="line"><span class="comment"># pnpm `</span></span><br></pre></td></tr></table></figure>

<p>安装软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop install `</span><br><span class="line">extras/postman `</span><br><span class="line">extras/mqttx `</span><br><span class="line">versions/snipaste<span class="literal">-beta</span> `</span><br><span class="line">extras/sourcetree `</span><br><span class="line">extras/telegram `</span><br><span class="line">extras/qq `</span><br><span class="line">extras/discord `</span><br><span class="line">extras/vscode `</span><br><span class="line">extras/jetbrains<span class="literal">-toolbox</span> `</span><br><span class="line">extras/apifox `</span><br><span class="line">extras/soapui `</span><br><span class="line">extras/firefox `</span><br><span class="line">extras/googlechrome `</span><br><span class="line">extras/picgo `</span><br><span class="line">nonportable/grammarly<span class="literal">-np</span> `</span><br><span class="line">extras/mongosh `</span><br><span class="line">extras/powertoys `</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暫時不使用</span></span><br><span class="line"><span class="comment"># extras/spotify `</span></span><br><span class="line"><span class="comment"># extras/wechat `</span></span><br><span class="line"><span class="comment"># extras/obsidian `</span></span><br><span class="line"><span class="comment"># extras/wpsoffice `</span></span><br></pre></td></tr></table></figure>

<h1 id="特殊版本"><a href="#特殊版本" class="headerlink" title="特殊版本"></a>特殊版本</h1><p>[[软件推荐]]</p>
<h1 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h1><p>[[相关配置]]</p>
<h1 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h1><p>[[开发小锦囊#git 基本配置]]</p>
<h1 id="Nvm"><a href="#Nvm" class="headerlink" title="Nvm"></a>Nvm</h1><p>[[Nvm]]</p>
<h1 id="fnm"><a href="#fnm" class="headerlink" title="fnm"></a>fnm</h1><h2 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 fnm</span></span><br><span class="line">winget install Schniz.fnm</span><br><span class="line"><span class="comment"># 创建配置文件</span></span><br><span class="line"><span class="keyword">if</span> (-not (Test-Path <span class="variable">$profile</span>)) &#123; New-Item <span class="variable">$profile</span> -Force &#125;</span><br><span class="line"><span class="comment"># 打开文件目录</span></span><br><span class="line">start &lt;目录&gt;</span><br></pre></td></tr></table></figure>

<p>添加到配置文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fnm <span class="built_in">env</span> --use-on-cd --shell powershell | Out-String | Invoke-Expression</span><br></pre></td></tr></table></figure>

<h2 id="wsl"><a href="#wsl" class="headerlink" title="wsl"></a>wsl</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://fnm.vercel.app/install | zsh</span><br></pre></td></tr></table></figure>

<h1 id="配置-vim"><a href="#配置-vim" class="headerlink" title="配置 vim"></a>配置 vim</h1><p>[[Vim配置文件]]</p>
<h1 id="npm-global-package"><a href="#npm-global-package" class="headerlink" title="npm global package"></a>npm global package</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g `</span><br><span class="line">git-open `</span><br><span class="line">yarn `</span><br><span class="line">serve `</span><br><span class="line">http-server `</span><br><span class="line">pnpm `</span><br><span class="line">nrm `</span><br><span class="line">ts-node</span><br></pre></td></tr></table></figure>

<blockquote>
<p>与 mac 同步 [[Mac系统装机配置指北#Pnpm global package]]</p>
</blockquote>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Windows系统</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>npm 配置</title>
    <url>/2023/01/23/summary/npm/npm%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="取消动态版本号"><a href="#取消动态版本号" class="headerlink" title="取消动态版本号"></a>取消动态版本号</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消新安装的包的 ^ 前缀</span></span><br><span class="line">npm config <span class="built_in">set</span> -g save-prefix=<span class="string">&#x27;&#x27;</span></span><br><span class="line">pnpm config <span class="built_in">set</span> -g save-prefix=<span class="string">&#x27;&#x27;</span></span><br><span class="line">yarn config <span class="built_in">set</span> save-prefix <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 verdaccio 搭建 npm 私服</title>
    <url>/2024/06/30/summary/npm/%E4%BD%BF%E7%94%A8%20verdaccio%20%E6%90%AD%E5%BB%BA%20npm%20%E7%A7%81%E6%9C%8D/</url>
    <content><![CDATA[<h1 id="启动-docker-服务"><a href="#启动-docker-服务" class="headerlink" title="启动 docker 服务"></a>启动 docker 服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">V_PATH=&lt;数据文件目录路径&gt;; docker run -it -u 1000 --name verdaccio \</span><br><span class="line">-p 4873:4873 \</span><br><span class="line">-v <span class="variable">$V_PATH</span>/conf:/verdaccio/conf \</span><br><span class="line">-v <span class="variable">$V_PATH</span>/storage:/verdaccio/storage \</span><br><span class="line">-v <span class="variable">$V_PATH</span>/plugins:/verdaccio/plugins \</span><br><span class="line">-e VERDACCIO_PUBLIC_URL=<span class="string">&#x27;协议://域名&#x27;</span> \</span><br><span class="line">verdaccio/verdaccio</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-u 是对应用户的 uid</p>
</blockquote>
<p><strong>conf&#x2F;config.yaml</strong></p>
<p><a href="https://github.com/verdaccio/verdaccio/tree/master/packages/config/src/conf">官方参考文件</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 包存储的路径</span></span><br><span class="line"><span class="attr">storage:</span> <span class="string">/verdaccio/storage</span></span><br><span class="line"></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">htpasswd:</span></span><br><span class="line">    <span class="attr">file:</span> <span class="string">/verdaccio/conf/htpasswd</span></span><br><span class="line">    <span class="comment"># -1 不允许注册</span></span><br><span class="line">    <span class="comment"># 不设置则不限制</span></span><br><span class="line">    <span class="attr">max_users:</span> <span class="number">-1</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">api:</span></span><br><span class="line">    <span class="attr">jwt:</span></span><br><span class="line">      <span class="attr">sign:</span></span><br><span class="line">        <span class="attr">expiresIn:</span> <span class="string">60d</span></span><br><span class="line">        <span class="attr">notBefore:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">sign:</span></span><br><span class="line">      <span class="attr">expiresIn:</span> <span class="string">7d</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传的包大小</span></span><br><span class="line"><span class="attr">max_body_size:</span> <span class="string">300mb</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接其他 npm 源</span></span><br><span class="line"><span class="attr">uplinks:</span></span><br><span class="line">  <span class="attr">npmjs:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://registry.npmmirror.com/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="attr">&#x27;@whalewave/*&#x27;:</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&#x27;@*/*&#x27;:</span></span><br><span class="line">    <span class="comment"># 范围限制的包</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$all</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&#x27;**&#x27;:</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">$all</span></span><br><span class="line">    <span class="attr">publish:</span> <span class="string">$authenticated</span></span><br><span class="line">    <span class="attr">proxy:</span> <span class="string">npmjs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To use `npm audit` uncomment the following section</span></span><br><span class="line"><span class="attr">middlewares:</span></span><br><span class="line">  <span class="attr">audit:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># log settings</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">type:</span> <span class="string">stdout</span>, <span class="attr">format:</span> <span class="string">pretty</span>, <span class="attr">level:</span> <span class="string">trace</span> &#125;</span><br><span class="line">  <span class="comment">#- &#123;type: file, path: verdaccio.log, level: info&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>conf&#x2F;htpasswd</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin:$2y$10$f3jh1gL0lcx2J6PwK0/4VOMBIQgOHxV3ZU/.vPSX1unZ4DL9F07da</span><br><span class="line">lzm:$2y$10$f3jh1gL0lcx2J6PwK0/4VOMBIQgOHxV3ZU/.vPSX1unZ4DL9F07da</span><br></pre></td></tr></table></figure>

<blockquote>
<p>账号: admin<br>密码: admin</p>
</blockquote>
<h1 id="htpasswd-注册账号"><a href="#htpasswd-注册账号" class="headerlink" title="htpasswd 注册账号"></a>htpasswd 注册账号</h1><p><a href="https://hostingcanada.org/htpasswd-generator/">https://hostingcanada.org/htpasswd-generator/</a></p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry &lt;协议://域名&gt;</span><br><span class="line">npm login --registry &lt;协议://域名&gt;</span><br><span class="line">npm config <span class="built_in">set</span> always-auth <span class="literal">true</span></span><br><span class="line">npm i @whalewave/adm-ui</span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@whalewave/adm-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="title function_">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;lg&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;sm&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看配置文件</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="comment"># 还原</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure>

<h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VERDACCIO_PUBLIC_URL=<span class="string">&#x27;&lt;协议://域名&gt;&#x27;</span>; docker restart 容器<span class="built_in">id</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>npm</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 基础知识</title>
    <url>/2022/01/23/summary/docker/docker%20%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD 设定默认执行的命令</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;dist/main.js&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2><p>ENTRYPOINT 为 docker run 的时候执行的命令, docker run 后续的命令会跟在 ENTRYPOINT 后面</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;node&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run xxx -v</span><br><span class="line"><span class="comment"># node -v</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker 经常用的命令</title>
    <url>/2022/01/23/summary/docker/docker%20%E7%BB%8F%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Windows-启动容器"><a href="#Windows-启动容器" class="headerlink" title="Windows 启动容器"></a>Windows 启动容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MSYS_NO_PATHCONV=1 docker run -it -p 1883:1883 -v $(<span class="built_in">pwd</span>)/mosquitto.conf:/mosquitto/config/mosquitto.conf eclipse-mosquitto</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MSYS_NO_PATHCONV&#x3D;1 和 $(pwd) 是在 windows 中 gitbash 运行命令需要添加的参数，否则会识别不了路径</p>
</blockquote>
<h1 id="Windows-docker-启动-mysql-服务"><a href="#Windows-docker-启动-mysql-服务" class="headerlink" title="Windows docker 启动 mysql 服务"></a>Windows docker 启动 mysql 服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MSYS_NO_PATHCONV=1 docker run --name MYSQL服务名字 -it -p 映射出来端口:3306 -v $(<span class="built_in">pwd</span>)/mysql/conf/my.conf:/etc/mysql/my.conf -v <span class="variable">$&#123;pwd&#125;</span>/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=数据库密码 mysql:5.7</span><br></pre></td></tr></table></figure>

<h1 id="启动-nginx-服务"><a href="#启动-nginx-服务" class="headerlink" title="启动 nginx 服务"></a>启动 nginx 服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name nginx nginx</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /Users/avan/services/nginx/html</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /Users/avan/services/nginx/conf.d</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /Users/avan/services/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name main-nginx --<span class="built_in">rm</span> -p 80:80 -p 443:443 -v /Users/avan/services/nginx/html:/usr/share/nginx/html -v /Users/avan/services/nginx/conf.d:/etc/nginx/conf.d nginx</span><br></pre></td></tr></table></figure>

<h2 id="转发-ws"><a href="#转发-ws" class="headerlink" title="转发 ws"></a>转发 ws</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">   <span class="section">location</span><span class="regexp"> ^~</span> /videows &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.10.11:9999;</span><br><span class="line"><span class="attribute">proxy_read_timeout</span> <span class="number">300s</span>;</span><br><span class="line">               <span class="attribute">proxy_send_timeout</span> <span class="number">300s</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>  Host <span class="variable">$http_host</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>  X-Real-IP  <span class="variable">$remote_addr</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>  X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span>  X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">               <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">               <span class="attribute">proxy_set_header</span> Connection <span class="variable">$connection_upgrade</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line">        <span class="attribute">gzip_comp_level</span> <span class="number">9</span>;</span><br><span class="line">        <span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">        <span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line">        <span class="attribute">absolute_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">301</span> /web/unify;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /web/unify &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">                <span class="attribute">alias</span> /usr/share/nginx/html/unify;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/unify /web/unify/index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /web/station &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">                <span class="attribute">alias</span> /usr/share/nginx/html/station;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/station /web/station/index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /web/mobile &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">                <span class="attribute">proxy_pass</span> http://staging-flow-app:8080;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /web/auth &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">                <span class="attribute">alias</span> /usr/share/nginx/html/auth;</span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/auth /web/auth/index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /station/ &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers *;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/station/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-flow-station:8000;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /flowtrace/socketio/ &#123;</span><br><span class="line">            <span class="attribute">add_header</span> backendIP <span class="variable">$upstream_addr</span>;</span><br><span class="line">            <span class="attribute">add_header</span> backendCode <span class="variable">$upstream_status</span>;</span><br><span class="line">           <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host staging-flow-flow:<span class="number">8008</span>;</span><br><span class="line">           <span class="attribute">proxy_pass</span> http://staging-flow-flow:8008/socket.io/;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">-- <span class="attribute">VISUAL</span> LINE --                                                                                                                                     <span class="number">1</span>,<span class="number">1</span>           Top</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location<span class="regexp"> ^~</span> /auth/ &#123;</span><br><span class="line">                <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Methods *;</span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Headers *;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/auth/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-flow-auth:8001;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /asset/socketio/ &#123;</span><br><span class="line">            <span class="attribute">add_header</span> backendIP <span class="variable">$upstream_addr</span>;</span><br><span class="line">            <span class="attribute">add_header</span> backendCode <span class="variable">$upstream_status</span>;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host staging-unify-asset:<span class="number">8009</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-unify-asset:8009/socket.io/;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /asset/ &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/asset/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-unify-asset:8009;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /emergency/ &#123;</span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/emergency/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-unify-emergency:8007;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~</span> /station/socketio/ &#123;</span><br><span class="line">            <span class="attribute">add_header</span> backendIP <span class="variable">$upstream_addr</span>;</span><br><span class="line">            <span class="attribute">add_header</span> backendCode <span class="variable">$upstream_status</span>;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">6000</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host staging-flow-station:<span class="number">8000</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://staging-flow-station:8000/socket.io/;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#�~E代�~P~F�~K�~U使�~T�</span></span><br><span class="line">        <span class="comment"># location ^~ /agent &#123;</span></span><br><span class="line">            <span class="comment">#     add_header Access-Control-Allow-Origin *;</span></span><br><span class="line">        <span class="comment">#     add_header Access-Control-Allow-Methods *;</span></span><br><span class="line">        <span class="comment">#     add_header Access-Control-Allow-Headers *;</span></span><br><span class="line">        <span class="comment">#     rewrite ^/agent(.*)$ /$1 break;</span></span><br><span class="line">        <span class="comment">#     proxy_pass http://staging-flow-agent:6000;</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="创建-mysql-服务"><a href="#创建-mysql-服务" class="headerlink" title="创建 mysql 服务"></a>创建 mysql 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mysql-server -v /Users/epath/data:/var/lib/mysql -v /etc/timezone:/etc/timezone -v /etc/localtime:/etc/localtime -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123123 mysql</span><br></pre></td></tr></table></figure>

<h2 id="创建-mongo-服务"><a href="#创建-mongo-服务" class="headerlink" title="创建 mongo 服务"></a>创建 mongo 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name some-mongo \</span><br><span class="line">-v 本地db映射路径:/data/db \</span><br><span class="line">-d mongo</span><br></pre></td></tr></table></figure>

<h2 id="创建-redis-服务"><a href="#创建-redis-服务" class="headerlink" title="创建 redis 服务"></a>创建 redis 服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis-server -p 6379:6379 -d redis</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose yml 样板</title>
    <url>/2022/01/23/summary/docker/docker-compose%20yml%20%E6%A0%B7%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="启动-mongo"><a href="#启动-mongo" class="headerlink" title="启动 mongo"></a>启动 mongo</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:7.0.5</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27000</span><span class="string">:27017</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/avan/docker-compose/base-env/mongo/data/db:/data/db</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/avan/docker-compose/base-env/mongo/backup:/backup</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_USERNAME:</span> <span class="string">用户名</span></span><br><span class="line">      <span class="attr">MONGO_INITDB_ROOT_PASSWORD:</span> <span class="string">密码</span></span><br></pre></td></tr></table></figure>

<h1 id="启动-postgres"><a href="#启动-postgres" class="headerlink" title="启动 postgres"></a>启动 postgres</h1><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">postgres:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres:16</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27100</span><span class="string">:5432</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/avan/docker-compose/base-env/postgres/data:/var/lib/postgresql/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/home/avan/docker-compose/base-env/postgres/backup:/backup</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">POSTGRES_PASSWORD:</span> <span class="string">密码</span></span><br></pre></td></tr></table></figure>

<h1 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a>启动 nginx</h1><p>TODO</p>
]]></content>
      <categories>
        <category>汇总</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>从零实践webpack</title>
    <url>/2023/06/30/summary/webpack/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E8%B7%B5webpack/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> zero2one-webpack</span><br><span class="line"><span class="built_in">cd</span> zero2one-webpack</span><br><span class="line">pnpm init</span><br><span class="line">pnpm i -D webpack webpack-cli @types/node style-loader css-loader csv-loader xml-loader toml yamljs json5 html-webpack-plugin webpack-dev-server express webpack-dev-middleware webpack-hot-middleware webpack-visualizer-plugin bundle-stats-webpack-plugin</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm i lodash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure>

<h1 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h1><p>entry —— 入口文件，从这个位置开始分析引用<br>output —— 输出文件<br>module —— 模块中可以定义多组规则，规则里面使用对应的加载器<br>loader —— 加载器<br>plugin —— 插件，拓展功能<br>mode —— 开发环境不压缩代码，生产环境会压缩代码</p>
<h1 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h1><p>loader 的加载顺序为从后往前。</p>
<h2 id="加载-css"><a href="#加载-css" class="headerlink" title="加载 css"></a>加载 css</h2><p>通过 <code>css-loader</code> 获取 css 文件的内容，在通过 <code>style-loader</code> 将 css 放到 header 中显示出来。</p>
<h2 id="加载图片-字体"><a href="#加载图片-字体" class="headerlink" title="加载图片&#x2F;字体"></a>加载图片&#x2F;字体</h2><p>webpack5 自带了 <code>asset/resource</code> loader 用来加载</p>
<h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>使用 <code>csv-loader</code> 和 <code>xml-loader</code> 分别加载 csv&#x2F;tsv 和 xml 的文件。 </p>
<blockquote>
<p>JSON 在 webpack5 内置了 loader 进行加载</p>
</blockquote>
<h3 id="不使用加载器，使用解析器进行加载数据"><a href="#不使用加载器，使用解析器进行加载数据" class="headerlink" title="不使用加载器，使用解析器进行加载数据"></a>不使用加载器，使用解析器进行加载数据</h3><p>在 module 中，指定 type 为 json，接着使用对应的 parse 解析即可。</p>
<blockquote>
<p>toml yamljs json5</p>
</blockquote>
<h1 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h1><p>plugin 为一个数组，接收不同插件的实例。</p>
<h2 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h2><p>自动创建 html 文件，如果更新出入口文件，自动生成对应的 script 标签引入。</p>
<h1 id="Source-Map"><a href="#Source-Map" class="headerlink" title="Source Map"></a>Source Map</h1><p><code>devtool: &#39;inline-source-map&#39;</code></p>
<p>开启 source map 可以生成一个映射表，方便在调试的时候对应实际的代码。在 mode 为开发模式的时候，代码虽然已经不压缩了，但是没有办法对应上实际的代码。</p>
<h1 id="Watch-文件变化"><a href="#Watch-文件变化" class="headerlink" title="Watch 文件变化"></a>Watch 文件变化</h1><p>一种可以直接在 webpack 后面添加 –watch 进行监听文件变化自动重新编译。</p>
<p>上面那种方式不会自动刷新浏览器，通过 <code>webpack-dev-server</code> 可以使用 websocket 通知浏览器自动刷新。</p>
<p>配置 <code>wepback.config.js</code> 中的 devServer 和 optimzation 字段即可</p>
<h2 id="使用-webpack-dev-middleware-配合-express-使用"><a href="#使用-webpack-dev-middleware-配合-express-使用" class="headerlink" title="使用 webpack-dev-middleware 配合 express 使用"></a>使用 webpack-dev-middleware 配合 express 使用</h2><p><code>webpack.config.js</code> 中配置 <code>output.publicPublic: &#39;/&#39;</code></p>
<p>在 express 中使用 <code>webpack-dev-middleware</code> 中间件，并指定相同的 <code>publicPath</code> 即可</p>
<blockquote>
<p>目前只会重新编译不会刷新浏览器，需要搭配 webpack-hot-middleware<br>WebStorm 需关闭 safe save，新版好像没办法关闭这个</p>
</blockquote>
<h1 id="分割代码"><a href="#分割代码" class="headerlink" title="分割代码"></a>分割代码</h1><h2 id="直接-entry-分割"><a href="#直接-entry-分割" class="headerlink" title="直接 entry 分割"></a>直接 entry 分割</h2><p>这种方式会导致同一个内容被复制多份</p>
<h2 id="分块并阻止复制"><a href="#分块并阻止复制" class="headerlink" title="分块并阻止复制"></a>分块并阻止复制</h2><h3 id="通过-dependOn-进行依赖选择"><a href="#通过-dependOn-进行依赖选择" class="headerlink" title="通过 dependOn 进行依赖选择"></a>通过 dependOn 进行依赖选择</h3><p>与 entry 分割基本一致，只是在 dependOn 中指定共享的 入口名</p>
<h3 id="SplitChunksPluign-自动分块"><a href="#SplitChunksPluign-自动分块" class="headerlink" title="SplitChunksPluign 自动分块"></a>SplitChunksPluign 自动分块</h3><p>自动将文件中用到的通过 npm 包抽离成一个 chunk</p>
<h2 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h2><p>使用 <code>import()</code> 动态导入，自动分块</p>
<blockquote>
<p>因为返回的是 <code>Promise</code> ，所以浏览器版本过低是需要使用垫片（promise-polyfill）</p>
</blockquote>
<h1 id="预请求-预加载"><a href="#预请求-预加载" class="headerlink" title="预请求&#x2F;预加载"></a>预请求&#x2F;预加载</h1><h2 id="preFetch-预请求"><a href="#preFetch-预请求" class="headerlink" title="preFetch 预请求"></a>preFetch 预请求</h2><p><code>import(/* webpackPrefetch: true */, &#39;./path/to/LoginModal.js&#39;)</code></p>
<p>在浏览器空闲的时候去请求，当需要的时候可以立刻请求。</p>
<blockquote>
<p>上面这句话会在浏览器 header 中添加<br> <link rel="prefet" href = "login-mode-chunk.js"></p>
</blockquote>
<h2 id="preLoad-预加载"><a href="#preLoad-预加载" class="headerlink" title="preLoad 预加载"></a>preLoad 预加载</h2><p><code>import(/* webpackPreLoad: true */ &#39;echatLibray&#39;)</code></p>
<p>预加载块会与父快并行加载，等父块加载完。马上进行加载。</p>
<h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><h2 id="设置-hash-值"><a href="#设置-hash-值" class="headerlink" title="设置 hash 值"></a>设置 hash 值</h2><p>通过在 output 时指定 [contenthash] 来设置他的哈希值。</p>
<h2 id="切割包-hash"><a href="#切割包-hash" class="headerlink" title="切割包 hash"></a>切割包 hash</h2><p>在 <code>splitChunks</code> 中定义 <code>cacheGroups</code> 字的的匹配规则和生成的包名</p>
<blockquote>
<p>其中一个依赖 bundle 发生改变，全部的 hash 值都发生了改变。<br>需要配置 <code>optimization.moduleIdls: deterministic</code> 这样只会改变修改了的文件 </p>
</blockquote>
<h1 id="CLI-参数"><a href="#CLI-参数" class="headerlink" title="CLI 参数"></a>CLI 参数</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack --config webpack.config.js</span><br></pre></td></tr></table></figure>

<h1 id="bundle-分析"><a href="#bundle-分析" class="headerlink" title="bundle 分析"></a>bundle 分析</h1><h2 id="webpack-visualizer"><a href="#webpack-visualizer" class="headerlink" title="webpack-visualizer"></a><a href="https://chrisbateman.github.io/webpack-visualizer/">webpack-visualizer</a></h2><h2 id="Webpack-Chart"><a href="#Webpack-Chart" class="headerlink" title="Webpack Chart"></a><a href="https://alexkuz.github.io/webpack-chart/">Webpack Chart</a></h2><h2 id="推荐-webpack-bundle-anzlyer"><a href="#推荐-webpack-bundle-anzlyer" class="headerlink" title="推荐 webpack-bundle-anzlyer"></a><a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">推荐 webpack-bundle-anzlyer</a></h2><h2 id="推荐-bundle-stats"><a href="#推荐-bundle-stats" class="headerlink" title="推荐 bundle-stats"></a><a href="https://github.com/relative-ci/bundle-stats/tree/master/packages/webpack-plugin">推荐 bundle-stats</a></h2><p>有个显示的 bug，需要将 tab 栏的 z-index 设置为 0</p>
<h1 id="webpack-构建库"><a href="#webpack-构建库" class="headerlink" title="webpack 构建库"></a>webpack 构建库</h1><p>指定好 <code>output.library</code> 打包的类型和打包后的调用变量名<br>通过 <code>externals</code> 忽略不想纳入打包中的外部依赖，同时该依赖为 dev 依赖</p>
<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npx webpack --<span class="built_in">env</span> name=avan --<span class="built_in">env</span> production</span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   name: &#x27;avan&#x27;,</span></span><br><span class="line"><span class="comment">#   production: true</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>默认值为 true</p>
</blockquote>
<h1 id="优化构建性能"><a href="#优化构建性能" class="headerlink" title="优化构建性能"></a>优化构建性能</h1><ol>
<li>按需使用开发模式和生产模式</li>
<li>及时更新包管理工具的版本，提高解析速度</li>
<li>使用最新版的webpack</li>
<li>精确控制 loader 的匹配文件，test 关键字</li>
<li>缩小 loader 的检索范围，include 关键字</li>
<li>每个 lodaer 都有对应的启动时间，尽可能少的使用 loader</li>
<li>如果不需要 npm link 的功能，关闭 <code>resolve.symlinks: false</code></li>
<li>如果使用的 plugin 不依赖与上下文（context）则关闭 <code>resolve.cacheWithContext: false</code></li>
<li>尽可能减少 <code>resolve.modules</code>、<code>resolve.extensions</code>、<code>resolve.mainFiles</code>、<code>resolve.descriptionFiles</code> 的项目数量，他们会增加文件系统的调用数量</li>
<li>使用 <code>DllPlugin</code> 将改动小的代码单独编译，但会提高构建复杂性</li>
<li>减小编译的总大小，如：更小的库、多页面使用 <code>SplitChunksPlugin</code> 、只编译开发的部分</li>
<li>使用 <code>thread-loader</code> 将较大开销的内容放到线程池</li>
<li>使用 webpack 的 <code>cache</code> 字段，并在依赖安装前删除缓存目录（<code>postinstall</code>）</li>
<li>可以关闭不必要的插件，如：进度插件 <code>ProgressPlugin</code></li>
<li>监听文件不要使用其他工具，使用 <code>watch</code> 模式。有些花费比较大的监听，可以设置 <code>watchOptions.poll</code> 增加轮询间隔。</li>
<li>按需设置 <code>devtool</code> 的配置，大多情况下 <code>eval-cheap-module-source-map</code> 是最好选择</li>
<li>开发模式不建议使用的插件 <code>TerserPlugin</code>、<code>AggressiveSplittingPlugin</code>、<code>AggressiveMergingPlugin</code>、<code>ModuleConcatenationPlugin</code></li>
<li>开发模式不建议生成 <code>[fullhash]</code>&#x2F;<code>[chunkhash]</code>&#x2F;<code>[contenthash]</code>等关键字</li>
<li>开启 <code>optimization.runtimeChunk: truo</code> </li>
<li>项目庞大的时候，不要关闭 <code>optimization</code> 中的 <code>removeAvailableModules</code>、<code>removeEmptyChunks</code>、<code>splitChunks</code> 这些开销很大</li>
<li>必要时关闭输出信息 <code>output.pathinfo: false</code></li>
<li>不要使用 <code>8.9.10</code> ~ <code>9.11.1</code> 版本的 nodejs，Map 和 Set 存在性能回归</li>
<li><code>ts-loader</code> 关闭类型检测 <code>options.transplieOnly: true</code>。使用 <code>fork-ts-checker-notifier-webpack-plugin</code> 和 <code>fork-ts-checker-webpack-plugin</code> 插件做检测。他会另开一个线程执行。</li>
<li><code>babel</code> 尽可能减少预设或插件数量</li>
<li><code>node-sass</code> 会阻塞线程，使用 <code>thread-loader</code> 设置 <code>workerParalleJobs: 2</code></li>
</ol>
<h1 id="不同框架的热刷新功能"><a href="#不同框架的热刷新功能" class="headerlink" title="不同框架的热刷新功能"></a>不同框架的热刷新功能</h1><p>vue —— <code>vue-loader</code> <code>vue-template-compiler</code><br>react —— <code>react-hot-loader</code></p>
<h1 id="Tree-Shaking-摇树"><a href="#Tree-Shaking-摇树" class="headerlink" title="Tree Shaking 摇树"></a>Tree Shaking 摇树</h1><p>它虽然可以删除未使用到的 import 代码。但是因为有时候我们有些引入的代码是不需要而外引用的，比如：css样式，文件内部已经执行了代码等。</p>
<p>所以我们需要标记副作用，告诉哪些文件是特殊的。</p>
<p>kj如果确保全局都没有副作用，可以直接在 <code>package.json</code> 中配置 <code>&quot;sideEffectsk&quot;: false</code> 表示所有文件都没有副作用，可以安心删除<br>或者通过正则匹配指定文件 <code>&quot;sideEffects&quot;: [&quot;./src/some-side-effectful-file.js&quot;, &quot;*.css&quot;]</code> 存在副作用的文件</p>
<h2 id="发挥摇树的优势"><a href="#发挥摇树的优势" class="headerlink" title="发挥摇树的优势"></a>发挥摇树的优势</h2><ol>
<li>使用 <code>ES2015</code> 模块导入导出</li>
<li>确保没有把代码编译为 <code>CommonJS</code> 模块（@babel&#x2F;preset-env）</li>
<li>在 <code>package.json</code> 配置 <code>sideEffects</code></li>
<li>开启 <code>production</code> 模式，以及相关判断减少包的大小</li>
</ol>
<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p><code>() =&gt; import(path)</code> 返回一个promise，如果需要使用，可以在 <code>.then</code> 中获取 <code>default</code> 的内容</p>
<h1 id="使用-ts"><a href="#使用-ts" class="headerlink" title="使用 ts"></a>使用 ts</h1><p>使用 <code>ts-loader</code> 或者 <code>@babel/preset-typescript</code> 进行解析 ts 文件</p>
<p>ts 中遇到 webpack 内置变量报错可以</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;webpack/module&quot; /&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">webpack</span>);</span><br></pre></td></tr></table></figure>

<h1 id="配置-images-资源输出位置"><a href="#配置-images-资源输出位置" class="headerlink" title="配置 images 资源输出位置"></a>配置 images 资源输出位置</h1><p><code>assetModuleFilename: &#39;images/[hash][ext][query]&#39;</code></p>
<blockquote>
<p>需要在 loader 的时候匹配到图片，并使用 <code>asset/resource</code> 进行加载</p>
</blockquote>
<h1 id="指定特定文件的输出位置"><a href="#指定特定文件的输出位置" class="headerlink" title="指定特定文件的输出位置"></a>指定特定文件的输出位置</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123; <span class="comment">// 输出文件</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;images/[hash][ext][query]&#x27;</span> <span class="comment">// 指定 image 文件的输出位置</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h1 id="使用内联导入方式，获取相应-url"><a href="#使用内联导入方式，获取相应-url" class="headerlink" title="使用内联导入方式，获取相应 url"></a>使用内联导入方式，获取相应 url</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  test<span class="punctuation">:</span> /\.svg/<span class="punctuation">,</span></span><br><span class="line">  type<span class="punctuation">:</span> &#x27;asset/inline&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="css文件优化"><a href="#css文件优化" class="headerlink" title="css文件优化"></a>css文件优化</h1><p>生产模式下可以使用 <code>MiniCssExtractPlugin.loader</code> 替换 <code>style-loader</code>。通过环境变量控制</p>
<h1 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  alias<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    &#x27;@&#x27;<span class="punctuation">:</span> path.resolve(&#x27;./src&#x27;)</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 docker</title>
    <url>/2023/01/11/summary/Linux%E7%B3%BB%E7%BB%9F/Ubuntu/Ubuntu%20%E5%AE%89%E8%A3%85%20docker/</url>
    <content><![CDATA[<p>卸载旧版</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> apt-get install apt-transport-https ca-certificates curl gnupg lsb-release</span><br></pre></td></tr></table></figure>

<p>安装docker的gpg（阿里）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br></pre></td></tr></table></figure>

<p>验证可用性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-key fingerprint 0EBFCD88</span><br></pre></td></tr></table></figure>

<p>写入镜像源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure>

<p>再次更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<p>安装docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>开启阿里镜像（最好自己创建一个账号）</p>
<p><a href="https://cr.console.aliyun.com/cn-qingdao/instances/mirrors">https://cr.console.aliyun.com/cn-qingdao/instances/mirrors</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://kolrntba.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>Linux系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>docker</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 开启 ssh 连接</title>
    <url>/2023/01/18/summary/Linux%E7%B3%BB%E7%BB%9F/Ubuntu/Ubuntu%20%E5%BC%80%E5%90%AF%20ssh%20%E8%BF%9E%E6%8E%A5/</url>
    <content><![CDATA[<p>如果apt没有更新，先更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<p>安装ssh服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server</span><br></pre></td></tr></table></figure>

<p>启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/etc/init.d/ssh start</span><br></pre></td></tr></table></figure>

<p>查看是否启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -tlp</span><br><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果没有安装，先 sudo apt-get install net-tools</p>
</blockquote>
<p>开启root登录权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>PermitRootLogin <strong>yes</strong></p>
<p>PubkeyAuthentication yes # 支持公钥验证</p>
<p>AuthorizedKeysFile .ssh&#x2F;authorized_keys # 公钥的文件路径</p>
<blockquote>
<p>如果没有安装，先 sudo apt-get install vim</p>
</blockquote>
<p>将需要远程连接的电脑的pub公钥放到服务器的 authorized_keys 中即可通过 ssh 连接。如果没有设置 ssh 密钥，也可以通过输入密码进入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh [username]@[ipaddress]</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果失效可能是权限问题<br>chmod 700 ~&#x2F;.ssh<br>chmod 600 ~&#x2F;.ssh&#x2F;authorized_keys</p>
</blockquote>
]]></content>
      <categories>
        <category>汇总</category>
        <category>Linux系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>ssh</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 系统装机配置指南</title>
    <url>/2024/03/23/summary/Linux%E7%B3%BB%E7%BB%9F/Ubuntu/Ubuntu%20%E7%B3%BB%E7%BB%9F%E8%A3%85%E6%9C%BA%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="创建用户并提供-sudo-权限"><a href="#创建用户并提供-sudo-权限" class="headerlink" title="创建用户并提供 sudo 权限"></a>创建用户并提供 sudo 权限</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser avan</span><br><span class="line"></span><br><span class="line">usermod -aG <span class="built_in">sudo</span> avan</span><br></pre></td></tr></table></figure>

<h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><p>官方参考地址: <a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p>
<p>使用 root 账号安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install ca-certificates curl gnupg</span><br><span class="line">install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line"><span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br><span class="line"></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<h1 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h1><p>[下载 docker-compose 包](![[Pasted image 20240117133420.png]])</p>
<p>通过 scp 上传到服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp docker-compose-linux-x86_64 用户名@服务器ip:/home/用户名</span><br></pre></td></tr></table></figure>

<p>使用 root 账号进入服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /home/用户名/docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇总</category>
        <category>Linux系统</category>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>汇总</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
</search>
