<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DOM事件模型</title>
    <url>/2020/06/04/DOM%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、事件捕获与事件冒泡"><a href="#一、事件捕获与事件冒泡" class="headerlink" title="一、事件捕获与事件冒泡"></a>一、事件捕获与事件冒泡</h2><p>事件的捕获和冒泡，分别由微软和网景提出。他们分别决定了事件发生顺序的问题。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果在上面的代码中，outer盒子与inner按钮，分别绑定了一个点击事件。那么他们的执行顺序应该是怎么样呢？</p>
<h3 id="1、事件捕获"><a href="#1、事件捕获" class="headerlink" title="1、事件捕获"></a>1、事件捕获</h3><p>事件捕获的顺序是由外到内，从最外面的元素开始检测。如果监听到有事件，则开始执行。</p>
<p>执行顺序为 outer &#x3D;&#x3D;&gt; inner</p>
<h3 id="2、事件冒泡"><a href="#2、事件冒泡" class="headerlink" title="2、事件冒泡"></a>2、事件冒泡</h3><p>事件冒泡顺序与事件捕获相反，它是从最里面的元素开始往外检测，检测到有事件的话就开始执行事件。</p>
<p>执行顺序为 inner &#x3D;&#x3D;&gt; outer</p>
<h3 id="3、W3C规范"><a href="#3、W3C规范" class="headerlink" title="3、W3C规范"></a>3、W3C规范</h3><p>在网景和微软的冲突后。W3C开始介入，并将两者合并在一起。</p>
<p>规范为： 先捕获在冒泡</p>
<h3 id="4、addEventistener-的第三个参数"><a href="#4、addEventistener-的第三个参数" class="headerlink" title="4、addEventistener 的第三个参数"></a>4、addEventistener 的第三个参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.<span class="title function_">addEventListener</span>(event, <span class="keyword">function</span>, useCapture)</span><br></pre></td></tr></table></figure>

<p>在监听函数中，第一个为事件，第二个为执行的函数，第三个为是否冒泡</p>
<h3 id="5、target和currentTarget的区别"><a href="#5、target和currentTarget的区别" class="headerlink" title="5、target和currentTarget的区别"></a>5、target和currentTarget的区别</h3><p>e.target 指向的是被触发的元素</p>
<p>e.currentTarget 指向的是被监听的元素</p>
<blockquote>
<p>this 就是 currentTarget</p>
</blockquote>
<h3 id="6、取消冒泡"><a href="#6、取消冒泡" class="headerlink" title="6、取消冒泡"></a>6、取消冒泡</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>()</span><br></pre></td></tr></table></figure>

<h2 id="二、自定义事件"><a href="#二、自定义事件" class="headerlink" title="二、自定义事件"></a>二、自定义事件</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建自定义事件</span></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">&#x27;hi&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">info</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;lyw&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;,</span><br><span class="line">        <span class="attr">bubbles</span>: <span class="literal">true</span>, <span class="comment">// 是否冒泡</span></span><br><span class="line">        <span class="attr">cancelable</span>: <span class="literal">false</span> <span class="comment">// 是否可以取消冒泡</span></span><br><span class="line">    &#125;)</span><br><span class="line">    element.<span class="title function_">dispatchEvent</span>(event)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用自定义事件</span></span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&#x27;lyw&#x27;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">name</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew安装及配置</title>
    <url>/2020/07/11/Homebrew%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>选择下载源，这里推荐选择 中科大，输入 1</p>
<p>接着更新brew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>brew cask install 软件名1 软件名2 软件名3</code> 安装软件<br><code>brew cask search [关键词]</code> 列出所有可以安装的软件<br><code>brew cask uninstall 软件名</code> 卸载软件<br><code>brew install 环境1 环境2 环境3</code> 安装环境<br><code>brew search [关键词]</code> 列出所有可以安装的环境<br><code>brew uninstall 环境名</code> 卸载环境<br><code>brew cask info 软件名</code> 查看相关软件的信息<br><code>brew info 环境名</code> 查看相关环境的信息<br><code>brew cask cleanup</code> 删除Homebrew下载的包<br><code>brew cask list</code> 列出Homebrew安装的包<br><code>brew cask update</code> 更新Homebrew Cask</p>
<h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>安装Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<p>安装curl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install curl</span><br></pre></td></tr></table></figure>

<p>安装openssl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure>

<p>安装node</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>

<p>安装yarn</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install yarn</span><br></pre></td></tr></table></figure>

<p>安装chrome软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew cask install chrome</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>homebrew</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数setTimeout的小细节</title>
    <url>/2020/03/19/JS%E5%87%BD%E6%95%B0setTimeout%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<p>首先看一个代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上的代码看起来只是简单的for循环输出i的值。但是当你运行上面代码，你会发现，竟然输出了6个6。</p>
<p>那么我们开始分析这个过程。<br>setTimeout是个计时函数，后面的0代表着0毫秒后执行。<br>我们简单的可以理解为，它是等一下才执行。那么这个等一下是多久呢。<br>我们先运行一下正常的for循环consloe一下数值i</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过测试，你会发现他正常的输出了0~5的数值。那么6怎么来的呢？<br>经过思考可以猜到。for最后一次循环，他判断5&lt;6符合条件，他就执行了后面的i++。所以for循环的值最后变成了6。<br>那么我们知道了6是for循环结束后才出现的。我们可以得出结论</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里面的setTimeout他会等for循环运行完后才运行自身的代码。</p>
<p>为了解决这种尴尬的问题，我们可以使用下面两种方法来实现每次循环都正常执行setTimeout。</p>
<p>方法1:</p>
<p>在for循环内添加一个变量，来接收每次for循环的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> j = i</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(j)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法2:<br>在for里面声明变量i</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript的出现</title>
    <url>/2020/05/12/JavaScript%E7%9A%84%E5%87%BA%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="一、JavaScript的简述"><a href="#一、JavaScript的简述" class="headerlink" title="一、JavaScript的简述"></a>一、JavaScript的简述</h2><h3 id="1-JavaScript的发明者"><a href="#1-JavaScript的发明者" class="headerlink" title="1. JavaScript的发明者"></a>1. JavaScript的发明者</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/5/12/17209601958d9933~tplv-t2oaga2asx-image.image"></p>
<p>布兰登·艾克（英语：Brendan Eich，1961年7月4日－），美国程序技术专家与企业家，JavaScript主要创造者与架构师，曾任Mozilla公司的首席技术官，并曾短暂担任首席执行官。</p>
<h3 id="2-什么是JavaScript"><a href="#2-什么是JavaScript" class="headerlink" title="2. 什么是JavaScript"></a>2. 什么是JavaScript</h3><p>JavaScript（缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象编程，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I&#x2F;O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。</p>
<h2 id="二、JavaScript的发展"><a href="#二、JavaScript的发展" class="headerlink" title="二、JavaScript的发展"></a>二、JavaScript的发展</h2><h3 id="1-JavaScript的出现"><a href="#1-JavaScript的出现" class="headerlink" title="1. JavaScript的出现"></a>1. JavaScript的出现</h3><ul>
<li><p>1993年 伊利诺伊大学厄巴纳-尚佩恩分校的国家超级电脑应用中心（NCSA）发表了最早流行的图形接口网页浏览器 NCSA Mosaic</p>
</li>
<li><p>1995年 Mosaic Communications公司在加州芒廷维尤成立，并开始招大量NCSA Mosaic的开发者开发Mosaic Netscape</p>
</li>
<li><p>1994年 发布第一版Mosaic Netscape 0.9网页浏览器，并在4个月占据四分之三的浏览器市场，为避免版权问题，改名为Netscape Navigator浏览器</p>
</li>
<li><p>1995年，网景招募布兰登·艾克，将Scheme嵌入到浏览器中，在5月花了10天设计出原型最初命名Mocha。在9月将Netscape Navigator 2.0的Beta版改名为LiveScript。最终在12月为了蹭“Java”热度，将名字改为了JavaScript</p>
</li>
</ul>
<h3 id="2-JScript的出现"><a href="#2-JScript的出现" class="headerlink" title="2. JScript的出现"></a>2. JScript的出现</h3><p>JavaScript在出现后再浏览器大受好评，微软紧接着在退出JScript。由于JScript是JavaScript的shii这两个版本的存在意味着没有正式的语言标准</p>
<h3 id="3-JavaScript标准化"><a href="#3-JavaScript标准化" class="headerlink" title="3. JavaScript标准化"></a>3. JavaScript标准化</h3><ul>
<li><p>1996年11月 网景向ECMA提交语言标准</p>
</li>
<li><p>1997年6月 ECMA以JavaScript语言为基础指定ECMAScript标准规范</p>
</li>
</ul>
<h2 id="三、JavaScript设计不够完善"><a href="#三、JavaScript设计不够完善" class="headerlink" title="三、JavaScript设计不够完善"></a>三、JavaScript设计不够完善</h2><ol>
<li>设计过于仓促<br>JavaScript是在作者急于给公司交差的情况下用了10天的设计出来。</li>
<li>没有先例<br>JavaScript结合了函数式编程和面向对象编程的特点，直至今日仍是使用Prototype继承的主要语言。使它没有别的设计可以参考。</li>
<li>过早的标准化<br>由于JavaScript发展过快，根本没时间调整设计</li>
</ol>
<blockquote>
<p>具体请看原文<br><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html</a></p>
</blockquote>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://zh.wikipedia.org/wiki/JavaScript#%E5%8E%86%E5%8F%B2">JavaScript维基百科</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">JavaScript的诞生</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html">JavaScript 的10个设计缺陷</a></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript预解析</title>
    <url>/2020/05/15/JavaScript%E9%A2%84%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><p>JavaScript引擎运行时，分两步</p>
<ol>
<li>预解析<br>JavaScript会将 var 和 function 优先解析<ul>
<li>变量提升<br>只提升变量，不提升赋值</li>
<li>函数提升<br>只提升声明，不调用函数</li>
</ul>
</li>
<li>代码执行<br>预解析结束后，按代码从上往下执行</li>
</ol>
<blockquote>
<p>函数内部变量如果没有声明，直接赋值。则为全局变量</p>
</blockquote>
<h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    num = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> = num</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> num</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">    num = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">18</span></span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行过程是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    b = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    a = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="title function_">f1</span>()</span><br></pre></td></tr></table></figure>

<h3 id="测试4"><a href="#测试4" class="headerlink" title="测试4"></a>测试4</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line">报错</span><br></pre></td></tr></table></figure>

<p>解析：<br>它的执行结果为</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a </span><br><span class="line">    a = <span class="number">9</span></span><br><span class="line">    b = <span class="number">9</span></span><br><span class="line">    c = <span class="number">9</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Nuxt3 中使用 pnpm 安装的 NuxtImg 使用会提示找不到图片</title>
    <url>/2025/06/29/Nuxt3%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20pnpm%20%E5%AE%89%E8%A3%85%E7%9A%84%20NuxtImg%20%E4%BD%BF%E7%94%A8%E4%BC%9A%E6%8F%90%E7%A4%BA%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p><img src="https://qinius.easyhappy.top/avan/202506111712538.png" alt="image.png"></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h2><p>在一个全新的 Nuxt 3 项目中，我打算像往常一样直接写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtImg src=&quot;/images/logo.png&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>然而页面报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http://localhost:3000/_ipx/_/images/logo.png 500 (Internal Server Error)</span><br></pre></td></tr></table></figure>

<p>猜测这一错误常见于 <strong>IPX</strong> （Nuxt 默认的本地图片处理服务）无法正常工作或缺少二进制依赖，如 sharp 等。</p>
<h2 id="问题复现与初步排查"><a href="#问题复现与初步排查" class="headerlink" title="问题复现与初步排查"></a><strong>问题复现与初步排查</strong></h2><ol>
<li><p><strong>确认官方文档</strong></p>
<p> Nuxt Image 文档并未提到需要额外配置即可本地使用。</p>
</li>
<li><p><strong>定位到 IPX</strong></p>
<p> 查看 Nuxt Image 的默认 provider，可见如果未显式配置，Nuxt 会自动启用 IPX。</p>
</li>
<li><p><strong>搜索社区反馈</strong></p>
<p> 多位开发者在 GitHub 上反馈升级或安装时出现「IPX 500」或「sharp 模块缺失」问题，且大多与包版本或二进制构建方式有关。</p>
</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h2><h3 id="步骤一：锁定-IPX-版本"><a href="#步骤一：锁定-IPX-版本" class="headerlink" title="步骤一：锁定 IPX 版本"></a><strong>步骤一：锁定 IPX 版本</strong></h3><p>在 package.json 中新增（或合并）以下字段，强制 pnpm 使用 ipx@^3.0.0：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;pnpm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ipx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>内心OS: 估计是版本 3 已默认内置预编译好的 sharp 二进制，避免了跨平台自行编译失败的问题。</p>
<h3 id="步骤二：重新安装依赖并启动"><a href="#步骤二：重新安装依赖并启动" class="headerlink" title="步骤二：重新安装依赖并启动"></a><strong>步骤二：重新安装依赖并启动</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install</span><br><span class="line">pnpm dev</span><br></pre></td></tr></table></figure>

<p>此时刷新页面，&#x2F;<em>ipx&#x2F;</em> 路径应能正确返回处理后的图片。  </p>
<h2 id="为什么-pnpm-会「漏装」或装错-IPX？"><a href="#为什么-pnpm-会「漏装」或装错-IPX？" class="headerlink" title="为什么 pnpm 会「漏装」或装错 IPX？"></a><strong>为什么 pnpm 会「漏装」或装错 IPX？</strong></h2><ul>
<li><strong>严格的依赖隔离</strong>：pnpm 以硬链接 + 独立虚拟 store 机制保存依赖，若某深层模块声明的版本范围与项目锁文件冲突，可能被解析为旧版。</li>
<li><strong>可选依赖</strong>：IPX 及其 sharp 本身属于可选依赖；当安装时遇到编译失败，pnpm 会跳过而不抛错，导致运行期才暴露 500。</li>
<li><strong>overrides 的作用</strong>：显式声明 overrides 可让 pnpm「顶置」该版本，强制一致，避免多版本并存。</li>
</ul>
<h2 id="完整代码示例"><a href="#完整代码示例" class="headerlink" title="完整代码示例"></a><strong>完整代码示例</strong></h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json（节选）</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nuxt-img-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@nuxt/image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pnpm&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;overrides&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ipx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- pages/index.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;NuxtImg src=&quot;/images/logo.png&quot; width=&quot;200&quot; height=&quot;200&quot; placeholder /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><ul>
<li>Nuxt 3 里 <NuxtImg> 默认依赖 IPX；IPX 依赖 sharp。 </li>
<li>当 IPX 版本不兼容或二进制缺失时，会抛出「500 – IPX Error」。  </li>
<li>在 <strong>pnpm</strong> 项目中，可通过 pnpm.overrides 强制锁定 ipx@^3.0.0，再重新安装即可快速修复。</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>如何&quot;下班&quot;时间在开源社区提交代码不留下把柄</title>
    <url>/2025/06/29/TODO-%E5%A6%82%E4%BD%95%22%E4%B8%8B%E7%8F%AD%22%E6%97%B6%E9%97%B4%E5%9C%A8%E5%BC%80%E6%BA%90%E7%A4%BE%E5%8C%BA%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E4%B8%8D%E7%95%99%E4%B8%8B%E6%8A%8A%E6%9F%84/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你是在因为害怕 github 的 commit 提交时间是在某个时间段, 并害怕被某些人发现.</p>
<p>恭喜你, 你可能跟我考虑的是一个问题.</p>
<p>通过下面的脚本(ChatGPT 提供), 将 commit 的时间调整至(18:00&#x2F;19:00) 后.</p>
<blockquote>
<p>建议 19:00, 18:00 左右的时间容易存在争议</p>
</blockquote>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h2 id="Uni"><a href="#Uni" class="headerlink" title="Uni"></a>Uni</h2>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>开源</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode中使用Cmder及一些简单命令</title>
    <url>/2020/02/12/VScode%E4%B8%AD%E4%BD%BF%E7%94%A8Cmder%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ol>
<li>安装了VScode</li>
<li>安装了Cmder<br>要是没有安装，可以看前两篇文章<br><a href="https://www.jianshu.com/p/ebb9af006e25">前端小白-简单配置VScode及常用快捷键</a><br><a href="https://www.jianshu.com/p/050943776aea">前端小白-Windows下安装Cmder及配置&amp;设置系统右键菜单</a></li>
</ol>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>打开VScode，使用快捷键 <code>Ctrl + Shift + P</code> 输入“settings json”点击“首选项：打开设置（json）”，注意这里是没有“默认”两个字。<br><img src="https://qinius.easyhappy.top/avan/202506291721368.png" alt="image.png"></p>
<p>随便找一行（只要不是最后一行）的逗号后面回车，输入下面代码（<a href="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration#use-cmder-embedded-git-in-vscode">原贴</a>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;git.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]\\vendor\\git-for-windows\\cmd\\git.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]\\vendor\\git-for-windows\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<p>注意里面的[cmder_root]换成你Cmder的根目录路径，并且将单斜杠改为双斜杠。如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;git.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;git.path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programme\\cmder\\vendor\\git-for-windows\\cmd\\git.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;D:\\Programme\\cmder\\vendor\\git-for-windows\\bin\\bash.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>



<p><img src="https://qinius.easyhappy.top/avan/202506291722740.png" alt="image.png"></p>
<p>然后 <code>Ctrl + S</code> 保存退出，关闭终端重新打开，即可<br><img src="https://qinius.easyhappy.top/avan/202506291723112.png" alt="image.png"></p>
<h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode的Git本地仓库的配置</title>
    <url>/2020/02/12/VScode%E7%9A%84Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<ul>
<li>前置条件</li>
<li>配置命令</li>
<li>一些常用指令</li>
</ul>
<h2 id="一、前置条件"><a href="#一、前置条件" class="headerlink" title="一、前置条件"></a>一、前置条件</h2><ol>
<li>安装了VScode，并且配配置了环境变量</li>
<li>安装了git环境</li>
</ol>
<h2 id="二、配置指令"><a href="#二、配置指令" class="headerlink" title="二、配置指令"></a>二、配置指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name 你的英文名</span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;code --wait&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>



<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name Layouwen</span><br><span class="line">git config --global user.email Layouwen@gmail.com</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;code --wait&quot;</span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure>



<p>以上六条命令运行后，输入 <code>git config --global --list</code> 查看配置有没有输错。<br><img src="https://qinius.easyhappy.top/avan/202506291903853.png" alt="image.png"></p>
<p>配置好后，就可以使用git的指令了</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 初始化创建一个.git目录</span><br><span class="line">git inte  </span><br><span class="line"></span><br><span class="line">// 添加需要备份的文件</span><br><span class="line">git add .  </span><br><span class="line"></span><br><span class="line">// 开始备份</span><br><span class="line">git commit -m &quot;备注&quot;  </span><br><span class="line"></span><br><span class="line">// 查看备份记录</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line">// 回滚之前版本</span><br><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>博客</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中的.sync修饰符的理解</title>
    <url>/2020/03/22/Vue%E4%B8%AD%E7%9A%84.sync%E4%BF%AE%E9%A5%B0%E7%AC%A6%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>准备2个文件：Main.vue、Child.vue</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="- 代码"></a>- 代码</h3><p>Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;border&quot;&gt;</span><br><span class="line">    总金额：&#123;&#123;total&#125;&#125; 元</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Child :money=&quot;total&quot; v-on:update:money=&quot;total = $event&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; total: 10000 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child: Child &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.border &#123;</span><br><span class="line">  border: 3px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Child.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;$emit(&#x27;update:money&#x27;, money-100)&quot;&gt;</span><br><span class="line">      &lt;span&gt;花钱&lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;money&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.child &#123;</span><br><span class="line">  border: 3px solid pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>Main.vue用外部表示</p>
<p>Child.vue用内部表示</p>
<p><code>外部</code> 将total的值，赋值给money，然后 <code>内部</code> 通过props接收了money的值。当button触发click时，会使用$emit将money-100发送给 <code>外部</code> 。接着 <code>外部</code> 通过v-on接收了数据，并将money-100的结果，赋值给total。然后将total的值显示在div标签中。从而实现对数据的修改。</p>
<h3 id="sync修饰符的出现"><a href="#sync修饰符的出现" class="headerlink" title=".sync修饰符的出现"></a>.sync修饰符的出现</h3><p>尤雨溪发现这种操作挺常用的，就为这种行为进行了一个简化。</p>
<p>将 <code>&lt;Child :money=&quot;total&quot; v-on:update:money=&quot;total = $event&quot;/&gt;</code> 简化为 <code>&lt;Child :money.sync=&quot;total&quot;&gt;</code> 通过使用.sync修饰符来实现上面一整局话的效果。</p>
<p>Main.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;border&quot;&gt;</span><br><span class="line">    总金额：&#123;&#123;total&#125;&#125; 元</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;Child :money.sync=&quot;total&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from &quot;./Child.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123; total: 5000 &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; Child: Child &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.border &#123;</span><br><span class="line">  border: 3px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p>.sync简单来说就是，监听是否有人修改本地的数据，如果有的话就对本地数据进行一个修改。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack loader 和 Webpack plugin 区别</title>
    <url>/2020/03/17/Webpack%20loader%20%E5%92%8C%20Webpack%20plugin%20%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>思路</li>
<li>回答</li>
</ul>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p><font style="color:#333333;">所有问两个的区别都是，英文翻译成中文+对翻译的解释+举例子</font></p>
<p><font style="color:#333333;"></font></p>
<h2 id="二、回答"><a href="#二、回答" class="headerlink" title="二、回答"></a>二、回答</h2><h3 id="将英文翻译"><a href="#将英文翻译" class="headerlink" title="- 将英文翻译"></a>- 将英文翻译</h3><p>loader是一个加载器</p>
<p>plugin是一个插件</p>
<h3 id="对翻译解释"><a href="#对翻译解释" class="headerlink" title="- 对翻译解释"></a>- 对翻译解释</h3><ol>
<li><p>loader 加载器 是用来用来load一个个文件的，比如说：<br>babel loader 用来加载高级的js，变成低版本浏览器支持的js文件<br>style loader 和 css loader 是用来加载 css，变成页面中style标签<br>还可以加载图片文件，对图片文件进行一些优化</p>
</li>
<li><p>插件 是用来加强功能，比如说：<br>HtmlWebpackPlugin 用来单独自动生成 html页面，这个插件可以自己指定一个模板，根据模板内容来进行生成<br>MiniCssExtractPlugin 用来将loader加载器 加载的style标签单独提取出来，变成一个css文件</p>
</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下安装Cmder及配置&amp;设置系统右键菜单</title>
    <url>/2020/02/12/Windows%20%E4%B8%8B%E5%AE%89%E8%A3%85Cmder%E5%8F%8A%E9%85%8D%E7%BD%AE&amp;%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/</url>
    <content><![CDATA[<h1 id="下载Cmder"><a href="#下载Cmder" class="headerlink" title="下载Cmder"></a>下载Cmder</h1><p>Cmder的官网 <a href="https://cmder.net/">https://cmder.net/</a><br>Cmder的GitHub下载链接 <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/11276147/eb0e7b00-3262-11ea-8f83-c17cae9b8b2c?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20200210/us-east-1/s3/aws4_request&X-Amz-Date=20200210T075928Z&X-Amz-Expires=300&X-Amz-Signature=9a1d570c489bd1abcc9dd2ceb57e9f965ca8e7adecd4a8f795332c2c035f68e8&X-Amz-SignedHeaders=host&actor_id=60692794&response-content-disposition=attachment;%20filename=cmder.zip&response-content-type=application/octet-stream">点击这里</a></p>
<h1 id="安装Cmder"><a href="#安装Cmder" class="headerlink" title="安装Cmder"></a>安装Cmder</h1><p>直接解压到文件夹下，打开目录下的 Cmder.exe 即可运行<br><img src="https://qinius.easyhappy.top/avan/202506291713700.png" alt="image.png"></p>
<h1 id="简单的配置Cmder"><a href="#简单的配置Cmder" class="headerlink" title="简单的配置Cmder"></a>简单的配置Cmder</h1><ol>
<li><p>在右下角 鼠标右键 打开设置<br><img src="https://qinius.easyhappy.top/avan/202506291713456.png" alt="image.png"></p>
</li>
<li><p>设置语言为中文<br><img src="https://qinius.easyhappy.top/avan/202506291714820.png" alt="image.png"></p>
</li>
<li><p>把这三个打上勾<br><img src="https://qinius.easyhappy.top/avan/202506291714823.png" alt="image.png"></p>
</li>
<li><p>在设置左边点击 大小&amp;位置 ，按下方图片的数据来设置（可以自己设置）<br><img src="https://qinius.easyhappy.top/avan/202506291714801.png" alt="image.png"></p>
</li>
<li><p>单击保存设置<br><img src="https://qinius.easyhappy.top/avan/202506291714047.png" alt="image.png"></p>
</li>
</ol>
<p>PS：如果发现下次打开设置页面，又恢复成中文则进行一下操作</p>
<ol>
<li><p>再次打开设置，点击导出，右键 ConEmu.xml 文件点击编辑<br><img src="https://qinius.easyhappy.top/avan/202506291715652.png" alt="image.png"></p>
</li>
<li><p>在新打开的记事本中，按 <code>Ctrl + F</code> 搜素关键字 “Language”<br><img src="https://qinius.easyhappy.top/avan/202506291715179.png" alt="image.png"></p>
</li>
<li><p>将后面的 en 改为 zh 然后按 <code>Ctrl + S</code> 保存退出即可。<br><img src="https://qinius.easyhappy.top/avan/202506291715659.png" alt="image.png"></p>
</li>
</ol>
<h1 id="设置鼠标移出后隐藏Cmder"><a href="#设置鼠标移出后隐藏Cmder" class="headerlink" title="设置鼠标移出后隐藏Cmder"></a>设置鼠标移出后隐藏Cmder</h1><p>在设置页面，单击右边的 Quake 风格 然后勾选下方图片的三个选项，保存设置<br><img src="https://qinius.easyhappy.top/avan/202506291715076.png" alt="image.png"></p>
<h1 id="修改呼出快捷键"><a href="#修改呼出快捷键" class="headerlink" title="修改呼出快捷键"></a>修改呼出快捷键</h1><p>在设置页面，单击右边的 通用 然后按下方图片位置，自定义快捷键，我是 <code>Alt + 1</code><br><img src="https://qinius.easyhappy.top/avan/202506291715566.png" alt="image.png"></p>
<h1 id="设置默认bash启动"><a href="#设置默认bash启动" class="headerlink" title="设置默认bash启动"></a>设置默认bash启动</h1><p>在设置页面，单击右边的 启动 然后按下方图片位置进行设置<br><img src="https://qinius.easyhappy.top/avan/202506291716676.png" alt="image.png"></p>
<h1 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h1><p>在设置页面，单击右边的 按键&amp;宏 即可自定义快捷键<br><img src="https://qinius.easyhappy.top/avan/202506291716515.png" alt="image.png"></p>
<h1 id="设置bash启动目录"><a href="#设置bash启动目录" class="headerlink" title="设置bash启动目录"></a>设置bash启动目录</h1><p>在设计页面。单击右边的 启动，单击 任务 ，然后进行下面图片的设置即可<br><img src="https://qinius.easyhappy.top/avan/202506291716056.png" alt="image.png"></p>
<h1 id="设置Cmder系统右键菜单"><a href="#设置Cmder系统右键菜单" class="headerlink" title="设置Cmder系统右键菜单"></a>设置Cmder系统右键菜单</h1><ol>
<li>将Cmder根目录路径，复制到系统 环境变量 中。<br><img src="https://qinius.easyhappy.top/avan/202506291716190.png" alt="image.png"></li>
</ol>
<p><img src="https://qinius.easyhappy.top/avan/202506291717488.png" alt="image.png"></p>
<ol start="2">
<li>打开 运行 窗口 <code>Ctrl + R</code> 输入“cmd”回车<br><img src="https://qinius.easyhappy.top/avan/202506291717490.png" alt="image.png"></li>
</ol>
<p>然后在新弹出来的窗口中输入 <code>cmder /register all</code> 后回车即可<br><img src="https://qinius.easyhappy.top/avan/202506291717221.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>cmder</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下安装Node.js和yarn</title>
    <url>/2020/02/12/Windows%20%E4%B8%8B%E5%AE%89%E8%A3%85Node.js%E5%92%8Cyarn/</url>
    <content><![CDATA[<h1 id="一、Node-js部分"><a href="#一、Node-js部分" class="headerlink" title="一、Node.js部分"></a>一、Node.js部分</h1><ul>
<li>下载Node.js</li>
</ul>
<p>Node.js官网 <a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p>
<p>Node.js下载链接 <a href="https://nodejs.org/dist/latest-v10.x/node-v10.19.0-x64.msi">https://nodejs.org/dist/latest-v10.x/node-v10.19.0-x64.msi</a></p>
<ul>
<li>##安装Node.js</li>
</ul>
<p>下载后，双击运行文件，一直点 Next 就可以了。如果想改目录可以自行跟改<br><img src="https://qinius.easyhappy.top/avan/202506291725117.png" alt="image.png"></p>
<ul>
<li>测试是否安装成功</li>
</ul>
<p>使用 <code>Ctrl + R</code> 打卡 运行 窗口，输入“cmd”回车进入 命令行窗口。输入 <code>node --version</code> 回车、输入 <code>npm--version</code> 回车、输入 <code>npx--version</code> 回车，如果都返回版本号则安装成功。没有就重启电脑在重复以上操作。</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291725377.png" alt="image.png"></p>
<ul>
<li>配置Node.js</li>
</ul>
<p>在 命令行窗口 输入 <code>npm i -g nrm</code> 回车。下载nrm服务，这里会比较慢，耐心等他下完</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291725017.png" alt="image.png"></p>
<p>下载完后，输入 <code>nrm ls</code> 可以查看所有服务器，使用 <code>nrm use taobao</code> 使用淘宝源</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291725445.png" alt="image.png"></p>
<p>可以输入 <code>nrm i -g http-server</code> 顺便下载此服务，来测试一下速度</p>
<h1 id="二、yarn部分"><a href="#二、yarn部分" class="headerlink" title="二、yarn部分"></a>二、yarn部分</h1><ul>
<li>下载yarn</li>
</ul>
<p>yarn官网下载链接 <a href="https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable">https://classic.yarnpkg.com/zh-Hans/docs/install#windows-stable</a></p>
<ul>
<li>安装yarn</li>
</ul>
<p>同Node.js一样，无脑下一部即可。安装位置可以自己换</p>
<ul>
<li>测试是否安装成功</li>
</ul>
<p>使用 <code>Ctrl + R</code> 打卡 运行 窗口，输入“cmd”回车进入 命令行窗口。输入 <code>yarn --version</code> 回车，若返回版本号则安装成功。</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291726440.png" alt="image.png"></p>
<ul>
<li>配置yarn</li>
</ul>
<p>在命令行输入 <code>yarn global add yrm</code> 回车，等它下载完。</p>
<p>输入 <code>yrm ls</code> 回车查看目前服务器，输入 <code>yrm use taobao</code> 回车使用淘宝服务器。</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291726855.png" alt="image.png"></p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>node</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>nest 循环依赖问题</title>
    <url>/2024/11/16/nest%20%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>module 循环依赖</li>
</ol>
<p>例如 asset.module.ts &lt;-&gt; user.module.ts 循环依赖互相调用的情况, 可以通过在 import 中使用 <code>forwardRef</code> 进行延迟加载</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// asset.module.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">AssetEntity</span>]),</span><br><span class="line">    <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">UserModule</span>),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AssetController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AssetService</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">AssetService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AssetModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.module.ts</span></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">TypeOrmModule</span>.<span class="title function_">forFeature</span>([<span class="title class_">User</span>]), <span class="title function_">forwardRef</span>(<span class="function">() =&gt;</span> <span class="title class_">AssetModule</span>)],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">UserController</span>],</span><br><span class="line">  <span class="attr">exports</span>: [<span class="title class_">UserService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>service 循环依赖</li>
</ol>
<p>除了 module 会出现循环依赖, service 一样会. 一样通过 <code>forwardRef</code> 包裹即可</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// user.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; AssetService))</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">assetService</span>: <span class="title class_">AssetService</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// asset.service.ts</span></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AssetService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(forwardRef(() =&gt; UserService))</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="attr">userService</span>: <span class="title class_">UserService</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nestjs</tag>
      </tags>
  </entry>
  <entry>
    <title>nestjs websocket 配置</title>
    <url>/2024/11/16/nestjs%20websocket%20%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>src&#x2F;socket&#x2F;socket.module.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">SocketGateway</span>, <span class="title class_">SocketService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;socket&#x2F;socket.service.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketService</span> &#123;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;socket&#x2F;socket.gateway.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebSocketGateway</span>(&#123;</span><br><span class="line">  <span class="attr">cors</span>: &#123;</span><br><span class="line">    <span class="attr">origin</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SocketGateway</span> &#123;</span><br><span class="line">  <span class="meta">@WebSocketServer</span>()</span><br><span class="line">  <span class="attr">server</span>: <span class="title class_">Server</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterInit</span>(<span class="params"><span class="attr">server</span>: <span class="title class_">Server</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Socket server initialized&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SubscribeMessage</span>(<span class="string">&#x27;message&#x27;</span>)</span><br><span class="line">  <span class="title function_">handleMessage</span>(<span class="attr">client</span>: <span class="title class_">Socket</span>, <span class="attr">payload</span>: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">server</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, <span class="string">`server: <span class="subst">$&#123;<span class="built_in">JSON</span>.stirify(payload)&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>src&#x2F;app.module.ts</strong></p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [<span class="title class_">SocketModule</span>],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>nestjs</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>postgres 中断数据库的所有链接, 并重命名数据库</title>
    <url>/2024/11/16/postgres%E4%B8%AD%E6%96%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%89%80%E6%9C%89%E9%93%BE%E6%8E%A5,%20%E5%B9%B6%E9%87%8D%E5%91%BD%E5%90%8D%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker 直接管理员进入</span></span><br><span class="line">psql -U postgres</span><br><span class="line"><span class="comment"># 查看连接数</span></span><br><span class="line">SELECT COUNT(*) AS connection_count</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname = <span class="string">&#x27;数据库名字&#x27;</span>;</span><br><span class="line"><span class="comment"># 删除所有连接</span></span><br><span class="line">SELECT pg_terminate_backend(pg_stat_activity.pid)</span><br><span class="line">FROM pg_stat_activity</span><br><span class="line">WHERE datname = <span class="string">&#x27;数据库名字&#x27;</span></span><br><span class="line">  AND pid &lt;&gt; pg_backend_pid();</span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">ALTER DATABASE <span class="string">&quot;原本名字&quot;</span> rename TO <span class="string">&quot;新名字&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>timestamp 转 timestamptz 问题</title>
    <url>/2024/12/12/timestamp%20%E8%BD%AC%20timestamptz%20%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>无时区转带时区的格式的时候, 使用 sync 他会将你原本的字段删除, 重新创建一个类型为 timestamptz 的字段, 数据会完全清空.</p>
<p>建议新增一个 swaptime 字段, 将原本的 time 先转到 swaptime, 确认没问题后. 对服务器进行暂停维护, 然后开始将 time 的字段去掉, 然后将 swaptime 的名字改成 time. 重新开启服务.</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>postgres</tag>
      </tags>
  </entry>
  <entry>
    <title>《HTML常用标签》</title>
    <url>/2020/02/13/%E3%80%8AHTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE%E3%80%8B/</url>
    <content><![CDATA[<h1 id="一、a标签"><a href="#一、a标签" class="headerlink" title="一、a标签"></a>一、a标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="href属性"><a href="#href属性" class="headerlink" title="href属性"></a>href属性</h2><ul>
<li>网址<br><a href="https://google.com/">https://google.com</a><br><a href="http://google.com/">http://google.com</a><br><a href="//google.com">&#x2F;&#x2F;google.com</a></li>
<li>路径<br>&#x2F;a&#x2F;b&#x2F;c&#x2F;index.html</li>
<li>伪协议<br>javascript:代码;<br>mailto:邮箱<br>tel:手机号</li>
<li>id<br>href&#x3D;”#名字”</li>
</ul>
<h2 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h2><ul>
<li>_balnk<br>新页面打开</li>
<li>_self<br>默认页面打卡</li>
<li>_top<br>在顶层页面打开</li>
<li>_parent<br>在此页面的上一层页面打开</li>
<li>自己命名<br>windows的name<br>iframe的name</li>
</ul>
<h1 id="二、img标签"><a href="#二、img标签" class="headerlink" title="二、img标签"></a>二、img标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h2><p>相对路径<br>绝对路径<br>网址</p>
<h2 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h2><p>加载失败显示的文字</p>
<h2 id="height属性"><a href="#height属性" class="headerlink" title="height属性"></a>height属性</h2><p>图片高度</p>
<h2 id="width属性"><a href="#width属性" class="headerlink" title="width属性"></a>width属性</h2><p>图片宽度</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>onload事件<br>加载成功时执行</li>
<li>onerror事件<br>加载失败时执行</li>
</ul>
<p>##响应式<br>max-width: 100%</p>
<h1 id="三、table标签"><a href="#三、table标签" class="headerlink" title="三、table标签"></a>三、table标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="comment">&lt;!-- 表格整体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 表格头部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!-- 行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="comment">&lt;!-- 单元格 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="comment">&lt;!-- 表格底部 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="相关样式"><a href="#相关样式" class="headerlink" title="相关样式"></a>相关样式</h2><ul>
<li>table-layout<br>auto：根据单元格内容调整跨宽度<br>fixed：根据单元格内容调整宽度，并且单元格内容平均</li>
<li>border-collapse: collapse<br>合并单元格之间的间隙</li>
<li>border-spacing<br>调整单元格之间的间隙</li>
</ul>
<h1 id="四、form标签"><a href="#四、form标签" class="headerlink" title="四、form标签"></a>四、form标签</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h2><p>谁来处理提交的数据<br>如：xxx.php</p>
<h2 id="method属性"><a href="#method属性" class="headerlink" title="method属性"></a>method属性</h2><ul>
<li>get<br>表单数据会附加在 action 属性的URI中，并以 ‘?’ 作为分隔符，然后这样得到的 URI 再发送给服务器</li>
<li>post<br>表单数据会包含在表单体内然后发送给服务器</li>
</ul>
<h2 id="autocomplete属性"><a href="#autocomplete属性" class="headerlink" title="autocomplete属性"></a>autocomplete属性</h2><ul>
<li>on<br>打开自动填充</li>
<li>off<br>关闭自动填充</li>
</ul>
<h2 id="target属性-1"><a href="#target属性-1" class="headerlink" title="target属性"></a>target属性</h2><p>用来指示在提交表单之后，在哪里显示收到的回复</p>
<ul>
<li>_blank<br>新页面</li>
<li>_self<br>当前页面</li>
<li>windows或iframe的name<br>程序猿自定义窗口名字接收</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>两种盒模型的区别</title>
    <url>/2020/04/29/%E4%B8%A4%E7%A7%8D%E7%9B%92%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="一、盒模型种类"><a href="#一、盒模型种类" class="headerlink" title="一、盒模型种类"></a>一、盒模型种类</h2><ol>
<li>content-box 内容盒模型</li>
<li>border-box 边框盒模型</li>
</ol>
<h2 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h2><h3 id="content-box"><a href="#content-box" class="headerlink" title="content-box"></a>content-box</h3><p>盒模型的宽度为width的宽度<br>公式为： width &#x3D; 内容宽度</p>
<h3 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a>border-box</h3><p>边框模型的宽度为内容的宽度，加上内边距的宽度，再加上边框的宽度<br>公式为： width &#x3D; 内容的宽度 + padding + border</p>
<h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul>
<li>盒模型在定义width宽度后，后面写padding和border是会改变盒子实际大小。如果需要保持固定大小，需要进行计算。</li>
<li>边框模型在定义width宽度后，不管怎么写padding和border宽度都固定在书写时的width。但是有可能导致内容被压缩，导致布局异常。</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>事件委托</title>
    <url>/2020/06/04/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    <content><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>事件委托，用白话来讲就是将事件监听交给自己的祖先元素进行处理。</p>
<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>事件委托的实现是根据事件冒泡实现的,利用事件冒泡的特性。对于父元素使用事件监听，当父盒子里面的某个元素被触发时，向上冒泡，触发父元素的事件。利用 <code>target</code> 后去触发冒泡事件的元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>one<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>two<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>four<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> domUl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#father&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    domUl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span>.<span class="title function_">toLowerCase</span>() == <span class="string">&#x27;li&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过 <code>target</code> 下的 <code>nodeName</code> 属性判断。是否是我们需要监听的元素。</p>
<h2 id="三、优点"><a href="#三、优点" class="headerlink" title="三、优点"></a>三、优点</h2><ul>
<li>可以节省大量内存</li>
<li>可以监听动态元素</li>
</ul>
<blockquote>
<p>注意：事件委托需要依赖事件冒泡，如果不支持事件冒泡的元素没办法使用事件委托。</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>homebrew</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码习惯</title>
    <url>/2024/11/16/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>文件夹采用大驼峰命名 例如 <code>HelloWorld</code></p>
<p>组件名采用大驼峰命名 例如 <code>HelloWorld.tsx</code></p>
<p>入口文件统一命名为 <code>index.ts</code>, 统一导出</p>
<h1 id="Api-管理"><a href="#Api-管理" class="headerlink" title="Api 管理"></a>Api 管理</h1><h2 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h2><p>在 <code>api/index.ts</code> 中统一导出</p>
<p>根据服务区分文件 <code>api/user.ts</code></p>
<p>接口函数名采用小驼峰命名 例如 <code>getUserInfoApi</code></p>
<p>函数入参命名</p>
<p>params 使用 <code>IGetUserInfoApiParams</code></p>
<p>data 使用 <code>IGetUserInfoApiData</code></p>
<p>query 使用 <code>IGetUserInfoApiQuery</code></p>
<p>返回值使用 <code>IGetUserInfoApiResult</code></p>
<h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>请求钩子命名 use + 请求方式 + 接口路径 + Query, <code>useGetUserInfoQuery</code></p>
<h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useQuery &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; $API_NAME_CASE$ApiParams &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; $API_NAME$Api &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isSuccessApi &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> use$API_NAME_CASE$QueryQueryKey = <span class="string">&#x27;use$API_NAME_CASE$Query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">use$API_NAME_CASE$Query</span>(<span class="params"><span class="attr">options</span>?: &#123;</span></span><br><span class="line"><span class="params">  params?: $API_NAME_CASE$ApiParams;</span></span><br><span class="line"><span class="params">  options?: &#123;</span></span><br><span class="line"><span class="params">    enabled?: <span class="built_in">boolean</span>;</span></span><br><span class="line"><span class="params">  &#125;;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: response, ...rest &#125; = <span class="title function_">useQuery</span>(&#123;</span><br><span class="line">    <span class="attr">queryFn</span>: <span class="function">(<span class="params">&#123; queryKey &#125;</span>) =&gt;</span> $API_NAME$Api(queryKey[<span class="number">1</span>]),</span><br><span class="line">    <span class="attr">queryKey</span>: [use$API_NAME_CASE$QueryQueryKey, options?.<span class="property">params</span>] <span class="keyword">as</span> <span class="keyword">const</span>,</span><br><span class="line">    ...options?.<span class="property">options</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> data = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isSuccessApi</span>(response)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">  &#125;, [response]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    response,</span><br><span class="line">    data,</span><br><span class="line">    ...rest,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMutation &#125; <span class="keyword">from</span> <span class="string">&#x27;@tanstack/react-query&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; $API_NAME$Api &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; queryClient &#125; <span class="keyword">from</span> <span class="string">&#x27;@/main&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useGet$GET_API_NAME$QueryQueryKey &#125; <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useGet$GET_API_NAME_CASE$Query&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">use$API_NAME_CASE$Mutation</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; mutateAsync, ...rest &#125; = <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: $API_NAME$Api,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">void</span> queryClient.<span class="title function_">invalidateQueries</span>(&#123;</span><br><span class="line">        <span class="attr">queryKey</span>: [useGet$GET_API_NAME_CASE$QueryQueryKey],</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    mutateAsync,</span><br><span class="line">    &#123;</span><br><span class="line">      ...rest,</span><br><span class="line">    &#125;,</span><br><span class="line">  ] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>…待补充</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>使用脚本文件辅助开发</title>
    <url>/2020/04/06/%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E8%BE%85%E5%8A%A9%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h2 id="一、组合语句"><a href="#一、组合语句" class="headerlink" title="一、组合语句"></a>一、组合语句</h2><p>使用 <code>&amp;&amp;</code> 当上一条指令成功才执行下一条指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touchu 1.txt &amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;成功&#x27;</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>;</code> ，同时执行两条指令，不管是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span> 2.txt; <span class="built_in">echo</span> <span class="string">&#x27;我不管是否成功&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、使用脚本完成快捷操作"><a href="#二、使用脚本完成快捷操作" class="headerlink" title="二、使用脚本完成快捷操作"></a>二、使用脚本完成快捷操作</h2><h3 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h3><ul>
<li>创建脚本文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>打开脚本文件，你可以直接用记事本打开，或者Vim打开，这里使用VScode打开</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>编辑文件，写入下面内容至脚本文件中</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> a</span><br><span class="line"><span class="built_in">cd</span> a</span><br><span class="line"><span class="built_in">touch</span> index.html</span><br><span class="line"><span class="built_in">touch</span> style.css</span><br><span class="line"><span class="built_in">touch</span> main.js</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&lt;h1&gt;我是例子&lt;/h1&gt;&quot;</span> &gt;&gt; index.html</span><br></pre></td></tr></table></figure>
<ul>
<li>添加权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>使用脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./我是脚本</span><br></pre></td></tr></table></figure>

<h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><ul>
<li>跟上面一样，升级为自定义参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> 我是脚本2</span><br><span class="line">code 我是脚本2</span><br></pre></td></tr></table></figure>
<ul>
<li>稍微改一下，将原本指定的名字替换为 <code>$1</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">touch</span> index.html</span><br><span class="line"><span class="built_in">touch</span> style.css</span><br><span class="line"><span class="built_in">touch</span> main.js</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;&lt;h1&gt;我是例子&lt;/h1&gt;&quot;</span> &gt;&gt; index.html</span><br></pre></td></tr></table></figure>
<ul>
<li>添加权限</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x 我是脚本2</span><br></pre></td></tr></table></figure>
<ul>
<li>运行脚本，升级后需要给参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./我是脚本2 aaa</span><br></pre></td></tr></table></figure>

<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul>
<li>另一种运行方法</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh 我是脚本</span><br></pre></td></tr></table></figure>

<ul>
<li>添加shebang，即可直接输入脚本名，运行</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">code 我是脚本</span><br></pre></td></tr></table></figure>
<ul>
<li>打开脚本文件后，在第一行添加内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env sh</span></span><br></pre></td></tr></table></figure>
<ul>
<li>保存退出后，就可以直接在当前目录下输入脚本名运行</li>
</ul>
<h3 id="二次优化"><a href="#二次优化" class="headerlink" title="二次优化"></a>二次优化</h3><ul>
<li>将脚本所在的路径，添加到环境变量 <code>PATH</code> 中，在任何位置可以直接输入该脚本名，直接运行</li>
<li>添加方法自行百度 <code>计算机系统 + 添加环境变量</code> 如 <code>Win10</code> 百度搜索 <code>Win10添加环境变量</code></li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
        <category>shell</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows使用hugo搭建个人博客</title>
    <url>/2020/02/07/%E5%9C%A8Windows%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="一、本文章食用须知"><a href="#一、本文章食用须知" class="headerlink" title="一、本文章食用须知"></a>一、本文章食用须知</h2><ol>
<li>能访问外网</li>
<li>有自己的github账号以及配置了本地git的服务</li>
<li>对终端操作有所了解</li>
<li>仔细看完每个字</li>
</ol>
<p>如果以上都有了解，就可以开始下面的搭建博客啦~</p>
<h2 id="二、下载hugo安装包"><a href="#二、下载hugo安装包" class="headerlink" title="二、下载hugo安装包"></a>二、下载hugo安装包</h2><p>链接：<a href="https://gohugo.io/">Hugo官网</a>、<a href="https://github.com/gohugoio/hugo/releases">安装包下载地址</a></p>
<h3 id="Windows用户"><a href="#Windows用户" class="headerlink" title="Windows用户"></a>Windows用户</h3><p>找到hugo_版本号_Windows-你的系统版本bit.zip下载下来</p>
<p>这里以hugo0.64版本为例：</p>
<p>我的电脑是Windows10-64位系统</p>
<p>就下载hugo_0.64.0_Windows-64bit.zip</p>
<h3 id="Mac用户"><a href="#Mac用户" class="headerlink" title="Mac用户"></a>Mac用户</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install hugo</span><br><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<h2 id="三、解压安装包"><a href="#三、解压安装包" class="headerlink" title="三、解压安装包"></a>三、解压安装包</h2><p>解压到你所需要放的目录。如：D:\Programme\hugo_0.64.0_Windows-64bit</p>
<p>配置hugo环境变量</p>
<p>复制你刚刚解压位置的路径，添加到环境变量中，这里以Win10为例。</p>
<p>此电脑【右击】 –&gt; 选择 属性 –&gt; 高级系统设置 –&gt; 环境变量 –&gt; 系统变量 –&gt; Path –&gt; 编辑 –&gt; 新建 –&gt; 粘贴你的路径D:\Programme\hugo_0.64.0_Windows-64bit –&gt; 确定</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291645555.png"></p>
<p>打开终端段输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure>

<p>如果有提示Hugo字样则配置成功。</p>
<h2 id="四、开始配置博客"><a href="#四、开始配置博客" class="headerlink" title="四、开始配置博客"></a>四、开始配置博客</h2><p>回到终端，cd到你需要存放的目录位置，输入以下指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new site github用户名小写.github.io-creator</span><br></pre></td></tr></table></figure>

<p>输入完后会在当前目录创建一个“github用户名小写.github.io-creator”的文件夹，cd进去，输入指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke</span><br></pre></td></tr></table></figure>



<p>输入完后它会下载一些东西，等它下完。下完后接着输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;theme = &quot;ananke&quot;&#x27;</span> &gt;&gt; config.toml</span><br></pre></td></tr></table></figure>

<p>输入完后即可创建你的一篇博客，内容可以先不写。创建指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo new posts/第一篇博客的名称.md</span><br></pre></td></tr></table></figure>

<p>输入完后在你目录进入 content 文件夹，在进入 posts 文件夹，即可看到你刚刚创建的博客文章。编辑这个文件，将里面的“true”修改为“false”</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291645307.png"></p>
<p>保存关闭，回到终端。在根目录也就是“github用户名小写.github.io-creator”的目录，输入指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hugo server -D</span><br></pre></td></tr></table></figure>

<p>输入完后可以先不要操作，在浏览器输入 localhost:1313 可以预览本地博客。</p>
<h2 id="五、将本地博客上传到github"><a href="#五、将本地博客上传到github" class="headerlink" title="五、将本地博客上传到github"></a>五、将本地博客上传到github</h2><p>在github新建一个仓库，名字为“用户名.github.io”，然后回到终端进入 public目录，将目录的文件上传到该仓库。下面以我的用户名为例：</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291646140.png" alt="image.png"></p>
<p>输入完后点下面绿色的按钮就好了。我的创建过所以提示红色，你们直接点就好。</p>
<p>点完后会跳转到另一个界面，点击SSH,然后复制下面的指令，回终端public目录输入即可</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291646720.png" alt="image.png"></p>
<p>紧接着就是git的一些基础操作，回终端将public里的文件提交到这个仓库。下面提供一些基础指令做参考，具体去了解git的使用教程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git status</span><br><span class="line">git commit -v</span><br></pre></td></tr></table></figure>





<p>提交完后，回到github在刚刚仓库上面点击Settings</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291646281.png" alt="image.png"></p>
<p>往下拉找到GitHub Pages，下面显示的就是你的博客域名了，有买私人域名的可以自己绑定，这里就不说了。开始你的博客人生吧~</p>
<p><img src="https://qinius.easyhappy.top/avan/202506291647827.png" alt="image.png"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何连接GitHub远程仓库</title>
    <url>/2020/02/12/%E5%A6%82%E4%BD%95%E8%BF%9E%E6%8E%A5GitHub%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><ol>
<li>GitHub的账号</li>
<li>有类似bash的终端（输指令用）</li>
</ol>
<h1 id="生成ssh-key秘钥"><a href="#生成ssh-key秘钥" class="headerlink" title="生成ssh key秘钥"></a>生成ssh key秘钥</h1><p>官网的教程： <a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent</a></p>
<p>输入下面的指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C 你的邮箱地址</span><br></pre></td></tr></table></figure>



<p>输入完后一直敲回车键，知道出现类似泡泡的东西<br><img src="https://qinius.easyhappy.top/avan/202506291905909.png" alt="image.png"></p>
<p>接着复制生成的路径，使用指令 <code>cd 路径</code> 和 <code>ls</code> 查看生成的两个文件<br><img src="https://qinius.easyhappy.top/avan/202506291906683.png" alt="image.png"></p>
<p>其中 “id_rsa” 是私钥这个不要给别人看，“id_rsa.pub” 是公钥，我们需要查看这个文件的内容，可以使用 <code>cat id_rsa.pub</code> 指令查看该内容，回车后会出现一大串字符<br><img src="https://qinius.easyhappy.top/avan/202506291906687.png" alt="image.png"></p>
<p>将上面的字符一字不漏的复制，打开GitHub的设置页面，找到 “SSH and GPG keys” 然后在又上放单击 “New SSH key”<br><img src="https://qinius.easyhappy.top/avan/202506291906546.png" alt="image.png"></p>
<p>然后在 Title 中给秘钥起个名字，把刚刚复制的内容粘贴到 Key 文本框中，保存关闭即可<br><img src="https://qinius.easyhappy.top/avan/202506291906603.png" alt="image.png"></p>
<p>回到终端输入指令，来接收github发来的公钥，如果显示 “Hi 你的github用户名” 则表示成功了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<p><img src="https://qinius.easyhappy.top/avan/202506291907834.png" alt="image.png"></p>
<h1 id="至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可"><a href="#至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可" class="headerlink" title="至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可"></a>至此就已经连接了你的github账号，如果需要多个多个账号，同样操作一遍即可</h1>]]></content>
      <categories>
        <category>博客</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>异步、同步、Promise</title>
    <url>/2020/06/10/%E5%BC%82%E6%AD%A5%E3%80%81%E5%90%8C%E6%AD%A5%E3%80%81Promise/</url>
    <content><![CDATA[<h2 id="一、同步"><a href="#一、同步" class="headerlink" title="一、同步"></a>一、同步</h2><p>当你执行时，能直接获得结果就是同步。</p>
<blockquote>
<p>当有个任务需要等待很久的时候，下一个任务将无法运行。大量浪费时间。</p>
</blockquote>
<h2 id="二、异步"><a href="#二、异步" class="headerlink" title="二、异步"></a>二、异步</h2><p>当一个函数不能直接直接拿到结果，可以先执行其他代码，等待获取结果后再返回，就是异步。</p>
<p>异步两种形式：</p>
<ul>
<li>轮询<br>定时的去询问他获取了数据没有</li>
<li>回调<br>等结果获取后，在回头调用</li>
</ul>
<blockquote>
<p>异步的好处：它可以用等待的时间去执行其他事情</p>
</blockquote>
<h3 id="1-回调"><a href="#1-回调" class="headerlink" title="1.回调"></a>1.回调</h3><p>写了个A函数，不立刻执行。交给B函数，回头调用。这就是回调。</p>
<blockquote>
<p>回调可以用于同步任务，并非只能异步任务</p>
<p>回调还可以将函数传给浏览器进行调用。如：request.onreadystatechange</p>
</blockquote>
<h3 id="2-获取异步的结果"><a href="#2-获取异步的结果" class="headerlink" title="2.获取异步的结果"></a>2.获取异步的结果</h3><p>当异步有两个结果时可以采用以下方法获取结果</p>
<p>方法一：回调接受两个参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./文件.txt&#x27;</span>, <span class="function">(<span class="params">error, data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败&#x27;</span>);<span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>方法二：用两个回调接受</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/文件.json&#x27;</span>, <span class="function"><span class="params">data</span>=&gt;</span>&#123;&#125;, <span class="function"><span class="params">error</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>



<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/文件.json&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">success</span>: <span class="function">()=&gt;</span>&#123;&#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>上面两种方法都有很大的缺陷</p>
<p>命名不规范，五花八门</p>
<p>容易出现回调地狱，很容易让人看不懂</p>
<p>很难对错误进行处理</p>
</blockquote>
<h2 id="三、判断同步-异步"><a href="#三、判断同步-异步" class="headerlink" title="三、判断同步&amp;异步"></a>三、判断同步&amp;异步</h2><p>有些函数默认就是异步：如</p>
<ul>
<li>setTimeout</li>
<li>AJAX（即XMLHttpRequest）</li>
<li>addEventListener</li>
</ul>
<blockquote>
<p>AJAX可以设置为同步，不过没什么作用。如：request.open(‘参数1’, ‘参数2’, false)</p>
</blockquote>
<h2 id="四、Promise"><a href="#四、Promise" class="headerlink" title="四、Promise"></a>四、Promise</h2><p>Promise可以有效解决异步对结果的处理。</p>
<blockquote>
<p>规范的命名及顺序</p>
<p>没有了回调地狱，可读性更好</p>
<p>方便捕获错误</p>
</blockquote>
<p>以AJAX封装为例，如果用正常的方法来获取结果，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax = <span class="function">(<span class="params">method, url, options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;success, fail&#125; = options <span class="comment">// 析构赋值</span></span><br><span class="line">    <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    request.<span class="title function_">open</span>(method, url)</span><br><span class="line">    request.<span class="property">onreadystatechange</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request.<span class="property">readystate</span> === <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="comment">// 成功调用success 失败调用fail</span></span><br><span class="line">            <span class="keyword">if</span>(request.<span class="property">status</span> &lt; <span class="number">400</span>)&#123;</span><br><span class="line">                success.<span class="title function_">call</span>(<span class="literal">null</span>, request.<span class="property">response</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">            fail.<span class="title function_">call</span>(<span class="literal">null</span>, request, request.<span class="property">status</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    request.<span class="title function_">send</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">success</span>(<span class="params">respone</span>)&#123;&#125;, <span class="attr">fail</span>: <span class="function">(<span class="params">request, status</span>)=&gt;</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>使用Promise的方法，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;/xxx&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;&#125;, <span class="function">(<span class="params">request, status</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 第一个参数是success 第二个参数是fail</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>ajax() 返回了含有 .then() 方法的对象</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax = <span class="function">(<span class="params">method, url, options</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;success, fail&#125; = options</span><br><span class="line">        <span class="keyword">const</span> request = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        request.<span class="title function_">open</span>(method, url)</span><br><span class="line">        request.<span class="property">onreadystatechange</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(request.<span class="property">status</span> &lt; <span class="number">400</span>)&#123;</span><br><span class="line">                resolve.<span class="title function_">call</span>(<span class="literal">null</span>, request.<span class="property">response</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.<span class="property">status</span> &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">                reject.<span class="title function_">call</span>(<span class="literal">null</span>, request)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.<span class="title function_">send</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>核心代码 return new Promise((resolve, reject)&#x3D;&gt;{})</p>
<p>代码执行成功调用 resolve(result)</p>
<p>代码执行失败调用 reject(error)</p>
<p>.then(success, fail) 传入成功和失败的函数</p>
</blockquote>
<h2 id="五、AJAX库"><a href="#五、AJAX库" class="headerlink" title="五、AJAX库"></a>五、AJAX库</h2><ol>
<li>jQuery.ajax<br><a href="https://www.jquery123.com/">链接</a></li>
<li>Axios<br><a href="http://www.axios-js.com/">链接</a></li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的Windows快捷键</title>
    <url>/2020/02/12/%E5%B8%B8%E7%94%A8%E7%9A%84Windows%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="Win组合键"><a href="#Win组合键" class="headerlink" title="Win组合键"></a>Win组合键</h1><p>Win+D——显示&#x2F;隐藏桌面<br>Win+方向键——移动窗口<br>Alt+Tab——切换窗口<br>Alt+Shift+Tab——往后切换窗口<br>Win+Tab——不怎么用的切换窗口<br>Win+Ctrl+方向键——切换桌面</p>
<h1 id="Ctrl组合键"><a href="#Ctrl组合键" class="headerlink" title="Ctrl组合键"></a>Ctrl组合键</h1><p>Ctrl+A——全选<br>Ctrl+C——复制<br>Ctrl+V——粘贴<br>Ctrl+Z——撤销<br>Ctrl+Y——重做（与撤销相反）<br>Ctrl+R 或 F5——网页刷新<br>Ctrl+P——网页打印</p>
<h1 id="Chrome快捷键"><a href="#Chrome快捷键" class="headerlink" title="Chrome快捷键"></a>Chrome快捷键</h1><p>鼠标中键——打开或关闭<br>Ctrl+T——新开标签<br>Ctrl+Shift+T——撤销关闭<br>Ctrl+点击——新页面打开<br>Ctrl+W——关闭当前页面<br>Ctrl+L——地址输入栏<br>Ctrl+Shifit+I 或 F12——开发者工具<br>Ctrl+左右——前进后退<br>Atrl+回车——在新标签打开<br>Shift+回车——在新窗口打开<br>Ctrl+Shift+Delete——删除历史记录</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解jQuery的使用方法</title>
    <url>/2020/02/29/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3jQuery%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>一、jQuery如何获取元素</li>
<li>二、jQuery的链式操作是怎么样的</li>
<li>三、jQuery如何创建元素</li>
<li>四、jQuery如何移动元素</li>
<li>五、jQuery如何修改元素</li>
</ul>
<h2 id="一、jQuery如何获取元素"><a href="#一、jQuery如何获取元素" class="headerlink" title="一、jQuery如何获取元素"></a>一、jQuery如何获取元素</h2><p>有两种方法</p>
<p>第一种使用CSS选择表达式方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择整个文档的元素</span></span><br><span class="line">$(<span class="variable language_">document</span>)	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择ID为myID的网页元素</span></span><br><span class="line">$(<span class="string">&#x27;#myId&#x27;</span>)	</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择class为myClass的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div.myClass&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择name属性等于first的input元素</span></span><br><span class="line">$(<span class="string">&#x27;input[name=first]&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>第二种使用jQuery的表达式（<a href="https://api.jquery.com/category/selectors/">https://api.jquery.com/category/selectors/</a>）:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择网页中第一个a元素</span></span><br><span class="line">$(<span class="string">&#x27;a:first&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择表格的奇数行</span></span><br><span class="line">$(<span class="string">&#x27;tr:odd&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择表单中的input元素</span></span><br><span class="line">$(<span class="string">&#x27;#myForm :input&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//选择可见的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div:visible&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择所有的div元素，除了前三个</span></span><br><span class="line">$(<span class="string">&#x27;div:gt(2)&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择当前处于动画状态的div元素</span></span><br><span class="line">$(<span class="string">&#x27;div:animated&#x27;</span>) </span><br></pre></td></tr></table></figure>



<h2 id="二、jQuery的链式操作是怎么样的"><a href="#二、jQuery的链式操作是怎么样的" class="headerlink" title="二、jQuery的链式操作是怎么样的"></a>二、<font style="color:#262626;">jQuery的链式操作是怎么样的</font></h2><p><font style="color:#262626;">链式操作简单来说就是直接在前面语句后面接着使用 </font><code>&lt;font style=&quot;color:#262626;&quot;&gt;.&lt;/font&gt;</code> 来连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">find</span>(<span class="string">&#x27;h3&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>上面这句话等于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到div元素</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择其中的h3元素</span></span><br><span class="line">$.<span class="title function_">find</span>(<span class="string">&#x27;h3&#x27;</span>) </span><br><span class="line"><span class="comment">// 选择第3个h3元素</span></span><br><span class="line">$.<span class="title function_">eq</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将它的内容改为Hello</span></span><br><span class="line">$.<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>) </span><br></pre></td></tr></table></figure>



<p>这么对比后是不是发现链式操作方便了很多</p>
<h2 id="三、jQuery如何创建元素"><a href="#三、jQuery如何创建元素" class="headerlink" title="三、jQuery如何创建元素"></a>三、jQuery如何创建元素</h2><p>在jQuery中创建元素只需要将html代码直接输入到参数内即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;&lt;div&gt;111&lt;/div&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;&lt;li class=&quot;new&quot;&gt;new list item&lt;/li&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;ul&#x27;</span>).<span class="title function_">append</span>(<span class="string">&#x27;&lt;li&gt;list item&lt;/li&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>



<h2 id="四、jQuery如何移动元素"><a href="#四、jQuery如何移动元素" class="headerlink" title="四、jQuery如何移动元素"></a>四、<font style="color:#262626;">jQuery如何移动元素</font></h2><p><font style="color:#262626;">具体方法是 </font></p>
<p><font style="color:#262626;">选择元素+操作方法+目标元素</font></p>
<p>具体操作方法有以下几种：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">在现存元素的外部，从后面插入元素</span><br><span class="line">.<span class="title function_">insertAfter</span>()和.<span class="title function_">after</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的外部，从前面插入元素</span><br><span class="line">.<span class="title function_">insertBefore</span>()和.<span class="title function_">before</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的内部，从后面插入元素</span><br><span class="line">.<span class="title function_">appendTo</span>()和.<span class="title function_">append</span>()</span><br><span class="line"></span><br><span class="line">在现存元素的内部，从前面插入元素</span><br><span class="line">.<span class="title function_">prependTo</span>()和.<span class="title function_">prepend</span>()</span><br></pre></td></tr></table></figure>



<p>例如：</p>
<p>将div元素移动到p元素后面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">insertAfter</span>($(<span class="string">&#x27;p&#x27;</span>))</span><br></pre></td></tr></table></figure>



<h2 id="五、jQuery如何修改元素"><a href="#五、jQuery如何修改元素" class="headerlink" title="五、jQuery如何修改元素"></a><font style="color:#262626;">五、jQuery如何修改元素</font></h2><p><font style="color:#262626;">获取元素的值</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html()不带参数为取值</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">html</span>()</span><br></pre></td></tr></table></figure>



<p>向元素赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// html()带参数为赋值</span></span><br><span class="line">$(<span class="string">&#x27;h1&#x27;</span>).<span class="title function_">html</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p>复制元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 格式为 需要复制的元素+.clone().appendTo+目标位置	</span></span><br><span class="line">$( <span class="string">&quot;.hello&quot;</span> ).<span class="title function_">clone</span>().<span class="title function_">appendTo</span>( <span class="string">&quot;.goodbye&quot;</span> )</span><br></pre></td></tr></table></figure>



<p>删除元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接在输入你要删除的元素节点+remove即可</span></span><br><span class="line">$( <span class="string">&quot;.hello&quot;</span> ).<span class="title function_">remove</span>()</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解HTML语言</title>
    <url>/2020/02/08/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3HTML%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="一、本文章食用须知"><a href="#一、本文章食用须知" class="headerlink" title="一、本文章食用须知"></a>一、本文章食用须知</h1><p>软件准备：IDE代码编辑器，如：VScode、Sublime Text等</p>
<p>VScode <a href="https://code.visualstudio.com/">链接</a></p>
<p>Sublime Text <a href="https://www.sublimetext.com/">链接</a></p>
<p>本文章适用于没学过HTML语言的，或者刚接触不久想更加了解的人群。</p>
<h1 id="二、HTML的发明者"><a href="#二、HTML的发明者" class="headerlink" title="二、HTML的发明者"></a>二、HTML的发明者</h1><p>Tim Berners-Lee（提姆·柏內茲-李）1955年6月8日-至今。</p>
<p>详情请看维基百科 <a href="https://zh.wikipedia.org/wiki/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E">链接</a></p>
<p>李爵士做了些什么事情：</p>
<ol>
<li>编写了第一个浏览器</li>
<li>编写了第一个服务器</li>
<li>使用自己编写的浏览器访问自己编写的服务器</li>
<li>发明了WWW，以及HTML、HTTP、URL</li>
</ol>
<p>做这些事情为了什么：让每个人输入网址就能看到网页</p>
<h1 id="三、HTML起手代码"><a href="#三、HTML起手代码" class="headerlink" title="三、HTML起手代码"></a>三、HTML起手代码</h1><p>如果你安装的是VScode，只需要在VScode里面创建html后缀名的文件，输入 ! 然后按TAB键即可自动生成下列内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>    <span class="comment">&lt;!-- 声明是html5文本类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>    <span class="comment">&lt;!-- 使用的语言：en是英语 zh-CN是中文 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    <span class="comment">&lt;!-- 头部标签开始 --&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span>    <span class="comment">&lt;!-- 编码格式 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><span class="comment">&lt;!-- 防止缩放 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span><span class="comment">&lt;!-- 检查是否IE浏览器，自动调至最新 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="comment">&lt;!-- 网站的标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    <span class="comment">&lt;!-- 头部标签结束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>    <span class="comment">&lt;!-- body标签开始，页面的代码基本上都写在里面--&gt;</span></span><br><span class="line">	内容</span><br><span class="line">	...</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果你是别的编辑器，或者没有这个插件，请手动输入上面内容。</p>
<h1 id="四、常用的章节标签"><a href="#四、常用的章节标签" class="headerlink" title="四、常用的章节标签"></a>四、常用的章节标签</h1><h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、章节标签"><a href="#2、章节标签" class="headerlink" title="2、章节标签"></a>2、章节标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3、文章标签"><a href="#3、文章标签" class="headerlink" title="3、文章标签"></a>3、文章标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、段落标签"><a href="#4、段落标签" class="headerlink" title="4、段落标签"></a>4、段落标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5、头部标签"><a href="#5、头部标签" class="headerlink" title="5、头部标签"></a>5、头部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6、脚部标签"><a href="#6、脚部标签" class="headerlink" title="6、脚部标签"></a>6、脚部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7、主要内容标签"><a href="#7、主要内容标签" class="headerlink" title="7、主要内容标签"></a>7、主要内容标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8、旁支标签"><a href="#8、旁支标签" class="headerlink" title="8、旁支标签"></a>8、旁支标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上都是一些比较常用的章节标签。</p>
<h1 id="五、全局属性"><a href="#五、全局属性" class="headerlink" title="五、全局属性"></a>五、全局属性</h1><p>class、contenteditable、hidden、id、style、tabindex、title等。</p>
<h1 id="六、常用的内容标签"><a href="#六、常用的内容标签" class="headerlink" title="六、常用的内容标签"></a>六、常用的内容标签</h1><h3 id="1、有序标签"><a href="#1、有序标签" class="headerlink" title="1、有序标签"></a>1、有序标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、无序标签"><a href="#2、无序标签" class="headerlink" title="2、无序标签"></a>2、无序标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4、链接标签"><a href="#4、链接标签" class="headerlink" title="4、链接标签"></a>4、链接标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="5、代码标注标签"><a href="#5、代码标注标签" class="headerlink" title="5、代码标注标签"></a>5、代码标注标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="6、脚部标签-1"><a href="#6、脚部标签-1" class="headerlink" title="6、脚部标签"></a>6、脚部标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="7、水平分割线标签"><a href="#7、水平分割线标签" class="headerlink" title="7、水平分割线标签"></a>7、水平分割线标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="8、换行标签"><a href="#8、换行标签" class="headerlink" title="8、换行标签"></a>8、换行标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>以上都是一些比较常用的内容标签。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>浅析Vue完整版和运行版的区别</title>
    <url>/2020/03/18/%E6%B5%85%E6%9E%90Vue%E5%AE%8C%E6%95%B4%E7%89%88%E5%92%8C%E8%BF%90%E8%A1%8C%E7%89%88%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<ul>
<li>完整版和运行版的名字区别</li>
<li>tenplate和render的使用方法</li>
<li>使用codesandbox快速生成Vue项目</li>
<li>总结</li>
</ul>
<h2 id="一、完整版和运行版的名字区别"><a href="#一、完整版和运行版的名字区别" class="headerlink" title="一、完整版和运行版的名字区别"></a>一、完整版和运行版的名字区别</h2><p>可以去BootCDN里面引用，进去后直接搜索 <code>Vue</code> 即可。<br><a href="https://www.bootcdn.cn/">BootCnd官网</a><br>完整版的后缀是 —— vue.js<br>运行版的后缀多了个runtime —— vue.runtime.js<br>所有版本都有压缩版，压缩版功能一致，只是体积相对要小 —— 版本.min.js</p>
<h2 id="二、template和render的使用方法"><a href="#二、template和render的使用方法" class="headerlink" title="二、template和render的使用方法"></a>二、template和render的使用方法</h2><ul>
<li><p>template</p>
<p>完整版可以直接在HTML里面或者在template选项中直接写代码。它会自动解析</p>
<p>例如：</p>
<ol>
<li><p>在index.jhtml中添加一个id为app的标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接着添加script标签，引入完整版的js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.11/vue.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在main.js里，直接把html代码写入template选项中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`</span></span><br><span class="line"><span class="string">		&lt;div&gt;&#123;&#123;n&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">	`</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Vue后，它会直接把n为0写入到app标签中</p>
</li>
</ol>
</li>
<li><p>render</p>
<p>运行版，需要将HTML标签写入render中，让render来写入html中</p>
<p>例如：</p>
<ol>
<li><p>在index.jhtml中添加一个id为app的标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>接着添加script标签，引入运行版的js文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.11/vue.runtime.min.js&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在main.js里，用render函数来创建标签</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="title function_">render</span>(<span class="params">h</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, <span class="variable language_">this</span>.<span class="property">n</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Vue后，达到完整版一样的效果</p>
</li>
</ol>
</li>
</ul>
<h2 id="三、使用codesandbox快速生成Vue项目"><a href="#三、使用codesandbox快速生成Vue项目" class="headerlink" title="三、使用codesandbox快速生成Vue项目"></a>三、使用codesandbox快速生成Vue项目</h2><p>新手想学习Vue的时候，可以借助codesandbox来进行快速的搭建Vue项目。省去自己安装和配置的时间。当然开发的时候，还是自己在电脑中一步一步配置好。</p>
<p><a href="https://codesandbox.io/">Codesandbox官网</a></p>
<h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="- 搭建过程"></a>- 搭建过程</h3><ol>
<li><p>点击上面链接，进入官网</p>
</li>
<li><p>建议不用注册，注册后好像是限制项目数量。点击Create Sandbox</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb94562ff101~tplv-t2oaga2asx-image.image" alt="2.png"></p>
</li>
<li><p>接着点击Vue即可创建</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb9456448812~tplv-t2oaga2asx-image.image" alt="3.png"></p>
</li>
<li><p>创建完后就可以开始编辑代码，在旁边还有即时预览的窗口</p>
</li>
<li><p>写完导出，点击File——Export to ZIP</p>
<p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/18/170edb94599251f4~tplv-t2oaga2asx-image.image" alt="5.png"></p>
</li>
<li><p>导出后，解压下载好的压缩包，就是个本地文件了</p>
</li>
</ol>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><table>
<thead>
<tr>
<th align="left"></th>
<th align="left">Vue完整版</th>
<th align="left">Vue非完整版</th>
<th align="left">评价</th>
</tr>
</thead>
<tbody><tr>
<td align="left">特点</td>
<td align="left">有compiler</td>
<td align="left">没有compiler</td>
<td align="left">compiler占40%体积</td>
</tr>
<tr>
<td align="left">视图</td>
<td align="left">写在HTML里或者写在template选项</td>
<td align="left">写在render函数里用h来创建标签</td>
<td align="left">h是尤雨溪写好传给render的</td>
</tr>
<tr>
<td align="left">cdn引入</td>
<td align="left">vue.js</td>
<td align="left">vue.runtime.js</td>
<td align="left">文件名不同，生成环境后缀为.min.js</td>
</tr>
<tr>
<td align="left">webpack 引入</td>
<td align="left">需要配置alias</td>
<td align="left">默认使用此版</td>
<td align="left">尤雨溪配置</td>
</tr>
<tr>
<td align="left">@vue&#x2F;cli 引入</td>
<td align="left">需要额外配置</td>
<td align="left">默认使用此版</td>
<td align="left">尤雨溪、蒋豪群配置</td>
</tr>
</tbody></table>
<p>最佳使用的方法：</p>
<p>​	使用非完整版，配合vue-loader和vue文件</p>
<p>思路：</p>
<ol>
<li>保证用户体验，用户下载的JS文件体积更小，但只支持h函数</li>
<li>保证开发体验，开发者可以直接在vue文件里写HTML标签，而不写h函数</li>
<li>麻烦的代码让loader去写，vue-loader把vue文件里面的HTML转换为h函数</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>快速了解什么是MVC</title>
    <url>/2020/03/15/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3%E4%BB%80%E4%B9%88%E6%98%AFMVC/</url>
    <content><![CDATA[<ul>
<li>MVC设计模式</li>
<li>简单认识EvenBus</li>
<li>表驱动编程</li>
<li>模块化</li>
</ul>
<h2 id="一、MVC设计模式"><a href="#一、MVC设计模式" class="headerlink" title="一、MVC设计模式"></a>一、MVC设计模式</h2><h3 id="1-为什么要有设计模式"><a href="#1-为什么要有设计模式" class="headerlink" title="1. 为什么要有设计模式"></a>1. 为什么要有设计模式</h3><p>代码重复太多，相同页面重复写等。MVC设计模式就是为了解决代码重复，优化代码结构。</p>
<h3 id="2-学MVC会有什么情况"><a href="#2-学MVC会有什么情况" class="headerlink" title="2. 学MVC会有什么情况"></a>2. 学MVC会有什么情况</h3><ul>
<li>会出现意大利面条式代码的情况，过于臃肿太长，代码重复率高，页面不整洁等。</li>
<li>你会变成类似外包式程序员，每天重复干着重复的事情，不懂得提升自己，不会封装，不会造轮子。</li>
</ul>
<h3 id="3-什么是MVC"><a href="#3-什么是MVC" class="headerlink" title="3. 什么是MVC"></a>3. 什么是MVC</h3><p>将平时全部堆在一起的代码，进行分类管理，细分成一段段小代码。再将代码分种类，分别放入对应M模块、V模块、C模块。方面自己和他人阅读、开发。</p>
<h4 id="M-——-Model（数据类型）负责操作所有数据"><a href="#M-——-Model（数据类型）负责操作所有数据" class="headerlink" title="M —— Model（数据类型）负责操作所有数据"></a>M —— Model（数据类型）负责操作所有数据</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数据相关放入m中</span></span><br><span class="line"><span class="keyword">const</span> m = &#123;</span><br><span class="line">    数据<span class="number">1</span>,</span><br><span class="line">  数据<span class="number">2</span>,</span><br><span class="line">  数据<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="V-——-View（视图）负责所有UI页面"><a href="#V-——-View（视图）负责所有UI页面" class="headerlink" title="V —— View（视图）负责所有UI页面"></a>V —— View（视图）负责所有UI页面</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 视图相关放入v中</span></span><br><span class="line"><span class="keyword">const</span> v = &#123;</span><br><span class="line">    html代码,</span><br><span class="line">    渲染等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="C-——-Controller（控制器）负责其他"><a href="#C-——-Controller（控制器）负责其他" class="headerlink" title="C —— Controller（控制器）负责其他"></a>C —— Controller（控制器）负责其他</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他全部放入c中</span></span><br><span class="line"><span class="keyword">const</span> c = &#123;</span><br><span class="line">    事件,</span><br><span class="line">  添加,</span><br><span class="line">  修改等</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二、简单识EvenBus"><a href="#二、简单识EvenBus" class="headerlink" title="二、简单识EvenBus"></a>二、简单识EvenBus</h2><h3 id="什么是EvenBus"><a href="#什么是EvenBus" class="headerlink" title="- 什么是EvenBus"></a>- 什么是EvenBus</h3><p>EvenBus可以使用监听和触发事件，对所点实现通信。</p>
<h3 id="监听和触发的两个API"><a href="#监听和触发的两个API" class="headerlink" title="- 监听和触发的两个API"></a>- 监听和触发的两个API</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送一个信息，用于给监听事件监听</span></span><br><span class="line">eventBus.<span class="title function_">trigger</span>(<span class="string">&#x27;我触发了&#x27;</span>)</span><br><span class="line"><span class="comment">// 监听一个信息，若监听到了则执行</span></span><br><span class="line">eventBus.<span class="title function_">on</span>(<span class="string">&#x27;我触发了&#x27;</span>, 执行语句)</span><br></pre></td></tr></table></figure>

<h3 id="EvenBus伪代码事例"><a href="#EvenBus伪代码事例" class="headerlink" title="- EvenBus伪代码事例"></a>- EvenBus伪代码事例</h3><p>声明eventBus</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventBus = $(<span class="variable language_">window</span>)</span><br></pre></td></tr></table></figure>

<p>创建监听和触发事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">组件<span class="number">1</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  eventBus.<span class="title function_">trigger</span>(<span class="string">&#x27;hereTrigger&#x27;</span>)</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br><span class="line">组件<span class="number">2</span> &#123;</span><br><span class="line">    ···</span><br><span class="line">  eventBus.<span class="title function_">on</span>(<span class="string">&#x27;hereTrigger&#x27;</span>，()=&gt;&#123;</span><br><span class="line">    consolo.<span class="title function_">log</span>(<span class="string">&#x27;Receive message&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>eventBus.trigger执行后，会把hereTrigger发送出去。</p>
<p>如果evenBus.on收到了信息与hereTrigger一致，那么就会执行consolo.log。</p>
<p>如果eventBus.trigger没有执行，那么eventBus.on将不会执行。</p>
<h2 id="三、表驱动编程"><a href="#三、表驱动编程" class="headerlink" title="三、表驱动编程"></a>三、表驱动编程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="- 定义"></a>- 定义</h3><p>表驱动编程，又称之为表驱动、表驱动方法。 “表”是几乎所有数据结构课本都要讨论的非常有用的数据结构。表驱动方法出于特定的目的来使用表，程序员们经常谈到“表驱动”方法，但是课本中却从未提到过什么是”表驱动”方法。表驱动方法是一种使你可以在表中查找信息，而不必用很多的逻辑语句（if或Case）来把它们找出来的方法。事实上，任何信息都可以通过表来挑选。在简单的情况下，逻辑语句往往更简单而且更直接。但随着逻辑链的复杂，表就变得越来越富有吸引力了。</p>
<p>简单来说，将数据统计放在一个位置，需要获取里面数据的时候，像表一样，一一对应。</p>
<h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="- 简单的例子"></a>- 简单的例子</h3><p>拿最常见的if语句来举例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(key = <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">    执行语句a </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(key = <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">    执行语句b</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>...</span><br></pre></td></tr></table></figure>

<p>改为表驱动编程来实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> table = &#123;</span><br><span class="line">    <span class="attr">a</span>: &#123;</span><br><span class="line">    <span class="title function_">action</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行语句a&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="title function_">action</span> () &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行语句b&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleTable</span>(<span class="params">key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> table[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">handleTable</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">action</span>()</span><br></pre></td></tr></table></figure>

<h2 id="四、模块化"><a href="#四、模块化" class="headerlink" title="四、模块化"></a>四、模块化</h2><p>所谓模块化，就是一种将复杂代码分解为更好的可管理模块的方式。MVC设计模式就是一种模块化的体现，将代码分门别类的进行管理。</p>
<h3 id="各自独立"><a href="#各自独立" class="headerlink" title="- 各自独立"></a>- 各自独立</h3><p>在平时写代码的时候，可以将不同功能的代码，单独一个文件来写，然后通过导包导入到主程序中，那么当其中一个出现故障的时候，并不会影响到其他的代码。</p>
<h3 id="分级启动"><a href="#分级启动" class="headerlink" title="- 分级启动"></a>- 分级启动</h3><p>当加载的时候，可以分开加载。如果加载较慢的时候，可以优先加载重要的模块。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>禁止移动端页面随手指滑动</title>
    <url>/2020/05/16/%E7%A6%81%E6%AD%A2%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E9%9A%8F%E6%89%8B%E6%8C%87%E6%BB%91%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="一、问题"><a href="#一、问题" class="headerlink" title="一、问题"></a>一、问题</h2><p>在你使用 Wechat 或 QQ 自带的浏览器打开网页时，你会发现向上滑动时页面正常，但你向下滑动时会出现软件自带的功能，这时我们想禁止页面移动来固定页面，可以使用下面代码实现</p>
<h2 id="二、解决代码"><a href="#二、解决代码" class="headerlink" title="二、解决代码"></a>二、解决代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mo = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span> = <span class="string">&#x27;hidden&#x27;</span>; <span class="comment">// 隐藏滚动条</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;touchmove&quot;</span>, mo, &#123;</span><br><span class="line">        <span class="attr">passive</span>: <span class="literal">false</span></span><br><span class="line">    &#125;); <span class="comment">//禁止页面滑动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接默认不让滑动</span></span><br><span class="line"><span class="title function_">stop</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许滑动</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">overflow</span>=<span class="string">&#x27;&#x27;</span>; <span class="comment">// 显示滚动条</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;touchmove&quot;</span>,mo,&#123;<span class="attr">passive</span>:<span class="literal">false</span>&#125;);       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、实际应用"><a href="#三、实际应用" class="headerlink" title="三、实际应用"></a>三、实际应用</h2><h3 id="Art-Time-艺术时间"><a href="#Art-Time-艺术时间" class="headerlink" title="Art-Time 艺术时间"></a>Art-Time 艺术时间</h3><p>简易画板，可用于日常涂鸦，计算，草稿等</p>
<p><a href="https://layouwen.github.io/Art-Time/index.html">https://layouwen.github.io/Art-Time/index.html</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>简单了解 URL</title>
    <url>/2020/05/11/%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3%20URL/</url>
    <content><![CDATA[<h2 id="一、URL"><a href="#一、URL" class="headerlink" title="一、URL"></a>一、URL</h2><p>统一资源定位符（Uniform Resource Locator，缩写为 URL）<br>或称 统一资源定位器、定位地址、URL地址，俗称网页地址或简称网址，如同网络上的门牌定位到固定的地址。</p>
<h3 id="URL组成部分"><a href="#URL组成部分" class="headerlink" title="URL组成部分"></a>URL组成部分</h3><p>一个标准的 URL地址，可包含以下组成部分<br>协议 + 域名 + 端口 + 资源层级路径 + 查询参数 + 锚点</p>
<p>如：<br><a href="https://liangyouwen.com/index?name=wen#name">https://liangyouwen.com/index?name=wen#name</a></p>
<ul>
<li>https 协议部分</li>
<li>liangyouwen.com 协议部分</li>
<li>&#x2F;index 资源层级部分，文件所在路径</li>
<li>?name&#x3D;wen 查询参数部分，本地将此参数发送给服务器进行处理</li>
<li>#name 锚点部分，不发送给服务器，用于浏览器解析，定位锚地</li>
</ul>
<h2 id="二、IP地址"><a href="#二、IP地址" class="headerlink" title="二、IP地址"></a>二、IP地址</h2><p>ip地址（Internet Protocol Address，简称 IP Address，又或者 IP）<br>当设备连接网络，设备将被分配一个IP地址，用作标识。通过IP地址，设备间可以互相通讯，如果没有IP地址，我们将无法知道哪个设备是发送方，无法知道哪个是接收方。</p>
<h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><p>可以使用 ping 命令，查看与该 IP地址 的连通情况。<br>在 命令行 或 终端 输入<br>格式为：ping IP地址&#x2F;域名<br>如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ping</span> www.baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="三、DNS域名"><a href="#三、DNS域名" class="headerlink" title="三、DNS域名"></a>三、DNS域名</h2><p>域名系统（Domain Name System，缩写为 DNS）<br>是互联网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。</p>
<h3 id="1-域名作用"><a href="#1-域名作用" class="headerlink" title="1. 域名作用"></a>1. 域名作用</h3><p>组要作用是用于将 IP地址，转换为更方便记忆的 名字。也就是 域名重定向，比如输入 baidu.com 或 qq.com 等。域名系统会将输入的域名解析为指定的 IP地址。</p>
<blockquote>
<p>一个域名可以对应多个IP，称为 负载均衡<br>一个IP可以对应多个域名，称为 共享主机</p>
</blockquote>
<h3 id="2-nslookup命令"><a href="#2-nslookup命令" class="headerlink" title="2. nslookup命令"></a>2. nslookup命令</h3><p>使用 nslookup 命令可以查看该域名所拥有的 IP地址。<br>在 命令行 或 终端 输入<br>格式为：nslookup 域名<br>如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">nslookup baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="3-域名层次"><a href="#3-域名层次" class="headerlink" title="3. 域名层次"></a>3. 域名层次</h3><p>域名分多个层次，从右往左依次递增。</p>
<p>如： baidu.com</p>
<ul>
<li>com 为顶级域名，顶级域名分为很多种：gov政府、net网络、edu教育机构、com商业等等</li>
<li>baidu 为二级域名</li>
<li>依次递增</li>
</ul>
<blockquote>
<p>多数公司为了使自己网站容易记，都会使用 二级域名。</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>简单配置VScode及常用快捷键</title>
    <url>/2020/02/12/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AEVScode%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h1 id="下载VScode"><a href="#下载VScode" class="headerlink" title="下载VScode"></a>下载VScode</h1><p>官网链接：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>
<h1 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h1><p>无脑下一部就好了<br>中有个步骤需要选择，如果看的懂就自己选，如果看不懂，就全选</p>
<h1 id="配置VScode"><a href="#配置VScode" class="headerlink" title="配置VScode"></a>配置VScode</h1><p>一、汉化<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 Chinese，找到自己需要的语言点击Install安装，安装完重启即可<br><img src="https://qinius.easyhappy.top/avan/202506291707770.png" alt="image.png"></p>
<p>二、配置</p>
<ol>
<li><p>调整字体<br>文件——首选项——设置，搜索设置输入“字体”<br>在 <code>Font Size</code> 属性修改字体大小<br><img src="https://qinius.easyhappy.top/avan/202506291707328.png" alt="image.png"></p>
</li>
<li><p>自动保存<br>搜索设置输入“auto save”<br>将 <code>Auto Save</code> 属性的值修改为 <code>onFocusChange</code><br><img src="https://qinius.easyhappy.top/avan/202506291708891.png" alt="image.png"></p>
</li>
</ol>
<p>3.自动格式化（适合新手，会格式化他人的代码，慎用）<br>搜索设置输入“format on save”<br>勾选 <code>Format On Save</code> 属性的选项<br><img src="https://qinius.easyhappy.top/avan/202506291708460.png" alt="image.png"></p>
<h1 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h1><h2 id="设置fira-code字体和设置字体连字"><a href="#设置fira-code字体和设置字体连字" class="headerlink" title="设置fira code字体和设置字体连字"></a>设置fira code字体和设置字体连字</h2><ol>
<li>下载字体安装包 <a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/26500787/88777d80-a7f1-11e9-95ae-146629eb2946?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20200210/us-east-1/s3/aws4_request&X-Amz-Date=20200210T070105Z&X-Amz-Expires=300&X-Amz-Signature=a6c29f774fc63b8dd76f2e2ab74fa657fe1f160da08d25b6daecc3b98876ec2f&X-Amz-SignedHeaders=host&actor_id=60692794&response-content-disposition=attachment;%20filename=FiraCode_1.207.zip&response-content-type=application/octet-stream">字体github链接</a></li>
<li>解压到电脑，进入 otf 文件夹，<code>Ctrl + A</code>全选，右击安装</li>
</ol>
<p><img src="https://qinius.easyhappy.top/avan/202506291708422.png" alt="image.png"></p>
<ol start="3">
<li>进入首选项，搜索设置输入“字体”<br>在属性前面输入 “fira font, ” 注意有个逗号，或者直接复制我的</li>
</ol>
<p><code>Fira Code,Consolas, &#39;Courier New&#39;, monospace</code><br>    点击 <code>Font Ligatures</code> 属性下的编辑，进入json文件，在中键位置复制粘贴这行指令</p>
<p><code>&quot;editor.fontLigatures&quot;: true,</code> 然后 <code>Ctrl + S</code> 保存退出<br><img src="https://qinius.easyhappy.top/avan/202506291710637.png" alt="image.png"></p>
<p><img src="https://qinius.easyhappy.top/avan/202506291711331.png" alt="image.png"></p>
<h1 id="VScode插件"><a href="#VScode插件" class="headerlink" title="VScode插件"></a>VScode插件</h1><ol>
<li><p>Code Spell Checker（检查有没有拼错单词）<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 “Code Spell Checker”，点击 Install 安装即可<br><img src="https://qinius.easyhappy.top/avan/202506291711762.png" alt="image.png"></p>
</li>
<li><p>Git Easy（方便git操作）<br>使用快捷键 <code>Ctrl + Shift + X</code> 打开拓展菜单，搜索框输入 “Git Easy”，点击 Install 安装即可</p>
</li>
</ol>
<h1 id="Vscode简单的快捷键"><a href="#Vscode简单的快捷键" class="headerlink" title="Vscode简单的快捷键"></a>Vscode简单的快捷键</h1><p><code>Ctrl + P</code>  找文件</p>
<p><code>Ctrl + Shift + P</code>  输入命令</p>
<p><code>Alt + 鼠标单击</code>  多位置输入</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域CORS、JSONP、服务器中转</title>
    <url>/2020/06/11/%E8%B7%A8%E5%9F%9FCORS%E3%80%81JSONP%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E8%BD%AC/</url>
    <content><![CDATA[<h2 id="1、同源策略"><a href="#1、同源策略" class="headerlink" title="1、同源策略"></a>1、同源策略</h2><p>当两个服务器的 源 不完全相同的时候，无法获取另一个的数据。不同的页面，无法相互访问数据。</p>
<h3 id="1-1-获取网站的源"><a href="#1-1-获取网站的源" class="headerlink" title="1.1 获取网站的源"></a>1.1 获取网站的源</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">origin</span></span><br><span class="line">或</span><br><span class="line">location.<span class="property">origin</span></span><br></pre></td></tr></table></figure>



<h3 id="1-2-判断源是否相同"><a href="#1-2-判断源是否相同" class="headerlink" title="1.2 判断源是否相同"></a>1.2 判断源是否相同</h3><p>源 &#x3D; 协议 + 域名 + 端口号</p>
<blockquote>
<p>当协议、域名、端口号（完全一致）才是同源，否者都为不同源</p>
<p><a href="http://baidu.com/">http://baidu.com</a> 与 <a href="http://www.baidu.com/">http://www.baidu.com</a> 不同源</p>
<p><a href="http://baidu.com/">http://baidu.com</a> 与 <a href="http://qq.com/">http://qq.com</a> 不同源</p>
</blockquote>
<h2 id="2、跨域"><a href="#2、跨域" class="headerlink" title="2、跨域"></a>2、跨域</h2><p>为了解决同源策略无法相互访问数据</p>
<p>其中两种跨域的方法：CORS、JSONP</p>
<h3 id="2-1-CORS"><a href="#2-1-CORS" class="headerlink" title="2.1 CORS"></a>2.1 CORS</h3><p>在后端设置响应头，提前声明允许谁获取数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;允许的源地址，例如（http://baidu.com）&quot;</span>)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优点：操作简单</p>
<p>缺点：不兼容IE 6 7 8 9</p>
</blockquote>
<h3 id="2-2-JSONP"><a href="#2-2-JSONP" class="headerlink" title="2.2 JSONP"></a>2.2 JSONP</h3><p>将数据写入到JS文件中，利用引用JS文件，将数据保存到window上。最后再利用window来获取JS保存的数据。</p>
<blockquote>
<p>优点：兼容IE、可以跨域</p>
<p>缺点：因为是通过js的script获取的，所以他不支持post，只可以发get请求。以及没有AJAX那样获取精确的状态码等数据。</p>
</blockquote>
<h3 id="2-3-服务器中转"><a href="#2-3-服务器中转" class="headerlink" title="2.3 服务器中转"></a>2.3 服务器中转</h3><p>使用自己的服务器作为中转站，将需要请求的地址，发送给服务端。服务端不存在跨域问题，可以直接请求数据。返回给我们自己。</p>
<p>中转服务器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (urlObj.<span class="property">pathname</span> === <span class="string">&#x27;/bridge&#x27;</span>) &#123;</span><br><span class="line">    http.<span class="title function_">get</span>(urlObj.<span class="property">query</span>.<span class="property">url</span>, <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> text = <span class="string">&#x27;&#x27;</span></span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> text += data)</span><br><span class="line">      req.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">        res.<span class="title function_">end</span>(text)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>



<p>浏览器正常请求即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://localhost:8080/bridge?url=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br></pre></td></tr></table></figure>



<h2 id="3、JSONP封装"><a href="#3、JSONP封装" class="headerlink" title="3、JSONP封装"></a>3、JSONP封装</h2><h3 id="3-1-方案1"><a href="#3-1-方案1" class="headerlink" title="3.1 方案1"></a>3.1 方案1</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> random = <span class="string">&#x27;JSONCallbackName&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">        <span class="variable language_">window</span>[random] = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;url&#125;</span>?callback=<span class="subst">$&#123;random&#125;</span>`</span></span><br><span class="line">        script.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            script.<span class="title function_">remove</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">reject</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&#x27;访问数据的文件地址&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="3-2-方案2"><a href="#3-2-方案2" class="headerlink" title="3.2 方案2"></a>3.2 方案2</h3><p>服务端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> urlObj = url.<span class="title function_">parse</span>(req.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">if</span> (urlObj.<span class="property">pathname</span> === <span class="string">&#x27;/getWeather&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123; <span class="attr">city</span>: <span class="string">&#x27;guangzhou&#x27;</span>, <span class="attr">weather</span>: <span class="string">&#x27;sunny&#x27;</span> &#125;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">`<span class="subst">$&#123;urlObj.query.callback&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">404</span>, <span class="string">&#x27;Not Found&#x27;</span>)</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>



<p>客户端</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonp</span>(<span class="params">url, data = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">__jsonp__</span> = <span class="function"><span class="params">data</span> =&gt;</span> <span class="title function_">resolve</span>(data)</span><br><span class="line">    <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> query = <span class="title class_">Object</span>.<span class="title function_">entries</span>(data).<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;a[<span class="number">0</span>]&#125;</span>=<span class="subst">$&#123;a[<span class="number">1</span>]&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    script.<span class="property">src</span> = url + <span class="string">&#x27;?callback=__jsonp__&amp;&#x27;</span> + query</span><br><span class="line">    script.<span class="property">onerror</span> = <span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;加载失败&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonp</span>(<span class="string">&#x27;http://api.layouwen.com/getWeather.php&#x27;</span>, &#123; <span class="attr">city</span>: <span class="string">&#x27;广州&#x27;</span> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Node.js和JSON搭建简单的动态服务器</title>
    <url>/2020/06/14/%E4%BD%BF%E7%94%A8Node.js%E5%92%8CJSON%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8A%A8%E6%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="一、创建html页面"><a href="#一、创建html页面" class="headerlink" title="一、创建html页面"></a>一、创建html页面</h2><p>创建4个页面，index.html、register.html、sign_in.html、home.html</p>
<ul>
<li>index.html 默认主页</li>
<li>register.html 用于注册账号</li>
<li>sign_in.html 用于登录账号</li>
<li>home.html 用于显示登录后的页面</li>
</ul>
<h3 id="主要代码片段"><a href="#主要代码片段" class="headerlink" title="主要代码片段"></a>主要代码片段</h3><p>register.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;registerForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> $form = $(<span class="string">&#x27;#registerForm&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">$form.<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> name = $form.<span class="title function_">find</span>(<span class="string">&quot;input[name=name]&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> password = $form.<span class="title function_">find</span>(<span class="string">&#x27;input[name=password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name, password)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// pass AJAX post data</span></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">url</span>: <span class="string">&#x27;/register&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">contentType</span>: <span class="string">&#x27;text/json; charset=UTF-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            name, <span class="comment">// name: name </span></span></span><br><span class="line"><span class="language-javascript">            password <span class="comment">// password: password</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;注册成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        location.<span class="property">href</span> = <span class="string">&#x27;/sign_in.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>sign_in.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;signInForm&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> $form = $(<span class="string">&#x27;#signInForm&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    $form.<span class="title function_">on</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        e.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// get name password</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> name = $form.<span class="title function_">find</span>(<span class="string">&quot;input[name=name]&quot;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> password = $form.<span class="title function_">find</span>(<span class="string">&#x27;input[name=password&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// pass AJAX post data</span></span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&#x27;/sign_in&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">contentType</span>: <span class="string">&#x27;text/json; charset=UTF-8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">                name,</span></span><br><span class="line"><span class="language-javascript">                password</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&#x27;/home.html&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="function">() =&gt;</span> &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>home.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;loginStatus&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    你好,&#123;&#123;user.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sign_in.html&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Node服务器"><a href="#二、Node服务器" class="headerlink" title="二、Node服务器"></a>二、Node服务器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> port = process.<span class="property">argv</span>[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!port) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请输入指定端口。如：\nnode server.js 8888&#x27;</span>)</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">request, response</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> parsedUrl = url.<span class="title function_">parse</span>(request.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="keyword">var</span> pathWithQuery = request.<span class="property">url</span></span><br><span class="line">    <span class="keyword">var</span> queryString = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (pathWithQuery.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        queryString = pathWithQuery.<span class="title function_">substring</span>(pathWithQuery.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> path = parsedUrl.<span class="property">pathname</span></span><br><span class="line">    <span class="keyword">var</span> query = parsedUrl.<span class="property">query</span></span><br><span class="line">    <span class="keyword">var</span> method = request.<span class="property">method</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/******** main start ************/</span></span><br><span class="line">    <span class="comment">// 读取 session 文件,转化为对象</span></span><br><span class="line">    <span class="keyword">const</span> session = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./session.json&#x27;</span>).<span class="title function_">toString</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (path === <span class="string">&#x27;/sign_in&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 读数据库</span></span><br><span class="line">        <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>))</span><br><span class="line">        <span class="keyword">const</span> array = []</span><br><span class="line">        <span class="comment">// 每次接受数据就添加进数组</span></span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            array.<span class="title function_">push</span>(chunk)</span><br><span class="line">        &#125;)</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 转化字符串</span></span><br><span class="line">            <span class="keyword">const</span> string = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(array).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// 在转化为对象</span></span><br><span class="line">            <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(string)</span><br><span class="line">            <span class="comment">// 找到符合的 user</span></span><br><span class="line">            <span class="keyword">const</span> user = userArray.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">name</span> === obj.<span class="property">name</span> &amp;&amp; user.<span class="property">password</span> === obj.<span class="property">password</span>) <span class="comment">// 成功返回符合的对象，失败返回undefined</span></span><br><span class="line">            <span class="keyword">if</span> (user === <span class="literal">undefined</span>) &#123; <span class="comment">// 失败</span></span><br><span class="line">                response.<span class="property">statusCode</span> = <span class="number">400</span></span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-Type&#x27;</span>, <span class="string">&#x27;text/JSON; charset=UTF-8&#x27;</span>)</span><br><span class="line">                response.<span class="title function_">end</span>(<span class="string">`&#123;&quot;errorCode&quot;:4001&#125;`</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 成功</span></span><br><span class="line">                response.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">                <span class="comment">// 设置 Cookie</span></span><br><span class="line">                <span class="keyword">const</span> random = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">                session[random] = &#123;</span><br><span class="line">                    <span class="attr">user_id</span>: user.<span class="property">id</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 写入数据</span></span><br><span class="line">                fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./session.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(session))</span><br><span class="line">                response.<span class="title function_">setHeader</span>(<span class="string">&quot;Set-Cookie&quot;</span>, <span class="string">`&#x27;session_id=<span class="subst">$&#123;random&#125;</span>; HttpOnly&#x27;`</span>)</span><br><span class="line">                response.<span class="title function_">end</span>()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/home.html&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 Cookie</span></span><br><span class="line">        <span class="keyword">const</span> cookie = request.<span class="property">headers</span>[<span class="string">&#x27;cookie&#x27;</span>]</span><br><span class="line">        <span class="keyword">let</span> sessionId</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 读取 Cookie 中的 id 值</span></span><br><span class="line">            sessionId = cookie.<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">s</span> =&gt;</span> s.<span class="title function_">indexOf</span>(<span class="string">&#x27;session_id=&#x27;</span>) &gt;= <span class="number">0</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (sessionId &amp;&amp; session[sessionId]) &#123;</span><br><span class="line">            <span class="comment">// 从 session 中读取对应的值</span></span><br><span class="line">            <span class="keyword">const</span> userId = session[sessionId].<span class="property">user_id</span></span><br><span class="line">            <span class="comment">// 读数据库</span></span><br><span class="line">            <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>))</span><br><span class="line">            <span class="comment">// 找到符合的 user</span></span><br><span class="line">            <span class="keyword">let</span> user = userArray.<span class="title function_">find</span>(<span class="function"><span class="params">user</span> =&gt;</span> user.<span class="property">id</span> === userId)</span><br><span class="line">            <span class="keyword">const</span> homeHtml = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./public/home.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="keyword">let</span> string</span><br><span class="line">            <span class="keyword">if</span> (user) &#123;</span><br><span class="line">                string = homeHtml.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;loginStatus&#125;&#125;&#x27;</span>, <span class="string">&#x27;已登录&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;user.name&#125;&#125;&#x27;</span>, user.<span class="property">name</span>)</span><br><span class="line">                response.<span class="title function_">write</span>(string)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 读取源文件内容</span></span><br><span class="line">            <span class="keyword">const</span> homeHtml = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./public/home.html&#x27;</span>).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// 替换文字</span></span><br><span class="line">            <span class="keyword">const</span> string = homeHtml.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;loginStatus&#125;&#125;&#x27;</span>, <span class="string">&#x27;未登录&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;user.name&#125;&#125;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            response.<span class="title function_">write</span>(string)</span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&#x27;/register&#x27;</span> &amp;&amp; method === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html; charset=UTF-8&#x27;</span>)</span><br><span class="line">        <span class="comment">// read database</span></span><br><span class="line">        <span class="keyword">let</span> userArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>)) <span class="comment">// read database</span></span><br><span class="line">        <span class="keyword">const</span> array = []</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">            array.<span class="title function_">push</span>(chunk)</span><br><span class="line">        &#125;)</span><br><span class="line">        request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// convert string</span></span><br><span class="line">            <span class="keyword">const</span> string = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(array).<span class="title function_">toString</span>()</span><br><span class="line">            <span class="comment">// convert obj</span></span><br><span class="line">            <span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(string)</span><br><span class="line">            <span class="comment">// last user id</span></span><br><span class="line">            <span class="keyword">const</span> lastUser = userArray[userArray.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">            <span class="comment">// new user</span></span><br><span class="line">            <span class="keyword">const</span> newUser = &#123;</span><br><span class="line">                <span class="attr">id</span>: lastUser ? lastUser.<span class="property">id</span> + <span class="number">1</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="attr">name</span>: obj.<span class="property">name</span>,</span><br><span class="line">                <span class="attr">password</span>: obj.<span class="property">password</span></span><br><span class="line">            &#125;</span><br><span class="line">            userArray.<span class="title function_">push</span>(newUser)</span><br><span class="line">            <span class="comment">// write data</span></span><br><span class="line">            fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;./database/users.json&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(userArray))</span><br><span class="line">        &#125;)</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">200</span></span><br><span class="line">        <span class="keyword">let</span> content</span><br><span class="line">        <span class="comment">// setting index</span></span><br><span class="line">        <span class="keyword">const</span> filePath = path === <span class="string">&#x27;/&#x27;</span> ? <span class="string">&#x27;/index.html&#x27;</span> : path</span><br><span class="line">        <span class="comment">// judge type</span></span><br><span class="line">        <span class="keyword">const</span> index = filePath.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> suffix = filePath.<span class="title function_">substring</span>(index)</span><br><span class="line">        <span class="keyword">const</span> fileType = &#123;</span><br><span class="line">            <span class="string">&#x27;.html&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;.css&#x27;</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;.js&#x27;</span>: <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">`<span class="subst">$&#123;fileType[suffix] || <span class="string">&quot;text/html&quot;</span>&#125;</span>;charset=utf-8`</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            content = fs.<span class="title function_">readFileSync</span>(<span class="string">`./public<span class="subst">$&#123;filePath&#125;</span>`</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            content = <span class="string">&#x27;文件路径不存在&#x27;</span></span><br><span class="line">            response.<span class="property">statusCode</span> = <span class="number">404</span></span><br><span class="line">        &#125;</span><br><span class="line">        response.<span class="title function_">write</span>(content)</span><br><span class="line">        response.<span class="title function_">end</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******** main end ************/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.<span class="title function_">listen</span>(port)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;监听 &#x27;</span> + port + <span class="string">&#x27; 成功！请输入下列地址访问\nhttp://localhost:&#x27;</span> + port)</span><br></pre></td></tr></table></figure>

<h2 id="三、主要思路"><a href="#三、主要思路" class="headerlink" title="三、主要思路"></a>三、主要思路</h2><h3 id="register-html"><a href="#register-html" class="headerlink" title="register.html"></a>register.html</h3><p>使用jQuery的ajax将数据发送请求 &#x2F;register 给后端，成功则跳转到 sign_in.html</p>
<blockquote>
<p>数据需要使用 JSON.stringify 转化为字符串在提交</p>
</blockquote>
<h3 id="register"><a href="#register" class="headerlink" title="&#x2F;register"></a>&#x2F;register</h3><p>读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进去。将数组转换为字符串，在转换为对象。<br>获取数据库中最小的 id 值，将数据组成新的对象，添加进入 数据库 中。</p>
<h3 id="sign-in-html"><a href="#sign-in-html" class="headerlink" title="sign_in.html"></a>sign_in.html</h3><p>使用ajax将数据发送请求 &#x2F;sign_in 给后端，成功则跳转 home.html</p>
<h3 id="sign-in"><a href="#sign-in" class="headerlink" title="&#x2F;sign_in"></a>&#x2F;sign_in</h3><p>读取 users.json 的数据，创建一个空数组，将传递过来的参数 push 进去。将数组转换为字符串，在转换为对象。<br>在读取后的数据库中，查找有没有符合条件的 user，成功返回读取后的对象，失败返回 undefined。<br>如果成功，设置随机数，将 随机数的值 与 user的id 绑定。并添加到 session.json 中。然后 setHeader，将cookie发送到浏览器。</p>
<h3 id="home"><a href="#home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h3><p>获取登入成功后 cookie 的值。读取 session 中对应的随机数。如果随机数和session对应的随机数值存在，就显示已登录，否则显示未登录</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>后端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>后端</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac安装微信小助手实现多开及反撤回</title>
    <url>/2020/07/11/Mac%E5%AE%89%E8%A3%85%E5%BE%AE%E4%BF%A1%E5%B0%8F%E5%8A%A9%E6%89%8B%E5%AE%9E%E7%8E%B0%E5%A4%9A%E5%BC%80%E5%8F%8A%E5%8F%8D%E6%92%A4%E5%9B%9E/</url>
    <content><![CDATA[<p>使用终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -r -f WeChatExtension-ForMac &amp;&amp; git <span class="built_in">clone</span> --depth=1 https://github.com/MustangYM/WeChatExtension-ForMac &amp;&amp; <span class="built_in">cd</span> WeChatExtension-ForMac/WeChatExtension/Rely &amp;&amp; ./Install.sh</span><br></pre></td></tr></table></figure>

<p>等待安装完成即可，完成后重启微信就可以使用了。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>macos</tag>
        <tag>wechat</tag>
      </tags>
  </entry>
  <entry>
    <title>mac系统下配置flutter环境</title>
    <url>/2020/07/14/mac%E7%B3%BB%E7%BB%9F%E4%B8%8B%E9%85%8D%E7%BD%AEflutter%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="一、下载安装及配置"><a href="#一、下载安装及配置" class="headerlink" title="一、下载安装及配置"></a>一、下载安装及配置</h2><h3 id="1、安装-Flutter-SDK"><a href="#1、安装-Flutter-SDK" class="headerlink" title="1、安装 Flutter SDK"></a>1、安装 Flutter SDK</h3><p>进入 <a href="https://developer.android.google.cn/studio?hl=zh-cn">Flutter官网</a> 下载 <code>Flutter SDK</code></p>
<p>我安装时的下载地址：<a href="https://flutter.dev/docs/get-started/install/macos">https://flutter.dev/docs/get-started/install/macos</a></p>
<p>下载好后，将<code>flutter_macos_1.17.5-stable.zip</code>安装包，解压到不会轻易误删的地方。这里我解压到文稿中。也就是路径为&#x2F;Users&#x2F;你的mac名&#x2F;Documents的位置。</p>
<p>编辑环境变量，打开 <code>bash_profile</code> 文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.bash_pofile</span><br></pre></td></tr></table></figure>

<p>在最后面插入下列代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=你文件所在目录的路径/flutter/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>接着保存退出后，在终端输入 <code>source ~/.bash_profile</code> 即可使用flutter</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter doctor</span><br></pre></td></tr></table></figure>

<p>上面代码用于检测你还有哪些部分没有配置完成。</p>
<blockquote>
<p>如果你终端是zsh，你还需要多一步</p>
</blockquote>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">open ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>在最下面添加这一行代码</p>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="2、安装-Xcode"><a href="#2、安装-Xcode" class="headerlink" title="2、安装 Xcode"></a>2、安装 Xcode</h3><p>直接在AppSotre中，搜索Xcode进行安装即可。</p>
<p>终端输入 <code>flutter doctor</code> 进行检查。</p>
<h3 id="3、安装-Android-Studio"><a href="#3、安装-Android-Studio" class="headerlink" title="3、安装 Android Studio"></a>3、安装 Android Studio</h3><p>进入 <a href="https://developer.android.google.cn/studio?hl=zh-cn">Android Studio官网</a> 下载</p>
<p>下载后，按自己需要进行设置及安装。</p>
<p>安装结束后添加环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>在最后一行添加下面代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:~/Library/Android/sdk/platform-tools</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>

<p>接着打开 Android Studio，在 Plugin 中搜索 <code>flutter</code> 并安装。它会自动安装 flutter、dart两个插件。</p>
<p>安装结束后可以输入 <code>flutter doctor</code> 检测是否成功。</p>
<h3 id="4、下载-VScode"><a href="#4、下载-VScode" class="headerlink" title="4、下载 VScode"></a>4、下载 VScode</h3><p>进入 <a href="https://code.visualstudio.com/">VScode官网</a> 下载</p>
<p>下载好后添加 flutter、Dart 两个插件</p>
<p>终端输入 <code>flutter doctor</code> 进行检测。</p>
<h3 id="5、安装夜神模拟器"><a href="#5、安装夜神模拟器" class="headerlink" title="5、安装夜神模拟器"></a>5、安装夜神模拟器</h3><p>进入 <a href="https://www.yeshen.com/">夜神模拟器官网</a> 下载</p>
<p>安装并打开。</p>
<h2 id="二、运行项目"><a href="#二、运行项目" class="headerlink" title="二、运行项目"></a>二、运行项目</h2><p>在运行时为了增加流畅性，建议修改Flutter的配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">open 你的flutter文件目录/packages/flutter_tools/gradle/flutter.gradle</span><br></pre></td></tr></table></figure>

<p>将repositories中的 <code>google()</code> 和 <code>jcenter()</code> 删除。替换为</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">maven &#123; url ‘https:<span class="comment">//maven.aliyun.com/repository/google’ &#125;</span></span><br><span class="line">maven &#123; url ‘https:<span class="comment">//maven.aliyun.com/repository/jcenter’ &#125;</span></span><br><span class="line">maven &#123; url ‘http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public’ &#125;</span></span><br></pre></td></tr></table></figure>

<p>创建你的第一个项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter create 项目名</span><br><span class="line"><span class="built_in">cd</span> 项目名</span><br></pre></td></tr></table></figure>

<p>并修改你项目中的 <code>android/build.gradle</code> 的配置文件。同样修改 repositories 中的内容。只不过他有两个位置都要替换。</p>
<p>接着将项目与夜神模拟器建立连接，在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb connect 127.0.0.1:62001</span><br></pre></td></tr></table></figure>

<p>输入完没报错就是连接成功了。</p>
<blockquote>
<p>如果报错，那是因为你夜神模拟器没有打开，要在打开的状态下在输入指令连接。</p>
</blockquote>
<p>确认无误后，即可开始编译运行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter run</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>博客</category>
        <category>macos</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>macos</tag>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>开发中git的常见操作</title>
    <url>/2020/08/04/%E5%BC%80%E5%8F%91%E4%B8%ADgit%E7%9A%84%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="设置了HTTPS需要切换为SSH"><a href="#设置了HTTPS需要切换为SSH" class="headerlink" title="设置了HTTPS需要切换为SSH"></a>设置了HTTPS需要切换为SSH</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br><span class="line">git remote add origin 你的git的ssh地址</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<h2 id="同时上传多个git仓库"><a href="#同时上传多个git仓库" class="headerlink" title="同时上传多个git仓库"></a>同时上传多个git仓库</h2><p>绑定对应仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add gitee 你的git的ssh地址</span><br><span class="line">git push -u gitee master</span><br><span class="line">git remote add github 你的git的ssh地址</span><br><span class="line">git push -u github master</span><br></pre></td></tr></table></figure>

<p>上传对仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<h2 id="创建及切换分支"><a href="#创建及切换分支" class="headerlink" title="创建及切换分支"></a>创建及切换分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure>

<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git check master</span><br><span class="line">git merge 需要合并的分支</span><br><span class="line">git push 源名 master</span><br></pre></td></tr></table></figure>

<h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">更新远程分支列表</span><br><span class="line">git remote update origin --prune</span><br><span class="line"></span><br><span class="line">查看所有分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">删除远程分支</span><br><span class="line">git push origin ---delete 删除的分支名</span><br><span class="line"></span><br><span class="line">删除本地分支</span><br><span class="line">git branch -d 删除的分支名</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在npm中发布自己的包</title>
    <url>/2020/07/14/%E5%A6%82%E4%BD%95%E5%9C%A8npm%E4%B8%AD%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8C%85/</url>
    <content><![CDATA[<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p><a href="https://www.npmjs.com/">npmjs官网</a></p>
<p>注册完成后保持登录状态，不要关闭网页。</p>
<h2 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h2><p>因为下载问题，你可能将npm的官方源切换为淘宝源。这里需要重新设置为官方源才能提交成功，使用nrm工具快速切换。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i -g nrm</span><br><span class="line">nrm use npm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这部分设置后，你使用npm安装速度会变慢。最后发包完成后在切换回去</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm use taobao</span><br></pre></td></tr></table></figure>

<h2 id="初始化包"><a href="#初始化包" class="headerlink" title="初始化包"></a>初始化包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>根据提示输入对应内容。</p>
<blockquote>
<p>package name &#x3D;&gt; 你要发布的包名<br>version &#x3D;&gt; 当前发布的版本号（如果你是第一次发布建议设置为0.0.1）<br>description &#x3D;&gt; 对你的包进行描述<br>keywords &#x3D;&gt; 关于你包的关键字<br>author &#x3D;&gt; 作者名（填写你注册的用户名）</p>
</blockquote>
<p>其他没提及的默认回车即可。</p>
<h2 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h2><p>添加你的发布账号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>

<p>接着输入你的账号及密码。（这里也是需要将源切换为官方的npm源才可以成功）</p>
<p>添加结束后即可，发布你的一个包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>

<blockquote>
<p>后续发布可以到package.json文件中修改 “version” 的版本号在提交。<br>如果同一版本提交会报错</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>快速上手Vim</title>
    <url>/2020/08/14/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BVim/</url>
    <content><![CDATA[<h2 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h2><p>i 在光标前输入<br>a 在光标后输入<br>shift+i 当前行最前面输入<br>shift+a 当前行最后面输入<br>o 在光标的下一行输入内容<br>shift+o 在光标上一行输入内容<br>s 删除光标的字符并进入输入模式<br>x 删除当前光标下的字符<br>d 数字 放向键 自定义在什么方向删除多少个字符&#x2F;行<br>dd 删除整行<br>p 粘贴<br>y 数字 方向键 自定义在什么方向复制多少个字符&#x2F;行<br>w 进入下一个单词的开头<br>c 删除当前光标的字符<br>c 数字 方向键 自定义在什么方向删除多少个字符&#x2F;行<br>c w 删除整个单词<br>c i w 删除你光标所在的单词<br>c i 字符 删除自定义内部的所有内容<br>d i 字符 删除（复制）自定义内部的所有内容<br>y i 字符 复制自定义内部的所有内容<br>f 查找模式<br>f 字符 查找自定义字符，并到指定位置<br>d f 字符 删除（复制）到自定义的字符位置<br>y f 字符 复制到自定义的字符位置<br>&#x2F; 搜索<br>ESC 返回指令模式<br>:w 保存<br>:q 退出<br>:wq 保存退出<br>:split 上下分屏<br>:vsplit 左右分屏<br>0 回到最开头</p>
<h2 id="配置vimrc文件"><a href="#配置vimrc文件" class="headerlink" title="配置vimrc文件"></a>配置vimrc文件</h2><p>在~根目录创建.vim文件夹</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> .<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">cd</span> .<span class="keyword">vim</span></span><br><span class="line"><span class="keyword">vim</span> vimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">noremap</span> 当前键位 映射键位</span><br><span class="line"><span class="keyword">map</span> 键位 指令</span><br></pre></td></tr></table></figure>

<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mapleader=<span class="string">&quot; &quot;</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> relativenumber</span><br><span class="line"><span class="keyword">set</span> cursorline</span><br><span class="line"><span class="keyword">set</span> wrap</span><br><span class="line"><span class="keyword">set</span> showcmd</span><br><span class="line"><span class="keyword">set</span> wildmenu</span><br><span class="line"><span class="keyword">set</span> hlsearch</span><br><span class="line">exec <span class="string">&quot;nohlsearch&quot;</span></span><br><span class="line"><span class="keyword">set</span> incsearch</span><br><span class="line"><span class="keyword">set</span> ignorecase</span><br><span class="line"></span><br><span class="line"><span class="keyword">noremap</span> = <span class="symbol">&lt;LEADER&gt;</span><span class="symbol">&lt;CR&gt;</span> :<span class="keyword">nohlsearch</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">map</span> s <span class="symbol">&lt;nop&gt;</span></span><br><span class="line"><span class="keyword">map</span> S :<span class="keyword">w</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> Q :q<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">map</span> R :<span class="keyword">source</span> $MYVIMRC<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>

<p>syntax on 打开语法高亮<br>set number 打开行号<br>set relativenumber 打开高亮行号<br>set cursorline 高亮当前行线<br>set wrap 换行<br>set showcmd 显示输入的命令<br>set wildmenu 显示命令菜单<br>set hlsearch 高亮你搜索的结果<br>exec “nohlsearch” 每次进入vim都自动清空搜索结果<br>set incsearch 边输入边搜索<br>set ignorecase 忽略大小写搜索<br>set smartcase 正常忽略大小写，全大写时精确搜索<br>noremap &#x3D; <LEADER><CR> :nohlsearch<CR> 设置空格+回车清空搜索结果<br>s 取消映射<br>S 保存<br>Q 退出<br>R 刷新配置文件</p>
<blockquote>
<p>所有使用set的属性，可以在属性名前面加个no关闭<br>hjkl是vim中的移动键，如果想快速移动可以自定义按键映射<code>行数+方向键</code></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>快速入门Vue</title>
    <url>/2020/07/15/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8Vue/</url>
    <content><![CDATA[<h2 id="Vue实例的options属性"><a href="#Vue实例的options属性" class="headerlink" title="Vue实例的options属性"></a>Vue实例的options属性</h2><h3 id="一、数据"><a href="#一、数据" class="headerlink" title="一、数据"></a>一、数据</h3><h4 id="data-内部数据"><a href="#data-内部数据" class="headerlink" title="data 内部数据"></a>data 内部数据</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 对象形式</span><br><span class="line">data: &#123;</span><br><span class="line">    n: 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">// 函数形式</span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        n: 0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>优先使用函数，因为如果调用多次，会出现对象被多次引用的问题</p>
<p>使用数据可以使用 this.数据名</p>
</blockquote>
<h4 id="props-外部数据"><a href="#props-外部数据" class="headerlink" title="props 外部数据"></a>props 外部数据</h4><p>接收外部数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &#123;&#123;外部数据名&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    porps: [&#x27;外部数据名&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>



<p>传外部数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;组件名 外部数据名=&quot;数据&quot;/&gt;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>如果你传的是变量或方法，需要加上冒号</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;组件名 :外部数据名=&quot;变量名或方法名&quot;/&gt;</span><br></pre></td></tr></table></figure>



<h4 id="propsData"><a href="#propsData" class="headerlink" title="propsData"></a>propsData</h4><h4 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed 计算属性"></a>computed 计算属性</h4><h4 id="methods-方法"><a href="#methods-方法" class="headerlink" title="methods 方法"></a>methods 方法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    method: &#123;</span><br><span class="line">        函数名()&#123;</span><br><span class="line">            函数体</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="watch-监听"><a href="#watch-监听" class="headerlink" title="watch 监听"></a>watch 监听</h4><h3 id="二、DOM"><a href="#二、DOM" class="headerlink" title="二、DOM"></a>二、DOM</h3><h4 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el 挂载点"></a>el 挂载点</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el: &#x27;#app&#x27;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>执行后会将#app标签整个替换掉</p>
<blockquote>
<p>还可以使用 new Vue({}).$mount(#app) 来挂载</p>
</blockquote>
<h4 id="template-HTML"><a href="#template-HTML" class="headerlink" title="template HTML"></a>template HTML</h4><h4 id="render-非完整版的HTML"><a href="#render-非完整版的HTML" class="headerlink" title="render 非完整版的HTML"></a>render 非完整版的HTML</h4><h4 id="renderError-用不到"><a href="#renderError-用不到" class="headerlink" title="renderError 用不到"></a>renderError 用不到</h4><h3 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h3><p>beforeCreate 创建前</p>
<p>created 创建后</p>
<p>beforeMount 挂载前</p>
<p>mounted 挂载后</p>
<p>beforeUpdate 更新前</p>
<p>updated 更新后</p>
<p>activated</p>
<p>deactivated</p>
<p>beforeDestroy 销毁前</p>
<p>destroyed 销毁后</p>
<p>errorCaptured 用不到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">   beforeCreate()&#123;</span><br><span class="line">    console.log(&#x27;创建前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   created()&#123;</span><br><span class="line">    console.log(&#x27;创建后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeMount()&#123;</span><br><span class="line">    console.log(&#x27;挂载到页面前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   mount()&#123;</span><br><span class="line">    console.log(&#x27;挂载到页面后执行&#x27;)</span><br><span class="line">   &#125;，</span><br><span class="line">   beforeUpdate()&#123;</span><br><span class="line">    console.log(&#x27;数据更新前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   update()&#123;</span><br><span class="line">    console.log(&#x27;数据更新后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   beforeDestroy()&#123;</span><br><span class="line">    console.log(&#x27;消亡前执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">   destroyed()&#123;</span><br><span class="line">    console.log(&#x27;消亡后执行&#x27;)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="四、资源"><a href="#四、资源" class="headerlink" title="四、资源"></a>四、资源</h3><h4 id="directives-指令"><a href="#directives-指令" class="headerlink" title="directives 指令"></a>directives 指令</h4><h4 id="filters-过滤器"><a href="#filters-过滤器" class="headerlink" title="filters 过滤器"></a>filters 过滤器</h4><h4 id="components-组件"><a href="#components-组件" class="headerlink" title="components 组件"></a>components 组件</h4><p>方法1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.component(&#x27;组件名&#x27;,&#123;与Vue实例的属性一致&#125;)</span><br></pre></td></tr></table></figure>



<p>方法2</p>
<p>创建单文件组件，以 <code>.vue</code> 结尾的文件，在Vue实例中引入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import Demo from &#x27;./Demo&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    components: &#123;Demo&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>然后即可直接在HTML中使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Demo</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<blockquote>
<p>推荐优先使用方法2</p>
</blockquote>
<h3 id="五、组合"><a href="#五、组合" class="headerlink" title="五、组合"></a>五、组合</h3><h4 id="parent-父"><a href="#parent-父" class="headerlink" title="parent 父"></a>parent 父</h4><h4 id="mixins-混入"><a href="#mixins-混入" class="headerlink" title="mixins 混入"></a>mixins 混入</h4><h4 id="extends-拓展"><a href="#extends-拓展" class="headerlink" title="extends 拓展"></a>extends 拓展</h4><h4 id="provide-提供"><a href="#provide-提供" class="headerlink" title="provide 提供"></a>provide 提供</h4><h4 id="inject-注入"><a href="#inject-注入" class="headerlink" title="inject 注入"></a>inject 注入</h4>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>快速创建Vue项目</title>
    <url>/2020/07/14/%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAVue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="安装-vuecli"><a href="#安装-vuecli" class="headerlink" title="安装@vuecli"></a>安装@vuecli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add @vue/cli</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<p>创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create demo</span><br></pre></td></tr></table></figure>

<p>根据喜好配置，以下为我的设置</p>
<p>Manually select features<br>Babel,CSS Pre-processors,Linter&#x2F;Formatter,Unit Testing<br>Lint and fix on commit<br>Jest</p>
<blockquote>
<p>没有提及的为默认选项</p>
</blockquote>
<h2 id="使用codesandbox创建好的项目文件"><a href="#使用codesandbox创建好的项目文件" class="headerlink" title="使用codesandbox创建好的项目文件"></a>使用codesandbox创建好的项目文件</h2><p>进入 <a href="codesandbox.io">官网</a> 接着创建一个vue项目，将项目导出来</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>创建好vue项目文件后就可以开始本地预览了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn serve</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何实现任意组件的通信</title>
    <url>/2020/08/30/React%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E7%BB%84%E4%BB%B6%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>现在有一个家庭，他们有10w的财产。家庭成员分别有爸爸1、爸爸2。他们分别有两个孩子，儿子11、儿子12、儿子21、儿子22。现在要实现家族中每位成员花费金额时，其他成员都需要知道。</p>
<h2 id="方法一-eventHub（非单项数据流）"><a href="#方法一-eventHub（非单项数据流）" class="headerlink" title="方法一 eventHub（非单项数据流）"></a>方法一 eventHub（非单项数据流）</h2><p>找个跑腿的。在每次消费后去通知另一位成员。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.home</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 财产</span></span><br><span class="line"><span class="keyword">let</span> money = &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">100000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跑腿需要监听的事件</span></span><br><span class="line"><span class="keyword">let</span> fnLists = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> eventHub = &#123;</span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fnList = fnLists[eventName]</span><br><span class="line">    <span class="keyword">if</span> (!fnList) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fnList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      fnList[i](data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fnLists[eventName]) &#123;</span><br><span class="line">      fnLists[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    fnLists[eventName].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 监听别人是否花钱</span></span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">money</span>: money</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知跑腿需要花钱</span></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    money.<span class="property">amount</span> -= <span class="number">100</span></span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.state.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="comment">// 监听别人是否花钱</span></span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">money</span>: money</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 通知跑腿需要花钱</span></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>)&#123;</span><br><span class="line">    money.<span class="property">amount</span> -= <span class="number">100</span></span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p><a href="https://jsbin.com/besuhof/5/edit?html,js,output">代码预览</a></p>
<p>提前跟跑腿的说明，每当son22花钱时，通知son11有人花钱了。从而更新信息。</p>
<blockquote>
<p>每个人消费跑腿都需要来回通知效率很慢。需要实现告诉跑腿的要监听谁消费了。</p>
</blockquote>
<h2 id="方法二-eventHub（单向数据流）"><a href="#方法二-eventHub（单向数据流）" class="headerlink" title="方法二 eventHub（单向数据流）"></a>方法二 eventHub（单向数据流）</h2><p>找一个管家，每次消费都去向下通知所有成员。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h4><p>与上次一样的代码，这里就不重复了</p>
<h4 id="CSS-1"><a href="#CSS-1" class="headerlink" title="CSS"></a>CSS</h4><p>与上次一样的代码，这里就不重复了</p>
<h4 id="JSX-1"><a href="#JSX-1" class="headerlink" title="JSX"></a>JSX</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 财产</span></span><br><span class="line"><span class="keyword">let</span> money = &#123;</span><br><span class="line">  <span class="attr">amount</span>: <span class="number">100000</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件中心</span></span><br><span class="line"><span class="keyword">let</span> fnLists = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> eventHub = &#123;</span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params">eventName, data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> fnList = fnLists[eventName]</span><br><span class="line">    <span class="keyword">if</span> (!fnList) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fnList.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      fnList[i](data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">eventName, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!fnLists[eventName]) &#123;</span><br><span class="line">      fnLists[eventName] = []</span><br><span class="line">    &#125;</span><br><span class="line">    fnLists[eventName].<span class="title function_">push</span>(fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管家</span></span><br><span class="line"><span class="keyword">let</span> x = &#123;</span><br><span class="line">  <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.<span class="title function_">on</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      money.<span class="property">amount</span> -= data</span><br><span class="line">      <span class="title function_">render</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x.<span class="title function_">init</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">money</span>: money</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.state.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    eventHub.<span class="title function_">trigger</span>(<span class="string">&quot;我想花钱&quot;</span>, <span class="number">100</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解析-1"><a href="#解析-1" class="headerlink" title="解析"></a>解析</h3><p><a href="https://jsbin.com/besuhof/6/edit?html,js,output">预览地址</a></p>
<p>全部数据统一由管家来下发更新</p>
<h2 id="方法三-redux（单向数据流）"><a href="#方法三-redux（单向数据流）" class="headerlink" title="方法三 redux（单向数据流）"></a>方法三 redux（单向数据流）</h2><p>与eventHub的思路一样</p>
<h3 id="HTML-2"><a href="#HTML-2" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/redux/4.0.5/redux.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS-2"><a href="#CSS-2" class="headerlink" title="CSS"></a>CSS</h3><p>与上次一样的代码，这里就不重复了</p>
<h3 id="JSX-2"><a href="#JSX-2" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// redux</span></span><br><span class="line"><span class="keyword">let</span> createStore = <span class="title class_">Redux</span>.<span class="property">createStore</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">reducers</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  state = state || &#123;</span><br><span class="line">    <span class="attr">money</span>: &#123;<span class="attr">amount</span>: <span class="number">100000</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;我想花钱&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">money</span>: &#123;</span><br><span class="line">          <span class="attr">amount</span>: state.<span class="property">money</span>.<span class="property">amount</span> - action.<span class="property">payload</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father1</span> <span class="attr">money</span>=<span class="string">&#123;this.props.store.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father2</span> <span class="attr">money</span>=<span class="string">&#123;this.props.store.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father1 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son11</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son12</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son11</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son11 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son12</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">x</span>(<span class="params"></span>) &#123;</span><br><span class="line">    store.<span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;我想花钱&quot;</span>, <span class="attr">payload</span>: <span class="number">100</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son12 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.x()&#125;&gt;花钱<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Father2 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son21</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son22</span> <span class="attr">money</span>=<span class="string">&#123;this.props.money&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son21</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son21 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son22</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        son22 &#123;this.props.money.amount&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">store</span>=<span class="string">&#123;store.getState()&#125;/</span>&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line">store.<span class="title function_">subscribe</span>(render)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何实现父子组件通信</title>
    <url>/2020/08/28/React%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h2><p>在父组件显示数值，在子组件有个按钮点击后修改父组件的值。</p>
<h2 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react/17.0.0-rc.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/react-dom/0.0.0-0c756fb-f7f79fd/umd/react-dom.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Father</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">changeValue</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">number</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">number</span> + <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.number&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span> <span class="attr">change</span>=<span class="string">&#123;this.changeValue.bind(this)&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;son&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.props.change&#125;</span>&gt;</span>更改值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><p>在父组件声明一个函数，用于修改父组件中的值。<br>将此函数通过子组件的props进行传参</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Son</span> change=&#123;<span class="variable language_">this</span>.<span class="property">changeValue</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>子组件接收后，即可调用外部函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">change</span>&#125;&gt;更改值&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h2 id="四、代码效果预览"><a href="#四、代码效果预览" class="headerlink" title="四、代码效果预览"></a>四、代码效果预览</h2><p><a href="https://jsbin.com/fubefeg/11/edit?html,js,output">预览链接</a></p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode的Beautify插件格式化ES6语法出现换行</title>
    <url>/2020/08/17/VSCode%E7%9A%84Beautify%E6%8F%92%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%96ES6%E8%AF%AD%E6%B3%95%E5%87%BA%E7%8E%B0%E6%8D%A2%E8%A1%8C/</url>
    <content><![CDATA[<p>在settings(JSON)中添加此配置即刻，之前换行的需要手动删除回车</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;beautify.config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;brace_style&quot;</span><span class="punctuation">:</span> <span class="string">&quot;collapse,preserve-inline&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA的ideaVim插件配置</title>
    <url>/2020/08/30/IDEA%E7%9A%84ideaVim%E6%8F%92%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="进入-创建ideaVim的配置文件"><a href="#进入-创建ideaVim的配置文件" class="headerlink" title="进入&#x2F;创建ideaVim的配置文件"></a>进入&#x2F;创建ideaVim的配置文件</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/_ideavimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<h3 id="MocOS-Linux"><a href="#MocOS-Linux" class="headerlink" title="MocOS&#x2F;Linux"></a>MocOS&#x2F;Linux</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ideavimrc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>

<h2 id="让ideaVim系统剪贴板与系统同步"><a href="#让ideaVim系统剪贴板与系统同步" class="headerlink" title="让ideaVim系统剪贴板与系统同步"></a>让ideaVim系统剪贴板与系统同步</h2><p>在ideavimrc文件中添加一行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> clipboard=unnamedplus,unnamed</span><br></pre></td></tr></table></figure>
<p>保存退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:wq</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>React的CSS方案</title>
    <url>/2020/09/01/React%E7%9A%84CSS%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="一、方案选择"><a href="#一、方案选择" class="headerlink" title="一、方案选择"></a>一、方案选择</h2><p>React的css in js有很多种，这里推荐按照start的数量进行选择。如果有一些特别合自己心意的除外。以下是一个搜集方案的网址</p>
<p><a href="https://github.com/MicheleBertoli/css-in-js">点我跳转</a></p>
<h2 id="二、使用示例"><a href="#二、使用示例" class="headerlink" title="二、使用示例"></a>二、使用示例</h2><h3 id="styled-components"><a href="#styled-components" class="headerlink" title="styled-components"></a>styled-components</h3><p><a href="https://styled-components.com/">官方文档</a></p>
<ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add styled-components</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>定义标签</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Div1</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    width: 100px;</span></span><br><span class="line"><span class="string">    height: 100px;</span></span><br><span class="line"><span class="string">    border: 1px soild red;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>直接使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是一个styled标签</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Div1</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="emotion"><a href="#emotion" class="headerlink" title="emotion"></a>emotion</h3><p><a href="https://emotion.sh/docs/introduction">官方文档</a></p>
<ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @emotion/core</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@jsx</span> jsx */</span></span><br><span class="line"><span class="keyword">import</span> &#123;jsx&#125; <span class="keyword">from</span> <span class="string">&quot;@emotion/core&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>直接在jsx中使用css属性使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">css</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> <span class="attr">1px</span> <span class="attr">soild</span> <span class="attr">red</span>, <span class="attr">width:</span> <span class="attr">100</span>, <span class="attr">height:</span> <span class="attr">100</span> &#125;&#125;&gt;</span>我是emotion方案<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>css-in-js</tag>
      </tags>
  </entry>
  <entry>
    <title>React的mobx使用方式</title>
    <url>/2020/09/03/React%E7%9A%84mobx%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、创建文件"><a href="#一、创建文件" class="headerlink" title="一、创建文件"></a>一、创建文件</h2><p>stores<br>—– auth.js 例子文件<br>—– index.js 总入口</p>
<h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add mobx</span><br><span class="line">yarn add mobx-react</span><br></pre></td></tr></table></figure>

<h2 id="三、书写相应代码"><a href="#三、书写相应代码" class="headerlink" title="三、书写相应代码"></a>三、书写相应代码</h2><h3 id="auth-js"><a href="#auth-js" class="headerlink" title="auth.js"></a>auth.js</h3><ol>
<li>import相应的文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">&quot;mobx&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明class类，并导出</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AuthStore</span> &#123;</span><br><span class="line">    @observable 变量名 = 值</span><br><span class="line">    @boservable values = &#123;</span><br><span class="line">        username = <span class="string">&quot;梁又文&quot;</span></span><br><span class="line">        sex = <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @action 方法名(参数) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(参数)</span><br><span class="line">    &#125;</span><br><span class="line">    @action <span class="title function_">setName</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">values</span>.<span class="property">username</span> = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">AuthSotre</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ol>
<li>import相应文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; 类名 &#125; <span class="keyword">from</span> <span class="string">&quot;../stores/文件名&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AuthSotre</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../stores/auth&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建Context对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> context = <span class="title function_">createContext</span>(&#123;</span><br><span class="line">    定义方法名: <span class="keyword">new</span> 类名(),</span><br><span class="line">    <span class="attr">authStore</span>: <span class="keyword">new</span> <span class="title class_">AuthStore</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将Context对象全局导出</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useStores</span> = (<span class="params"></span>) =&gt; <span class="title function_">useContext</span>(context)</span><br></pre></td></tr></table></figure>

<h2 id="四、配置package-json"><a href="#四、配置package-json" class="headerlink" title="四、配置package.json"></a>四、配置package.json</h2><ol>
<li>将react隐藏的webpack暴露出来，释放之前请先提交代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn eject</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>安装插件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add @babel/plugin-proposal-decorators</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改package.json</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span><span class="attr">&quot;legacy&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;react-app&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="五、在组件中进行使用"><a href="#五、在组件中进行使用" class="headerlink" title="五、在组件中进行使用"></a>五、在组件中进行使用</h2><ol>
<li>import相应文件</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">&quot;mobx-react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStores &#125; <span class="keyword">from</span> <span class="string">&quot;../stores&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用observer监控组件，并解构我们需要的对象出来并使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = <span class="title function_">observer</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">AuthStore</span> &#125; = <span class="title function_">useStores</span>()</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Demo组件<span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>解构后我们就可以使用该对象的属性及方法</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = <span class="title function_">observer</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="title class_">AuthStore</span> &#125; = <span class="title function_">useStores</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">changeName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title class_">AuthStore</span>.<span class="title function_">setName</span>(<span class="string">&quot;改名字后的梁又文&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是Demo组件，我的名字叫&#123; AuthStore.values.username &#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeName&#125;</span>&gt;</span>改名字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>mobx</tag>
      </tags>
  </entry>
  <entry>
    <title>React的生命周期概括</title>
    <url>/2020/09/01/React%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<h2 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h2><h3 id="getDefaultProps"><a href="#getDefaultProps" class="headerlink" title="getDefaultProps"></a>getDefaultProps</h3><blockquote>
<p>设置默认的Props</p>
</blockquote>
<h3 id="getInitialState"><a href="#getInitialState" class="headerlink" title="getInitialState"></a>getInitialState</h3><blockquote>
<p>可以访问this.props</p>
</blockquote>
<h3 id="componentWillMount"><a href="#componentWillMount" class="headerlink" title="componentWillMount"></a>componentWillMount</h3><blockquote>
<p>挂载页面前，在渲染前调用。此时还可以修改state</p>
</blockquote>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote>
<p>渲染页面，此时已经不能更改state</p>
</blockquote>
<h3 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h3><blockquote>
<p>挂在页面后调用</p>
</blockquote>
<h3 id="componentWillUpdate"><a href="#componentWillUpdate" class="headerlink" title="componentWillUpdate"></a>componentWillUpdate</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillUpdate</span>(nextPorps, nextState)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>组件数据更新时调用</p>
</blockquote>
<h3 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(nextPorps, nextState)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当props或state更新时触发，用来判断数值是否发生变化，并返回布尔值。true为进行更新，false为阻止更新</p>
</blockquote>
<h3 id="componentDidUpdate"><a href="#componentDidUpdate" class="headerlink" title="componentDidUpdate"></a>componentDidUpdate</h3><blockquote>
<p>组件跟新完毕后调用，此时可以修改state值</p>
</blockquote>
<h3 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount"></a>componentWillUnmount</h3><blockquote>
<p>组件卸载时调用，一般用于清除事件监听和定时器</p>
</blockquote>
<h3 id="componentWillReceiveProps"><a href="#componentWillReceiveProps" class="headerlink" title="componentWillReceiveProps"></a>componentWillReceiveProps</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">componentWillReceiveProps</span>(nextProps)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>当外部传来的props发生变化时触发，它接收变更后的props值可供使用</p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3初体验（1）</title>
    <url>/2020/10/05/Vue3%E5%88%9D%E4%BD%93%E9%AA%8C%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1、Vite简单操作"><a href="#1、Vite简单操作" class="headerlink" title="1、Vite简单操作"></a>1、Vite简单操作</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add create-vite-app@1.18.0</span><br></pre></td></tr></table></figure>

<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>文档的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init vite-app 项目名</span><br><span class="line">yarn create vite-app 项目名</span><br></pre></td></tr></table></figure>

<p>等价于</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">全局安装后</span><br><span class="line">cva 项目名</span><br><span class="line">或</span><br><span class="line">npx create-vite-app 项目名</span><br></pre></td></tr></table></figure>

<h2 id="2、Vue3与Vue2的区别"><a href="#2、Vue3与Vue2的区别" class="headerlink" title="2、Vue3与Vue2的区别"></a>2、Vue3与Vue2的区别</h2><ul>
<li>Vue3的Template支持多个跟标签，Vue2不支持</li>
<li>Vue3有createApp()，而Vue2是new Vue()</li>
<li>createApp(组件)，new Vue({template,render})</li>
</ul>
<h2 id="3、Vue-router-4"><a href="#3、Vue-router-4" class="headerlink" title="3、Vue-router 4"></a>3、Vue-router 4</h2><h3 id="3-1-查看所有版本号"><a href="#3-1-查看所有版本号" class="headerlink" title="3.1 查看所有版本号"></a>3.1 查看所有版本号</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm info vue-router versions</span><br></pre></td></tr></table></figure>

<h3 id="3-2-安装vue-router-4"><a href="#3-2-安装vue-router-4" class="headerlink" title="3.2 安装vue-router 4"></a>3.2 安装vue-router 4</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add vue-router@4.0.0-beta.3</span><br></pre></td></tr></table></figure>

<h3 id="3-3-初始化vue-router"><a href="#3-3-初始化vue-router" class="headerlink" title="3.3 初始化vue-router"></a>3.3 初始化vue-router</h3><h4 id="新建history对象"><a href="#新建history对象" class="headerlink" title="新建history对象"></a>新建history对象</h4><p>在main.ts中添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createWebHashHistory, createRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = <span class="title function_">createWebHashHistory</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="新建router对象"><a href="#新建router对象" class="headerlink" title="新建router对象"></a>新建router对象</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  history,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Easyw</span>&#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="app-use-router"><a href="#app-use-router" class="headerlink" title="app.use(router)"></a>app.use(router)</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>); <span class="comment">// 挂载组件</span></span><br></pre></td></tr></table></figure>

<h4 id="在App-vue中添加router-view"><a href="#在App-vue中添加router-view" class="headerlink" title="在App.vue中添加router-view"></a>在App.vue中添加router-view</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="在routers中添加其他测试路由"><a href="#在routers中添加其他测试路由" class="headerlink" title="在routers中添加其他测试路由"></a>在routers中添加其他测试路由</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routers</span>: [&#123;</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Easyw</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/test&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Test</span>&#125;,</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<h4 id="在App-vue中添加router-link"><a href="#在App-vue中添加router-link" class="headerlink" title="在App.vue中添加router-link"></a>在App.vue中添加router-link</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Easyw<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/test&quot;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-添加子路由"><a href="#3-4-添加子路由" class="headerlink" title="3.4 添加子路由"></a>3.4 添加子路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> history = <span class="title function_">createWebHashHistory</span>();</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  history,</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/doc&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Doc</span>, <span class="attr">children</span>: [</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;switch&#x27;</span>, <span class="attr">component</span>: <span class="title class_">SwitchDemo</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>: <span class="string">&#x27;switch&#x27;</span>, <span class="attr">component</span>: <span class="title class_">SwitchDemo</span>&#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="3-5-路由切换时进行操作"><a href="#3-5-路由切换时进行操作" class="headerlink" title="3.5 路由切换时进行操作"></a>3.5 路由切换时进行操作</h3><p>先导入你的router文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="4、provide和inject"><a href="#4、provide和inject" class="headerlink" title="4、provide和inject"></a>4、provide和inject</h2><h3 id="4-1-实现思路"><a href="#4-1-实现思路" class="headerlink" title="4.1 实现思路"></a>4.1 实现思路</h3><p>在最外层的页面中，定义provide变量。然后在子组件中使用inject可以及时拿到该变量。</p>
<h2 id="4-2-使用步骤"><a href="#4-2-使用步骤" class="headerlink" title="4.2 使用步骤"></a>4.2 使用步骤</h2><p> 在最外层声明<br> App.vue<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line">// 导入相应内容</span><br><span class="line">import &#123;provide, ref&#125; from &#x27;vue</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    // 使用ref设置默认值</span><br><span class="line">    const asideVisible = ref(false)</span><br><span class="line">    // 使用provide设置名字以及它对应的值，供子组件访问其数值</span><br><span class="line">    provide(&#x27;asideVisible&#x27;, asideVisible)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>子组件.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入相应内容</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;inject, <span class="title class_">Ref</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用inject获取名为asideVisible的provide</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> asideVisible = inject&lt;<span class="title class_">Ref</span>&lt;boolean&gt;&gt;(<span class="string">&#x27;asideVisible&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5、props外部传参"><a href="#5、props外部传参" class="headerlink" title="5、props外部传参"></a>5、props外部传参</h2><h3 id="5-1-实现思路"><a href="#5-1-实现思路" class="headerlink" title="5.1 实现思路"></a>5.1 实现思路</h3><p>在外部定义一个需要传参的属性名，后面带上需要传递的参数。在子组件中使用props接受该参数。如果需要修改使用context.$emit和$event进行数据的修改。</p>
<h3 id="5-2-使用步骤"><a href="#5-2-使用步骤" class="headerlink" title="5.2 使用步骤"></a>5.2 使用步骤</h3><h4 id="外部组件"><a href="#外部组件" class="headerlink" title="外部组件"></a>外部组件</h4><p>定义属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="title function_">ref</span>(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传递参数，并定义事件名</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Switch</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">update:value</span>=<span class="string">&quot;value = $event&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><p>接受参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="title class_">Boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props, context</span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">modify</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    context.$emit(<span class="string">&#x27;update:value&#x27;</span>, !props.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-使用v-model简化"><a href="#5-3-使用v-model简化" class="headerlink" title="5.3 使用v-model简化"></a>5.3 使用v-model简化</h3><p>删除外部事件名，使用v-model代替</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Switch</span> <span class="attr">v-model:value</span>=<span class="string">&quot;value&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果使用v-model，子组件内部的触发事件名必须为 <code>update:外部定义的参数名</code></p>
</blockquote>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>react使用AntD</title>
    <url>/2020/09/03/react%E4%BD%BF%E7%94%A8AntD/</url>
    <content><![CDATA[<h2 id="一、安装AntD"><a href="#一、安装AntD" class="headerlink" title="一、安装AntD"></a>一、安装AntD</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add antd</span><br></pre></td></tr></table></figure>

<h2 id="二、引入AntD的CSS样式"><a href="#二、引入AntD的CSS样式" class="headerlink" title="二、引入AntD的CSS样式"></a>二、引入AntD的CSS样式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import <span class="string">&quot;antd/dist/antd.css&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、在官方文档寻找自己需要的组件并使用"><a href="#三、在官方文档寻找自己需要的组件并使用" class="headerlink" title="三、在官方文档寻找自己需要的组件并使用"></a>三、在官方文档寻找自己需要的组件并使用</h2><h3 id="例如：Button"><a href="#例如：Button" class="headerlink" title="例如：Button"></a>例如：Button</h3><ol>
<li>先import组件到页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接使用</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Demo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span>&gt;</span>次按钮<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例如：Form"><a href="#例如：Form" class="headerlink" title="例如：Form"></a>例如：Form</h3><ol>
<li>先import组件到页面</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span>, <span class="title class_">Button</span>, checkbox &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>直接使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> layout = &#123;</span><br><span class="line">    <span class="attr">labelCol</span>: &#123; <span class="attr">span</span>: <span class="number">8</span> &#125;,</span><br><span class="line">    <span class="attr">wrapperCol</span>: &#123; <span class="attr">span</span>: <span class="number">16</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tailLayout = &#123;</span><br><span class="line">    <span class="attr">wrapperCol</span>: &#123; <span class="attr">offset</span>: <span class="number">8</span>, <span class="attr">span</span>: <span class="number">16</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Demo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFinish</span> = values =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success:&quot;</span>, values)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onFinishFailed</span> = errorInfo =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Failed:&quot;</span>, errorInfo)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#123;<span class="attr">...layout</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">name</span>=<span class="string">&quot;basic&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">initialValues</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">remember:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onFinish</span>=<span class="string">&#123;onFinish&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onFinishFailed</span>=<span class="string">&#123;onFinishFailed&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;Username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;username&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">rules</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">required:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">message:</span> &quot;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">username</span>!&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;Password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">rules</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">required:</span> <span class="attr">true</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">message:</span> &quot;<span class="attr">Please</span> <span class="attr">input</span> <span class="attr">your</span> <span class="attr">password</span>!&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Input.Password</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> &#123;<span class="attr">...tailLayout</span>&#125; <span class="attr">name</span>=<span class="string">&quot;remember&quot;</span> <span class="attr">valuePropName</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Checkbox</span>&gt;</span>Remember me<span class="tag">&lt;/<span class="name">Checkbox</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Form.Item</span> &#123;<span class="attr">...tailLayout</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Submit</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改里面的参数达到自己的效果</li>
</ol>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title>taro的CSS-in-JS方案</title>
    <url>/2020/09/01/taro%E7%9A%84CSS-in-JS%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="linaria"><a href="#linaria" class="headerlink" title="linaria"></a>linaria</h2><p>在taro中使用React开发，无法使用之前的styled-components的CSS方案。官方提供了一个linaria的一种CSS样式方案。这种方案与styled-components方案类似。</p>
<h3 id="安装及使用"><a href="#安装及使用" class="headerlink" title="安装及使用"></a>安装及使用</h3><p>1.下载安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add linaria</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置 <code>babel.config.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [<span class="string">&#x27;taro&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">framework</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">      <span class="attr">ts</span>: <span class="literal">true</span></span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">&#x27;linaria/babel&#x27;</span> <span class="comment">// 添加到 babel-presets</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置 <code>config/index.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">mini</span>: &#123;</span><br><span class="line">    <span class="title function_">webpackChain</span>(<span class="params">chain, webpack</span>) &#123; <span class="comment">// 添加到config-mini</span></span><br><span class="line">      chain.<span class="property">module</span></span><br><span class="line">        .<span class="title function_">rule</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        .<span class="title function_">use</span>(<span class="string">&#x27;linariaLoader&#x27;</span>)</span><br><span class="line">        .<span class="title function_">loader</span>(<span class="string">&#x27;linaria/loader&#x27;</span>)</span><br><span class="line">        .<span class="title function_">options</span>(&#123;</span><br><span class="line">          <span class="attr">sourceMap</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>新建文件 <code>linaria.config.js</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">ignore</span>: <span class="regexp">/node_modules[\/\\](?!@tarojs[\/\\]components)/</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用方式</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@tarojs/components&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; styled &#125; <span class="keyword">from</span> <span class="string">&quot;linaria/react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Title</span> = <span class="title function_">styled</span>(<span class="title class_">View</span>)<span class="string">`</span></span><br><span class="line"><span class="string">    color: #333;</span></span><br><span class="line"><span class="string">    background: red;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Index</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            Hello World!</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>css-in-js</tag>
        <tag>taro</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式概括</title>
    <url>/2020/10/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<h2 id="1、创建正则表达式"><a href="#1、创建正则表达式" class="headerlink" title="1、创建正则表达式"></a>1、创建正则表达式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/123/</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">let</span> 变量名 = <span class="regexp">/表达式/</span></span><br></pre></td></tr></table></figure>

<h2 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表达式.<span class="title function_">test</span>(检测的字符串)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>符合返回true否则返回false</p>
</blockquote>
<h2 id="3、正则表达式的特殊字符"><a href="#3、正则表达式的特殊字符" class="headerlink" title="3、正则表达式的特殊字符"></a>3、正则表达式的特殊字符</h2><h3 id="3-1-边界符"><a href="#3-1-边界符" class="headerlink" title="3.1 边界符^$"></a>3.1 边界符^$</h3><p>^ 从这里开始</p>
<p>$ 到这里结束</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^abc/</span><br><span class="line"></span><br><span class="line"><span class="regexp">/^abc$/</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-或者-（只包含其中一个）"><a href="#3-2-或者-（只包含其中一个）" class="headerlink" title="3.2 或者[]（只包含其中一个）"></a>3.2 或者[]（只包含其中一个）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[abc]$/</span><br></pre></td></tr></table></figure>

<h3 id="3-3-范围"><a href="#3-3-范围" class="headerlink" title="3.3 范围-"></a>3.3 范围-</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^a-z$/</span><br></pre></td></tr></table></figure>

<h3 id="3-4-取反"><a href="#3-4-取反" class="headerlink" title="3.4 取反[^]"></a>3.4 取反[^]</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/^[^<span class="number">0</span>-<span class="number">9</span>]$/</span><br></pre></td></tr></table></figure>

<h2 id="4、量词符"><a href="#4、量词符" class="headerlink" title="4、量词符*+?{}"></a>4、量词符*+?{}</h2><ul>
<li>出现0次或很多次</li>
</ul>
<ul>
<li>出现1次或很多次</li>
</ul>
<p>？ 出现0次或者1次</p>
<p>{} 重复出现多次</p>
<p>{数字,} 大于多少次</p>
<p>{数字1, 数字2} 大于等于数字1，小于等于数字2</p>
<h2 id="5、预定义类"><a href="#5、预定义类" class="headerlink" title="5、预定义类"></a>5、预定义类</h2><p>\d 匹配0-9之间[0-9]</p>
<p>\D 匹配0-9以外的所有字符[^0-9]</p>
<p>\w 匹配所有字母、数字和下划线[A-Za-z0-9_]</p>
<p>\W 匹配字母、数字、下划线、以外的所有字符[^A-Za-z0-9_]</p>
<p>\s 匹配空格（换行符、制表符、空格等）[\t\r\n\v\f]</p>
<p>\S 匹配非空格的字符[^\t\r\n\v\f]</p>
<h2 id="6、替换"><a href="#6、替换" class="headerlink" title="6、替换"></a>6、替换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">字符串.<span class="title function_">replace</span>(正则, 需要替换内容)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>React如何使用Hooks</title>
    <url>/2020/09/01/React%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hooks/</url>
    <content><![CDATA[<h2 id="一、State"><a href="#一、State" class="headerlink" title="一、State"></a>一、State</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入useState</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明State</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组第一个参数为使用的值，第二个参数为设置值的函数。useState的参数为默认值。</p>
</blockquote>
<ol start="3">
<li>使用值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>设置值、</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">setValue</span>(value + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数即为对值得变更操作</p>
</blockquote>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> [value, setValue] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add1</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">setValue</span>(value + <span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add1&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure>

<h2 id="二、useReducer"><a href="#二、useReducer" class="headerlink" title="二、useReducer"></a>二、useReducer</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入useReducer</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建初始值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建所有操作类型</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> + action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;multi&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> - action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;未知类型&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用useReducer，获得读写操作</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(action, initial)</span><br></pre></td></tr></table></figure>

<p>读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">dispath(type: &quot;add&quot;, numer: 1 )</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initial = &#123;</span><br><span class="line">    <span class="attr">n</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;add&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> + action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action.<span class="property">type</span> = <span class="string">&quot;multi&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">n</span>: state.<span class="property">n</span> - action.<span class="property">number</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;未知类型&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseReducer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initial)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;add&quot;</span>, <span class="attr">number</span>: <span class="number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;add&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&#123; type: &quot;multi&quot;, number: 3 &#125;)&#125;&gt;-3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseReducer</span></span><br></pre></td></tr></table></figure>

<h2 id="三、useContext"><a href="#三、useContext" class="headerlink" title="三、useContext"></a>三、useContext</h2><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入createContext、useContext</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建Context</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置作用域，传递你需要使用的数据</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;n,</span> <span class="attr">setN</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Father</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Son</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在作用域中的组件解构传递的数据</li>
</ol>
<p>Father</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;n, setN&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>使用解构出来的数据</li>
</ol>
<p>Father</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>setN(n=&gt;n+1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseContext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">n</span>, <span class="attr">setN</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Father</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Son</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Father</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; n, setN &#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是爸爸&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 1)&#125;&gt;爸爸按钮+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Son</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; n, setN &#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是儿子&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n - 1)&#125;&gt;儿子按钮-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseContext</span></span><br></pre></td></tr></table></figure>

<h2 id="四、useEffect和useLayoutEffect"><a href="#四、useEffect和useLayoutEffect" class="headerlink" title="四、useEffect和useLayoutEffect"></a>四、useEffect和useLayoutEffect</h2><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>每次都执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>第一次渲染执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[])</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在某个值变化的时候执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;,[n])</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>在页面渲染前执行</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useLayoutEffect</span>(<span class="function">()=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState, useEffect, useLayoutEffect&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseEffect</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [display, setDisplay] = <span class="title function_">useState</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我每次都执行&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在第一次执行&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在销毁的时候执行&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我只在n变化执行&quot;</span>)</span><br><span class="line">  &#125;, [n])</span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是在页面渲染前就执行结束&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;display ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 5)&#125;&gt;+5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        setDisplay(display =&gt; !display)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;&gt;消灭n</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseEffect</span></span><br></pre></td></tr></table></figure>

<h2 id="五、memo-useMemo-useCallback"><a href="#五、memo-useMemo-useCallback" class="headerlink" title="五、memo&amp;useMemo&amp;useCallback"></a>五、memo&amp;useMemo&amp;useCallback</h2><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useMemo, useState, memo, useEffect, useCallback&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>memo包住不需要重新渲染的组件函数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Childer</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是孩子，我不想执行&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孩子 &#123;props.childer&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>useMemo包住防止因对象地址变化而导致的误渲染</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> childClick = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [childer])</span><br></pre></td></tr></table></figure>


<h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useMemo, useState, memo, useEffect, useCallback&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseMemoAndUseCallback</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [childer, setChilder] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我变化了&quot;</span>)</span><br><span class="line">  &#125;, [n])</span><br><span class="line">  <span class="comment">// 使用useMemo阻止因为对象地址变化而重新执行</span></span><br><span class="line">  <span class="keyword">const</span> childClick = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [childer])</span><br><span class="line">  <span class="comment">// 等同于useMemo，比useMemo简单</span></span><br><span class="line">  <span class="keyword">const</span> childClick2 = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Childer</span> <span class="attr">childer</span>=<span class="string">&#123;childer&#125;</span> <span class="attr">childClick</span>=<span class="string">&#123;childClick&#125;</span> <span class="attr">childClick2</span>=<span class="string">&#123;childClick2&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 10)&#125;&gt;+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用memo阻止子组件state没改变，因父组件属性改变而重新渲染</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Childer</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是孩子，我不想执行&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是孩子 &#123;props.childer&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseMemoAndUseCallback</span></span><br></pre></td></tr></table></figure>

<h2 id="六、useRef"><a href="#六、useRef" class="headerlink" title="六、useRef"></a>六、useRef</h2><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>声明变量</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用&#x2F;修改值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">count.<span class="property">current</span> += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useEffect, useRef, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoUseRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">useRef</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">current</span> += <span class="number">1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第&quot;</span> + count.<span class="property">current</span> + <span class="string">&quot;执行&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;n&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setN(n =&gt; n + 1)&#125;&gt;n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoUseRef</span></span><br></pre></td></tr></table></figure>

<h2 id="七、useImperativeHandle"><a href="#七、useImperativeHandle" class="headerlink" title="七、useImperativeHandle"></a>七、useImperativeHandle</h2><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useImperativeHandle &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在父组件创建ref</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buttonRef = <span class="title function_">useRef</span>()</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>传递给子组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;buttonRef&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>子组件接收并对ref进行修改后返还出去</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useImperativeHandle</span>(ref, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;forwardRef, useRef, useEffect, useImperativeHandle&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoImperativeHandle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> buttonRef = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(buttonRef)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">ref</span>=<span class="string">&#123;buttonRef&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(buttonRef.current.x())&#125;&gt;按钮<span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Son</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> realRef = <span class="title function_">useRef</span>()</span><br><span class="line">  <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">ref</span>: realRef</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;realRef&#125;</span> &#123;<span class="attr">...props</span>&#125;/&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoImperativeHandle</span></span><br></pre></td></tr></table></figure>

<h2 id="八、forwardRef"><a href="#八、forwardRef" class="headerlink" title="八、forwardRef"></a>八、forwardRef</h2><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>导入</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forwardRef, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建ref</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>向组件传ref</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">ChildNode</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用forwardRef接收ref</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ChildNode</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(ref)&#125;&gt;&#123;props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码示例-7"><a href="#代码示例-7" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;forwardRef, useRef&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoForwardRef</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = <span class="title function_">useRef</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是本身的元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildNode</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">ChildNode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildNode</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> console.log(ref)&#125;&gt;&#123;props.children&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoForwardRef</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展一、useContext-useReducer代替Redux"><a href="#拓展一、useContext-useReducer代替Redux" class="headerlink" title="拓展一、useContext&amp;useReducer代替Redux"></a>拓展一、useContext&amp;useReducer代替Redux</h2><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>创建Store数据仓库</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cosnt store = &#123;<span class="attr">user</span>: <span class="literal">null</span>, <span class="attr">books</span>: <span class="literal">null</span>, movies&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建reducer行为操作列表</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setUser&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">user</span>: action.<span class="property">user</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setBooks&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">books</span>: action.<span class="property">books</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setMovies&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">movies</span>: action.<span class="property">movies</span>&#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;位置类型&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Context</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建读写的API</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, store)</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>定义作用域</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,</span> <span class="attr">dispatch</span>&#125;&#125;&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">User</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Books</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Movies</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>使用传递的数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>对数据进行操作</li>
</ol>
<p>读</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setUser&quot;</span>, <span class="attr">user</span>: 数据&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="代码示例-8"><a href="#代码示例-8" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useContext, useEffect, useReducer, createContext&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据仓库</span></span><br><span class="line"><span class="keyword">const</span> store = &#123;</span><br><span class="line">  <span class="attr">user</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">books</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">movies</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 行为类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setUser&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">user</span>: action.<span class="property">user</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setBooks&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">books</span>: action.<span class="property">books</span>&#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setMovies&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, <span class="attr">movies</span>: action.<span class="property">movies</span>&#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;位置类型&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Context</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">createContext</span>(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoContextReducer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建数据读写的API</span></span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, store)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Context.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;state,</span> <span class="attr">dispatch</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">User</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Books</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Movies</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Context.Provider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">User</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/user&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setUser&quot;</span>, user&#125;)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.user ? <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;state.user.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Books</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">books</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setBooks&quot;</span>, books&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>书籍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.books ? state.books.map(book =&gt; (<span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;book.id&#125;</span>&gt;</span>&#123;book.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>)) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Movies</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useContext</span>(<span class="title class_">Context</span>)</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">ajax</span>(<span class="string">&quot;/movies&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">movies</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123;<span class="attr">type</span>: <span class="string">&quot;setMovies&quot;</span>, <span class="attr">movies</span>: movies&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;state.movies ? state.movies.map(item =&gt; <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoContextReducer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟请求数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (path === <span class="string">&quot;/user&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;梁又文&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/books&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;我是一本好书&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;我是一本坏书&quot;</span></span><br><span class="line">        &#125;])</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path === <span class="string">&quot;/movies&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>([&#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;最时间的尽头&quot;</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;八百&quot;</span></span><br><span class="line">        &#125;])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓展二、自定义hook"><a href="#拓展二、自定义hook" class="headerlink" title="拓展二、自定义hook"></a>拓展二、自定义hook</h2><h3 id="代码示例-9"><a href="#代码示例-9" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="useList"><a href="#useList" class="headerlink" title="useList"></a>useList</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [list, setList] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> (&#123;</span><br><span class="line">    <span class="attr">list</span>: list,</span><br><span class="line">    <span class="attr">setList</span>: setList</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useList</span><br></pre></td></tr></table></figure>

<h4 id="DemoCustomHook"><a href="#DemoCustomHook" class="headerlink" title="DemoCustomHook"></a>DemoCustomHook</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> useList <span class="keyword">from</span> <span class="string">&quot;./hooks/useList&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DemoCustomHook</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;list, setList&#125; = <span class="title function_">useList</span>()</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setList(n =&gt; n + 10)&#125;&gt;+10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DemoCustomHook</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>react</tag>
        <tag>hooks</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟DOM 和 DOM diff</title>
    <url>/2020/09/13/%E8%99%9A%E6%8B%9FDOM%20%E5%92%8C%20DOM%20diff/</url>
    <content><![CDATA[<h2 id="一、什么是虚拟DOM"><a href="#一、什么是虚拟DOM" class="headerlink" title="一、什么是虚拟DOM"></a>一、什么是虚拟DOM</h2><p>一个能表示DOM树的对象，通常含有标签名、标签上的属性、事件监听和子元素们，以及其他属性</p>
<h2 id="二、虚拟DOM有什么优点"><a href="#二、虚拟DOM有什么优点" class="headerlink" title="二、虚拟DOM有什么优点"></a>二、虚拟DOM有什么优点</h2><h3 id="1-减少DOM操作"><a href="#1-减少DOM操作" class="headerlink" title="1. 减少DOM操作"></a>1. 减少DOM操作</h3><ul>
<li>虚拟DOM可以将多次操作合并为一次操作。</li>
<li>虚拟DOM借助DOM diff 可以将多余的操作省略</li>
</ul>
<h3 id="2-跨平台"><a href="#2-跨平台" class="headerlink" title="2. 跨平台"></a>2. 跨平台</h3><ul>
<li>虚拟DOM不仅可以变成DOM，还可以变成小程序、iOS应用，因为虚拟DOM本质是JS对象</li>
</ul>
<h2 id="三、虚拟DOM有什么缺点"><a href="#三、虚拟DOM有什么缺点" class="headerlink" title="三、虚拟DOM有什么缺点"></a>三、虚拟DOM有什么缺点</h2><p>需要额外的创建函数，如createElement 或 h，但可以通过 JSX 来简化成 XML 语法</p>
<h2 id="四、虚拟DOM是什么样子"><a href="#四、虚拟DOM是什么样子" class="headerlink" title="四、虚拟DOM是什么样子"></a>四、虚拟DOM是什么样子</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">type</span>: <span class="string">&#x27;span&#x27;</span>, ...&#125;,</span><br><span class="line">      &#123;<span class="attr">type</span>: <span class="string">&#x27;span&#x27;</span>, ...&#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">onClick</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">ref</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="attr">on</span>: &#123;</span><br><span class="line">      <span class="attr">click</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;<span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ...&#125;,</span><br><span class="line">    &#123;<span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>, ...&#125;</span><br><span class="line">  ],</span><br><span class="line">  ... </span><br></pre></td></tr></table></figure>

<h2 id="五、如何创建虚拟DOM"><a href="#五、如何创建虚拟DOM" class="headerlink" title="五、如何创建虚拟DOM"></a>五、如何创建虚拟DOM</h2><h3 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="attr">className</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">onClick</span>: <span class="function">()=&gt;</span>&#123;&#125;, [</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span1&#x27;</span>),</span><br><span class="line">  <span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span2&#x27;</span>)</span><br><span class="line">]&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-1"><a href="#Vue-1" class="headerlink" title="Vue"></a>Vue</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">h</span>(<span class="string">&#x27;div&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">class</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">  <span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: <span class="function">()=&gt;</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [<span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span1&#x27;</span>), <span class="title function_">h</span>(<span class="string">&#x27;span&#x27;</span>, &#123;&#125;, <span class="string">&#x27;span2&#x27;</span>)])</span><br></pre></td></tr></table></figure>

<h3 id="React-JSX"><a href="#React-JSX" class="headerlink" title="React JSX"></a>React JSX</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;red&quot;</span> onClick=<span class="string">&quot;&#123;fn&#125;&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-Template"><a href="#Vue-Template" class="headerlink" title="Vue Template"></a>Vue Template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;red&quot; @click=&quot;fn&quot;&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;/span&gt;</span><br><span class="line">  &lt;span&gt;span1&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="六、什么是DOM-diff"><a href="#六、什么是DOM-diff" class="headerlink" title="六、什么是DOM diff"></a>六、什么是DOM diff</h2><p>DOM diff其实就是一个函数，它会对比 oldNode 与 newNode 的区别。从而减少不必要的渲染。但是DOM diff会有bug。造成页面渲染的误操作，可以使用key来辅助diff的对比。从而消除bug。</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>vue</tag>
        <tag>react</tag>
        <tag>vdom</tag>
        <tag>dom-diff</tag>
      </tags>
  </entry>
  <entry>
    <title>Chorme插件Surfingkeys简单使用</title>
    <url>/2020/09/04/Chorme%E6%8F%92%E4%BB%B6Surfingkeys%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="一、特点"><a href="#一、特点" class="headerlink" title="一、特点"></a>一、特点</h2><p>对Vim的使用者极其友好。如果你会Vim那么学习使用这个浏览器插件将很快上手。如果不会也没关系，我这里总结一些常用的快捷键供大家学习。</p>
<p><a href="https://chrome.google.com/webstore/detail/surfingkeys/gfbliohnnapiefjpjlpjnehglfpaknnc">插件地址</a></p>
<h2 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h2><h3 id="链接操作"><a href="#链接操作" class="headerlink" title="链接操作"></a>链接操作</h3><p>f —— 搜索当前页面的所有链接地址，并提示相应的快捷键。如果快捷键重叠可以使用 <code>Shift</code> 切换层级。<br>C —— 在新页面打开一个链接<br>gf —— 与C功能一致，在新页面打开一个链接<br>af —— 在新页面打开一个链接，并跳转至此页面<br>cf —— 在新页面打开多个链接</p>
<h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><p>E&#x2F;R —— 向左&#x2F;右切换标签栏<br>x —— 关闭当前标签页<br>X —— 恢复关闭的标签页<br>W —— 在新窗口打开当前标签页<br>yt —— 复制当前页面，并切换至新页面</p>
<h3 id="标签栏操作"><a href="#标签栏操作" class="headerlink" title="标签栏操作"></a>标签栏操作</h3><p>&lt;&lt;&#x2F;&gt;&gt; —— 向左&#x2F;右移动当前页面的标签栏位置<br>g0 —— 切换到标签栏中的第一个页面<br>g$ —— 切换到标签栏的最后一个页面<br>gxt —— 关闭当前页面左侧的一个页面<br>gxT —— 关闭当前页面的右侧一个页面<br>gx0 —— 关闭当前页面的左侧所有页面<br>gx$ —— 关闭当前页面的右侧所有页面</p>
<h3 id="滚动操作"><a href="#滚动操作" class="headerlink" title="滚动操作"></a>滚动操作</h3><p>e&#x2F;d —— 想上&#x2F;x滚动页面<br>gg —— 滚动到页面顶部<br>G —— 滚动到页面底部<br>0 —— 滚动到页面左侧<br>$ —— 滚动到页面右侧<br>j&#x2F;k —— 上&#x2F;下移动页面<br>h&#x2F;l —— 左&#x2F;右移动页面<br>cs —— 切换滚动目标<br>cS —— 重置滚动目标</p>
<h3 id="捕获"><a href="#捕获" class="headerlink" title="捕获"></a>捕获</h3><p>yS —— 当前滚动页面截图<br>yG —— 当前页面截图</p>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>sg —— 谷歌搜索<br>sw —— 必应搜索<br>sb —— 百度搜索<br>sy —— youtube搜索</p>
<h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>Ctrl-i —— 使用Vim的编辑器编辑内容</p>
]]></content>
      <categories>
        <category>博客</category>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>前端</tag>
        <tag>chrome</tag>
        <tag>surfingkeys</tag>
      </tags>
  </entry>
</search>
